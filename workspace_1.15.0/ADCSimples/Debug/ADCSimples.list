
ADCSimples.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a40  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08004c40  08004c40  00014c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800502c  0800502c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005034  08005034  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005034  08005034  00015034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005038  08005038  00015038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800503c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  200001dc  08005218  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08005218  00020260  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006003  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001403  00000000  00000000  0002620d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  00027610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000520  00000000  00000000  00027be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027290  00000000  00000000  00028108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006c74  00000000  00000000  0004f398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f20e6  00000000  00000000  0005600c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001480f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002420  00000000  00000000  00148144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08004c28 	.word	0x08004c28

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08004c28 	.word	0x08004c28

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	0000      	movs	r0, r0
	...

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f000 fa91 	bl	8000b22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f834 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 f8e0 	bl	80007c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000608:	f000 f88c 	bl	8000724 <MX_ADC1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_ADC_Start(&hadc1); //Inicializa o ADC1
 800060c:	4814      	ldr	r0, [pc, #80]	; (8000660 <main+0x68>)
 800060e:	f000 fb4d 	bl	8000cac <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100); //Aquisição pelo modo poll for conversion a 100 milisegundos de timeout
 8000612:	2164      	movs	r1, #100	; 0x64
 8000614:	4812      	ldr	r0, [pc, #72]	; (8000660 <main+0x68>)
 8000616:	f000 fc4b 	bl	8000eb0 <HAL_ADC_PollForConversion>

	  adc = HAL_ADC_GetValue(&hadc1); // Captura o valor do ADC
 800061a:	4811      	ldr	r0, [pc, #68]	; (8000660 <main+0x68>)
 800061c:	f000 fcd3 	bl	8000fc6 <HAL_ADC_GetValue>
 8000620:	4603      	mov	r3, r0
 8000622:	b29a      	uxth	r2, r3
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <main+0x6c>)
 8000626:	801a      	strh	r2, [r3, #0]
	  adc2 = (3.3/1023)*adc;
 8000628:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <main+0x6c>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	ee07 3a90 	vmov	s15, r3
 8000630:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000634:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000658 <main+0x60>
 8000638:	ee27 7b06 	vmul.f64	d7, d7, d6
 800063c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <main+0x70>)
 8000642:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(500);
 8000646:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800064a:	f000 fac7 	bl	8000bdc <HAL_Delay>

	  HAL_ADC_Stop(&hadc1); //Finaliza a conversão após adquirir o valor
 800064e:	4804      	ldr	r0, [pc, #16]	; (8000660 <main+0x68>)
 8000650:	f000 fbfa 	bl	8000e48 <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc1); //Inicializa o ADC1
 8000654:	e7da      	b.n	800060c <main+0x14>
 8000656:	bf00      	nop
 8000658:	a6d01a6d 	.word	0xa6d01a6d
 800065c:	3f6a6d01 	.word	0x3f6a6d01
 8000660:	20000200 	.word	0x20000200
 8000664:	200001f8 	.word	0x200001f8
 8000668:	200001fc 	.word	0x200001fc

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2234      	movs	r2, #52	; 0x34
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fe5c 	bl	8002338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	4b22      	ldr	r3, [pc, #136]	; (800071c <SystemClock_Config+0xb0>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a21      	ldr	r2, [pc, #132]	; (800071c <SystemClock_Config+0xb0>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <SystemClock_Config+0xb0>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a8:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <SystemClock_Config+0xb4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b0:	4a1b      	ldr	r2, [pc, #108]	; (8000720 <SystemClock_Config+0xb4>)
 80006b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <SystemClock_Config+0xb4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c4:	2302      	movs	r3, #2
 80006c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	2310      	movs	r3, #16
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 f963 	bl	80019a4 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006e4:	f000 f888 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f001 fbfc 	bl	8001f00 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800070e:	f000 f873 	bl	80007f8 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072a:	463b      	mov	r3, r7
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000736:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_ADC1_Init+0x98>)
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <MX_ADC1_Init+0x9c>)
 800073a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_ADC1_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000742:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_ADC1_Init+0x98>)
 8000744:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000748:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_ADC1_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_ADC1_Init+0x98>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_ADC1_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_ADC1_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_ADC1_Init+0x98>)
 8000766:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <MX_ADC1_Init+0xa0>)
 8000768:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_ADC1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_ADC1_Init+0x98>)
 8000772:	2201      	movs	r2, #1
 8000774:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_ADC1_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_ADC1_Init+0x98>)
 8000780:	2201      	movs	r2, #1
 8000782:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000784:	480d      	ldr	r0, [pc, #52]	; (80007bc <MX_ADC1_Init+0x98>)
 8000786:	f000 fa4d 	bl	8000c24 <HAL_ADC_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000790:	f000 f832 	bl	80007f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000794:	2303      	movs	r3, #3
 8000796:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000798:	2301      	movs	r3, #1
 800079a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800079c:	2306      	movs	r3, #6
 800079e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_ADC1_Init+0x98>)
 80007a6:	f000 fc1b 	bl	8000fe0 <HAL_ADC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007b0:	f000 f822 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000200 	.word	0x20000200
 80007c0:	40012000 	.word	0x40012000
 80007c4:	0f000001 	.word	0x0f000001

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_GPIO_Init+0x2c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <MX_GPIO_Init+0x2c>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_GPIO_Init+0x2c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000800:	e7fe      	b.n	8000800 <Error_Handler+0x8>
	...

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <HAL_MspInit+0x44>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <HAL_MspInit+0x44>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6413      	str	r3, [r2, #64]	; 0x40
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <HAL_MspInit+0x44>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <HAL_MspInit+0x44>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	4a08      	ldr	r2, [pc, #32]	; (8000848 <HAL_MspInit+0x44>)
 8000828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082c:	6453      	str	r3, [r2, #68]	; 0x44
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_MspInit+0x44>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800

0800084c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <HAL_ADC_MspInit+0x74>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d123      	bne.n	80008b6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <HAL_ADC_MspInit+0x78>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <HAL_ADC_MspInit+0x78>)
 8000874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <HAL_ADC_MspInit+0x78>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <HAL_ADC_MspInit+0x78>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <HAL_ADC_MspInit+0x78>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <HAL_ADC_MspInit+0x78>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800089e:	2308      	movs	r3, #8
 80008a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a2:	2303      	movs	r3, #3
 80008a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <HAL_ADC_MspInit+0x7c>)
 80008b2:	f000 fecb 	bl	800164c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008b6:	bf00      	nop
 80008b8:	3728      	adds	r7, #40	; 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40012000 	.word	0x40012000
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020000 	.word	0x40020000

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <NMI_Handler+0x4>

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <MemManage_Handler+0x4>

080008de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000918:	f000 f940 	bl	8000b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}

08000920 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
	return 1;
 8000924:	2301      	movs	r3, #1
}
 8000926:	4618      	mov	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <_kill>:

int _kill(int pid, int sig)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800093a:	f001 fcd3 	bl	80022e4 <__errno>
 800093e:	4603      	mov	r3, r0
 8000940:	2216      	movs	r2, #22
 8000942:	601a      	str	r2, [r3, #0]
	return -1;
 8000944:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <_exit>:

void _exit (int status)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000958:	f04f 31ff 	mov.w	r1, #4294967295
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff ffe7 	bl	8000930 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000962:	e7fe      	b.n	8000962 <_exit+0x12>

08000964 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	e00a      	b.n	800098c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000976:	f3af 8000 	nop.w
 800097a:	4601      	mov	r1, r0
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	1c5a      	adds	r2, r3, #1
 8000980:	60ba      	str	r2, [r7, #8]
 8000982:	b2ca      	uxtb	r2, r1
 8000984:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	3301      	adds	r3, #1
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697a      	ldr	r2, [r7, #20]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	429a      	cmp	r2, r3
 8000992:	dbf0      	blt.n	8000976 <_read+0x12>
	}

return len;
 8000994:	687b      	ldr	r3, [r7, #4]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b086      	sub	sp, #24
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	60f8      	str	r0, [r7, #12]
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
 80009ae:	e009      	b.n	80009c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	1c5a      	adds	r2, r3, #1
 80009b4:	60ba      	str	r2, [r7, #8]
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	3301      	adds	r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dbf1      	blt.n	80009b0 <_write+0x12>
	}
	return len;
 80009cc:	687b      	ldr	r3, [r7, #4]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <_close>:

int _close(int file)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
	return -1;
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
 80009f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009fe:	605a      	str	r2, [r3, #4]
	return 0;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <_isatty>:

int _isatty(int file)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
	return 1;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
	return 0;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a48:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <_sbrk+0x5c>)
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <_sbrk+0x60>)
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <_sbrk+0x64>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <_sbrk+0x68>)
 8000a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <_sbrk+0x64>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d207      	bcs.n	8000a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a70:	f001 fc38 	bl	80022e4 <__errno>
 8000a74:	4603      	mov	r3, r0
 8000a76:	220c      	movs	r2, #12
 8000a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	e009      	b.n	8000a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <_sbrk+0x64>)
 8000a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a92:	68fb      	ldr	r3, [r7, #12]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20080000 	.word	0x20080000
 8000aa0:	00000400 	.word	0x00000400
 8000aa4:	20000248 	.word	0x20000248
 8000aa8:	20000260 	.word	0x20000260

08000aac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <SystemInit+0x20>)
 8000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab6:	4a05      	ldr	r2, [pc, #20]	; (8000acc <SystemInit+0x20>)
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ad6:	490e      	ldr	r1, [pc, #56]	; (8000b10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ad8:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000adc:	e002      	b.n	8000ae4 <LoopCopyDataInit>

08000ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae2:	3304      	adds	r3, #4

08000ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae8:	d3f9      	bcc.n	8000ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aea:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aec:	4c0b      	ldr	r4, [pc, #44]	; (8000b1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af0:	e001      	b.n	8000af6 <LoopFillZerobss>

08000af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af4:	3204      	adds	r2, #4

08000af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af8:	d3fb      	bcc.n	8000af2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000afa:	f7ff ffd7 	bl	8000aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000afe:	f001 fbf7 	bl	80022f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b02:	f7ff fd79 	bl	80005f8 <main>
  bx  lr    
 8000b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b08:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000b14:	0800503c 	.word	0x0800503c
  ldr r2, =_sbss
 8000b18:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000b1c:	20000260 	.word	0x20000260

08000b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC_IRQHandler>

08000b22 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b26:	2003      	movs	r0, #3
 8000b28:	f000 fd5c 	bl	80015e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f000 f805 	bl	8000b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b32:	f7ff fe67 	bl	8000804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_InitTick+0x54>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_InitTick+0x58>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 fd69 	bl	8001632 <HAL_SYSTICK_Config>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e00e      	b.n	8000b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d80a      	bhi.n	8000b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	f000 fd3f 	bl	80015fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b7c:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <HAL_InitTick+0x5c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	e000      	b.n	8000b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000000 	.word	0x20000000
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20000004 	.word	0x20000004

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	2000024c 	.word	0x2000024c

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_GetTick+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	2000024c 	.word	0x2000024c

08000bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be4:	f7ff ffee 	bl	8000bc4 <HAL_GetTick>
 8000be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf4:	d005      	beq.n	8000c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_Delay+0x44>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4413      	add	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c02:	bf00      	nop
 8000c04:	f7ff ffde 	bl	8000bc4 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d8f7      	bhi.n	8000c04 <HAL_Delay+0x28>
  {
  }
}
 8000c14:	bf00      	nop
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008

08000c24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d101      	bne.n	8000c3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e031      	b.n	8000c9e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d109      	bne.n	8000c56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff fe02 	bl	800084c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f003 0310 	and.w	r3, r3, #16
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d116      	bne.n	8000c90 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <HAL_ADC_Init+0x84>)
 8000c68:	4013      	ands	r3, r2
 8000c6a:	f043 0202 	orr.w	r2, r3, #2
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f000 fb0a 	bl	800128c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f023 0303 	bic.w	r3, r3, #3
 8000c86:	f043 0201 	orr.w	r2, r3, #1
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c8e:	e001      	b.n	8000c94 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	ffffeefd 	.word	0xffffeefd

08000cac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d101      	bne.n	8000cc6 <HAL_ADC_Start+0x1a>
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	e0ad      	b.n	8000e22 <HAL_ADC_Start+0x176>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d018      	beq.n	8000d0e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f042 0201 	orr.w	r2, r2, #1
 8000cea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000cec:	4b50      	ldr	r3, [pc, #320]	; (8000e30 <HAL_ADC_Start+0x184>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a50      	ldr	r2, [pc, #320]	; (8000e34 <HAL_ADC_Start+0x188>)
 8000cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf6:	0c9a      	lsrs	r2, r3, #18
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000d00:	e002      	b.n	8000d08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1f9      	bne.n	8000d02 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d175      	bne.n	8000e08 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d20:	4b45      	ldr	r3, [pc, #276]	; (8000e38 <HAL_ADC_Start+0x18c>)
 8000d22:	4013      	ands	r3, r2
 8000d24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d007      	beq.n	8000d4a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d56:	d106      	bne.n	8000d66 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5c:	f023 0206 	bic.w	r2, r3, #6
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	645a      	str	r2, [r3, #68]	; 0x44
 8000d64:	e002      	b.n	8000d6c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d7c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000d7e:	4b2f      	ldr	r3, [pc, #188]	; (8000e3c <HAL_ADC_Start+0x190>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 031f 	and.w	r3, r3, #31
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d10f      	bne.n	8000daa <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d143      	bne.n	8000e20 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	e03a      	b.n	8000e20 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a24      	ldr	r2, [pc, #144]	; (8000e40 <HAL_ADC_Start+0x194>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d10e      	bne.n	8000dd2 <HAL_ADC_Start+0x126>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d107      	bne.n	8000dd2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000dd0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <HAL_ADC_Start+0x190>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0310 	and.w	r3, r3, #16
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d120      	bne.n	8000e20 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a18      	ldr	r2, [pc, #96]	; (8000e44 <HAL_ADC_Start+0x198>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d11b      	bne.n	8000e20 <HAL_ADC_Start+0x174>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d114      	bne.n	8000e20 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	e00b      	b.n	8000e20 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	f043 0210 	orr.w	r2, r3, #16
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e18:	f043 0201 	orr.w	r2, r3, #1
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000000 	.word	0x20000000
 8000e34:	431bde83 	.word	0x431bde83
 8000e38:	fffff8fe 	.word	0xfffff8fe
 8000e3c:	40012300 	.word	0x40012300
 8000e40:	40012000 	.word	0x40012000
 8000e44:	40012200 	.word	0x40012200

08000e48 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d101      	bne.n	8000e5e <HAL_ADC_Stop+0x16>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	e01f      	b.n	8000e9e <HAL_ADC_Stop+0x56>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2201      	movs	r2, #1
 8000e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 0201 	bic.w	r2, r2, #1
 8000e74:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d107      	bne.n	8000e94 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_ADC_Stop+0x64>)
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	f043 0201 	orr.w	r2, r3, #1
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	ffffeefe 	.word	0xffffeefe

08000eb0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ecc:	d113      	bne.n	8000ef6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000edc:	d10b      	bne.n	8000ef6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f043 0220 	orr.w	r2, r3, #32
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e063      	b.n	8000fbe <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000ef6:	f7ff fe65 	bl	8000bc4 <HAL_GetTick>
 8000efa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000efc:	e021      	b.n	8000f42 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d01d      	beq.n	8000f42 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d007      	beq.n	8000f1c <HAL_ADC_PollForConversion+0x6c>
 8000f0c:	f7ff fe5a 	bl	8000bc4 <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	683a      	ldr	r2, [r7, #0]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d212      	bcs.n	8000f42 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d00b      	beq.n	8000f42 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f043 0204 	orr.w	r2, r3, #4
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e03d      	b.n	8000fbe <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d1d6      	bne.n	8000efe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f06f 0212 	mvn.w	r2, #18
 8000f58:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d123      	bne.n	8000fbc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d11f      	bne.n	8000fbc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f82:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d006      	beq.n	8000f98 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d111      	bne.n	8000fbc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d105      	bne.n	8000fbc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	f043 0201 	orr.w	r2, r3, #1
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d101      	bne.n	8000ffc <HAL_ADC_ConfigChannel+0x1c>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e136      	b.n	800126a <HAL_ADC_ConfigChannel+0x28a>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b09      	cmp	r3, #9
 800100a:	d93a      	bls.n	8001082 <HAL_ADC_ConfigChannel+0xa2>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001014:	d035      	beq.n	8001082 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68d9      	ldr	r1, [r3, #12]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	b29b      	uxth	r3, r3
 8001022:	461a      	mov	r2, r3
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	3b1e      	subs	r3, #30
 800102c:	2207      	movs	r2, #7
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	400a      	ands	r2, r1
 800103a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a8d      	ldr	r2, [pc, #564]	; (8001278 <HAL_ADC_ConfigChannel+0x298>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d10a      	bne.n	800105c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	68d9      	ldr	r1, [r3, #12]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	061a      	lsls	r2, r3, #24
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	430a      	orrs	r2, r1
 8001058:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800105a:	e035      	b.n	80010c8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68d9      	ldr	r1, [r3, #12]
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	b29b      	uxth	r3, r3
 800106c:	4618      	mov	r0, r3
 800106e:	4603      	mov	r3, r0
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4403      	add	r3, r0
 8001074:	3b1e      	subs	r3, #30
 8001076:	409a      	lsls	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	430a      	orrs	r2, r1
 800107e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001080:	e022      	b.n	80010c8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6919      	ldr	r1, [r3, #16]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	b29b      	uxth	r3, r3
 800108e:	461a      	mov	r2, r3
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	2207      	movs	r2, #7
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43da      	mvns	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	400a      	ands	r2, r1
 80010a4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6919      	ldr	r1, [r3, #16]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	4603      	mov	r3, r0
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4403      	add	r3, r0
 80010be:	409a      	lsls	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	430a      	orrs	r2, r1
 80010c6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b06      	cmp	r3, #6
 80010ce:	d824      	bhi.n	800111a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	3b05      	subs	r3, #5
 80010e2:	221f      	movs	r2, #31
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43da      	mvns	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	400a      	ands	r2, r1
 80010f0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	3b05      	subs	r3, #5
 800110c:	fa00 f203 	lsl.w	r2, r0, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	635a      	str	r2, [r3, #52]	; 0x34
 8001118:	e04c      	b.n	80011b4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b0c      	cmp	r3, #12
 8001120:	d824      	bhi.n	800116c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	3b23      	subs	r3, #35	; 0x23
 8001134:	221f      	movs	r2, #31
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	400a      	ands	r2, r1
 8001142:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	b29b      	uxth	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	3b23      	subs	r3, #35	; 0x23
 800115e:	fa00 f203 	lsl.w	r2, r0, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	631a      	str	r2, [r3, #48]	; 0x30
 800116a:	e023      	b.n	80011b4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	3b41      	subs	r3, #65	; 0x41
 800117e:	221f      	movs	r2, #31
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43da      	mvns	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	400a      	ands	r2, r1
 800118c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	b29b      	uxth	r3, r3
 800119a:	4618      	mov	r0, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	3b41      	subs	r3, #65	; 0x41
 80011a8:	fa00 f203 	lsl.w	r2, r0, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a30      	ldr	r2, [pc, #192]	; (800127c <HAL_ADC_ConfigChannel+0x29c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d10a      	bne.n	80011d4 <HAL_ADC_ConfigChannel+0x1f4>
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80011c6:	d105      	bne.n	80011d4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80011c8:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <HAL_ADC_ConfigChannel+0x2a0>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	4a2c      	ldr	r2, [pc, #176]	; (8001280 <HAL_ADC_ConfigChannel+0x2a0>)
 80011ce:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80011d2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a28      	ldr	r2, [pc, #160]	; (800127c <HAL_ADC_ConfigChannel+0x29c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d10f      	bne.n	80011fe <HAL_ADC_ConfigChannel+0x21e>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b12      	cmp	r3, #18
 80011e4:	d10b      	bne.n	80011fe <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <HAL_ADC_ConfigChannel+0x2a0>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	4a25      	ldr	r2, [pc, #148]	; (8001280 <HAL_ADC_ConfigChannel+0x2a0>)
 80011ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011f0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80011f2:	4b23      	ldr	r3, [pc, #140]	; (8001280 <HAL_ADC_ConfigChannel+0x2a0>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	4a22      	ldr	r2, [pc, #136]	; (8001280 <HAL_ADC_ConfigChannel+0x2a0>)
 80011f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011fc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a1e      	ldr	r2, [pc, #120]	; (800127c <HAL_ADC_ConfigChannel+0x29c>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d12b      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x280>
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a1a      	ldr	r2, [pc, #104]	; (8001278 <HAL_ADC_ConfigChannel+0x298>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d003      	beq.n	800121a <HAL_ADC_ConfigChannel+0x23a>
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b11      	cmp	r3, #17
 8001218:	d122      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_ADC_ConfigChannel+0x2a0>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4a18      	ldr	r2, [pc, #96]	; (8001280 <HAL_ADC_ConfigChannel+0x2a0>)
 8001220:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001224:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <HAL_ADC_ConfigChannel+0x2a0>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	4a15      	ldr	r2, [pc, #84]	; (8001280 <HAL_ADC_ConfigChannel+0x2a0>)
 800122c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001230:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a10      	ldr	r2, [pc, #64]	; (8001278 <HAL_ADC_ConfigChannel+0x298>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d111      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <HAL_ADC_ConfigChannel+0x2a4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a11      	ldr	r2, [pc, #68]	; (8001288 <HAL_ADC_ConfigChannel+0x2a8>)
 8001242:	fba2 2303 	umull	r2, r3, r2, r3
 8001246:	0c9a      	lsrs	r2, r3, #18
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001252:	e002      	b.n	800125a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3b01      	subs	r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1f9      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	10000012 	.word	0x10000012
 800127c:	40012000 	.word	0x40012000
 8001280:	40012300 	.word	0x40012300
 8001284:	20000000 	.word	0x20000000
 8001288:	431bde83 	.word	0x431bde83

0800128c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001294:	4b78      	ldr	r3, [pc, #480]	; (8001478 <ADC_Init+0x1ec>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	4a77      	ldr	r2, [pc, #476]	; (8001478 <ADC_Init+0x1ec>)
 800129a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800129e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80012a0:	4b75      	ldr	r3, [pc, #468]	; (8001478 <ADC_Init+0x1ec>)
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	4973      	ldr	r1, [pc, #460]	; (8001478 <ADC_Init+0x1ec>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6859      	ldr	r1, [r3, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	021a      	lsls	r2, r3, #8
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6859      	ldr	r1, [r3, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001302:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6899      	ldr	r1, [r3, #8]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131a:	4a58      	ldr	r2, [pc, #352]	; (800147c <ADC_Init+0x1f0>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d022      	beq.n	8001366 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800132e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6899      	ldr	r1, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	430a      	orrs	r2, r1
 8001340:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001350:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6899      	ldr	r1, [r3, #8]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	e00f      	b.n	8001386 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001374:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001384:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0202 	bic.w	r2, r2, #2
 8001394:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6899      	ldr	r1, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	005a      	lsls	r2, r3, #1
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d01b      	beq.n	80013ec <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80013d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6859      	ldr	r1, [r3, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013de:	3b01      	subs	r3, #1
 80013e0:	035a      	lsls	r2, r3, #13
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	e007      	b.n	80013fc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800140a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	3b01      	subs	r3, #1
 8001418:	051a      	lsls	r2, r3, #20
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001430:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6899      	ldr	r1, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800143e:	025a      	lsls	r2, r3, #9
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001456:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6899      	ldr	r1, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	029a      	lsls	r2, r3, #10
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	609a      	str	r2, [r3, #8]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	40012300 	.word	0x40012300
 800147c:	0f000001 	.word	0x0f000001

08001480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800149c:	4013      	ands	r3, r2
 800149e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <__NVIC_SetPriorityGrouping+0x40>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	60d3      	str	r3, [r2, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00
 80014c4:	05fa0000 	.word	0x05fa0000

080014c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	f003 0307 	and.w	r3, r3, #7
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db0a      	blt.n	800150e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	490c      	ldr	r1, [pc, #48]	; (8001530 <__NVIC_SetPriority+0x4c>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	440b      	add	r3, r1
 8001508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800150c:	e00a      	b.n	8001524 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4908      	ldr	r1, [pc, #32]	; (8001534 <__NVIC_SetPriority+0x50>)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	3b04      	subs	r3, #4
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	440b      	add	r3, r1
 8001522:	761a      	strb	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f1c3 0307 	rsb	r3, r3, #7
 8001552:	2b04      	cmp	r3, #4
 8001554:	bf28      	it	cs
 8001556:	2304      	movcs	r3, #4
 8001558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3304      	adds	r3, #4
 800155e:	2b06      	cmp	r3, #6
 8001560:	d902      	bls.n	8001568 <NVIC_EncodePriority+0x30>
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3b03      	subs	r3, #3
 8001566:	e000      	b.n	800156a <NVIC_EncodePriority+0x32>
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	f04f 32ff 	mov.w	r2, #4294967295
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001580:	f04f 31ff 	mov.w	r1, #4294967295
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	43d9      	mvns	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	4313      	orrs	r3, r2
         );
}
 8001592:	4618      	mov	r0, r3
 8001594:	3724      	adds	r7, #36	; 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b0:	d301      	bcc.n	80015b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00f      	b.n	80015d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <SysTick_Config+0x40>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015be:	210f      	movs	r1, #15
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f7ff ff8e 	bl	80014e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <SysTick_Config+0x40>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <SysTick_Config+0x40>)
 80015d0:	2207      	movs	r2, #7
 80015d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	e000e010 	.word	0xe000e010

080015e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ff47 	bl	8001480 <__NVIC_SetPriorityGrouping>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800160c:	f7ff ff5c 	bl	80014c8 <__NVIC_GetPriorityGrouping>
 8001610:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	6978      	ldr	r0, [r7, #20]
 8001618:	f7ff ff8e 	bl	8001538 <NVIC_EncodePriority>
 800161c:	4602      	mov	r2, r0
 800161e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff5d 	bl	80014e4 <__NVIC_SetPriority>
}
 800162a:	bf00      	nop
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ffb0 	bl	80015a0 <SysTick_Config>
 8001640:	4603      	mov	r3, r0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	e175      	b.n	8001958 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800166c:	2201      	movs	r2, #1
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	429a      	cmp	r2, r3
 8001686:	f040 8164 	bne.w	8001952 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	2b01      	cmp	r3, #1
 8001694:	d005      	beq.n	80016a2 <HAL_GPIO_Init+0x56>
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d130      	bne.n	8001704 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	2203      	movs	r2, #3
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016d8:	2201      	movs	r2, #1
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	f003 0201 	and.w	r2, r3, #1
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	2b03      	cmp	r3, #3
 800170e:	d017      	beq.n	8001740 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d123      	bne.n	8001794 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	08da      	lsrs	r2, r3, #3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3208      	adds	r2, #8
 8001754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	220f      	movs	r2, #15
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	691a      	ldr	r2, [r3, #16]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	08da      	lsrs	r2, r3, #3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3208      	adds	r2, #8
 800178e:	69b9      	ldr	r1, [r7, #24]
 8001790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	2203      	movs	r2, #3
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 0203 	and.w	r2, r3, #3
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 80be 	beq.w	8001952 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d6:	4b66      	ldr	r3, [pc, #408]	; (8001970 <HAL_GPIO_Init+0x324>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	4a65      	ldr	r2, [pc, #404]	; (8001970 <HAL_GPIO_Init+0x324>)
 80017dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e0:	6453      	str	r3, [r2, #68]	; 0x44
 80017e2:	4b63      	ldr	r3, [pc, #396]	; (8001970 <HAL_GPIO_Init+0x324>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80017ee:	4a61      	ldr	r2, [pc, #388]	; (8001974 <HAL_GPIO_Init+0x328>)
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	089b      	lsrs	r3, r3, #2
 80017f4:	3302      	adds	r3, #2
 80017f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	220f      	movs	r2, #15
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a58      	ldr	r2, [pc, #352]	; (8001978 <HAL_GPIO_Init+0x32c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d037      	beq.n	800188a <HAL_GPIO_Init+0x23e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a57      	ldr	r2, [pc, #348]	; (800197c <HAL_GPIO_Init+0x330>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d031      	beq.n	8001886 <HAL_GPIO_Init+0x23a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a56      	ldr	r2, [pc, #344]	; (8001980 <HAL_GPIO_Init+0x334>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d02b      	beq.n	8001882 <HAL_GPIO_Init+0x236>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a55      	ldr	r2, [pc, #340]	; (8001984 <HAL_GPIO_Init+0x338>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d025      	beq.n	800187e <HAL_GPIO_Init+0x232>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a54      	ldr	r2, [pc, #336]	; (8001988 <HAL_GPIO_Init+0x33c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d01f      	beq.n	800187a <HAL_GPIO_Init+0x22e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a53      	ldr	r2, [pc, #332]	; (800198c <HAL_GPIO_Init+0x340>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d019      	beq.n	8001876 <HAL_GPIO_Init+0x22a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a52      	ldr	r2, [pc, #328]	; (8001990 <HAL_GPIO_Init+0x344>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d013      	beq.n	8001872 <HAL_GPIO_Init+0x226>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a51      	ldr	r2, [pc, #324]	; (8001994 <HAL_GPIO_Init+0x348>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d00d      	beq.n	800186e <HAL_GPIO_Init+0x222>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a50      	ldr	r2, [pc, #320]	; (8001998 <HAL_GPIO_Init+0x34c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d007      	beq.n	800186a <HAL_GPIO_Init+0x21e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4f      	ldr	r2, [pc, #316]	; (800199c <HAL_GPIO_Init+0x350>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d101      	bne.n	8001866 <HAL_GPIO_Init+0x21a>
 8001862:	2309      	movs	r3, #9
 8001864:	e012      	b.n	800188c <HAL_GPIO_Init+0x240>
 8001866:	230a      	movs	r3, #10
 8001868:	e010      	b.n	800188c <HAL_GPIO_Init+0x240>
 800186a:	2308      	movs	r3, #8
 800186c:	e00e      	b.n	800188c <HAL_GPIO_Init+0x240>
 800186e:	2307      	movs	r3, #7
 8001870:	e00c      	b.n	800188c <HAL_GPIO_Init+0x240>
 8001872:	2306      	movs	r3, #6
 8001874:	e00a      	b.n	800188c <HAL_GPIO_Init+0x240>
 8001876:	2305      	movs	r3, #5
 8001878:	e008      	b.n	800188c <HAL_GPIO_Init+0x240>
 800187a:	2304      	movs	r3, #4
 800187c:	e006      	b.n	800188c <HAL_GPIO_Init+0x240>
 800187e:	2303      	movs	r3, #3
 8001880:	e004      	b.n	800188c <HAL_GPIO_Init+0x240>
 8001882:	2302      	movs	r3, #2
 8001884:	e002      	b.n	800188c <HAL_GPIO_Init+0x240>
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <HAL_GPIO_Init+0x240>
 800188a:	2300      	movs	r3, #0
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	f002 0203 	and.w	r2, r2, #3
 8001892:	0092      	lsls	r2, r2, #2
 8001894:	4093      	lsls	r3, r2
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800189c:	4935      	ldr	r1, [pc, #212]	; (8001974 <HAL_GPIO_Init+0x328>)
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	3302      	adds	r3, #2
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018aa:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <HAL_GPIO_Init+0x354>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ce:	4a34      	ldr	r2, [pc, #208]	; (80019a0 <HAL_GPIO_Init+0x354>)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018d4:	4b32      	ldr	r3, [pc, #200]	; (80019a0 <HAL_GPIO_Init+0x354>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018f8:	4a29      	ldr	r2, [pc, #164]	; (80019a0 <HAL_GPIO_Init+0x354>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018fe:	4b28      	ldr	r3, [pc, #160]	; (80019a0 <HAL_GPIO_Init+0x354>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001922:	4a1f      	ldr	r2, [pc, #124]	; (80019a0 <HAL_GPIO_Init+0x354>)
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001928:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_GPIO_Init+0x354>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800194c:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <HAL_GPIO_Init+0x354>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3301      	adds	r3, #1
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	2b0f      	cmp	r3, #15
 800195c:	f67f ae86 	bls.w	800166c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	40013800 	.word	0x40013800
 8001978:	40020000 	.word	0x40020000
 800197c:	40020400 	.word	0x40020400
 8001980:	40020800 	.word	0x40020800
 8001984:	40020c00 	.word	0x40020c00
 8001988:	40021000 	.word	0x40021000
 800198c:	40021400 	.word	0x40021400
 8001990:	40021800 	.word	0x40021800
 8001994:	40021c00 	.word	0x40021c00
 8001998:	40022000 	.word	0x40022000
 800199c:	40022400 	.word	0x40022400
 80019a0:	40013c00 	.word	0x40013c00

080019a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e29b      	b.n	8001ef2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8087 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c8:	4b96      	ldr	r3, [pc, #600]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d00c      	beq.n	80019ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019d4:	4b93      	ldr	r3, [pc, #588]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 030c 	and.w	r3, r3, #12
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d112      	bne.n	8001a06 <HAL_RCC_OscConfig+0x62>
 80019e0:	4b90      	ldr	r3, [pc, #576]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ec:	d10b      	bne.n	8001a06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ee:	4b8d      	ldr	r3, [pc, #564]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d06c      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x130>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d168      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e275      	b.n	8001ef2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0e:	d106      	bne.n	8001a1e <HAL_RCC_OscConfig+0x7a>
 8001a10:	4b84      	ldr	r3, [pc, #528]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a83      	ldr	r2, [pc, #524]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	e02e      	b.n	8001a7c <HAL_RCC_OscConfig+0xd8>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x9c>
 8001a26:	4b7f      	ldr	r3, [pc, #508]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a7e      	ldr	r2, [pc, #504]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	4b7c      	ldr	r3, [pc, #496]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a7b      	ldr	r2, [pc, #492]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e01d      	b.n	8001a7c <HAL_RCC_OscConfig+0xd8>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a48:	d10c      	bne.n	8001a64 <HAL_RCC_OscConfig+0xc0>
 8001a4a:	4b76      	ldr	r3, [pc, #472]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a75      	ldr	r2, [pc, #468]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	4b73      	ldr	r3, [pc, #460]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a72      	ldr	r2, [pc, #456]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e00b      	b.n	8001a7c <HAL_RCC_OscConfig+0xd8>
 8001a64:	4b6f      	ldr	r3, [pc, #444]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a6e      	ldr	r2, [pc, #440]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	4b6c      	ldr	r3, [pc, #432]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a6b      	ldr	r2, [pc, #428]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d013      	beq.n	8001aac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7ff f89e 	bl	8000bc4 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a8c:	f7ff f89a 	bl	8000bc4 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e229      	b.n	8001ef2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9e:	4b61      	ldr	r3, [pc, #388]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0xe8>
 8001aaa:	e014      	b.n	8001ad6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aac:	f7ff f88a 	bl	8000bc4 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff f886 	bl	8000bc4 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	; 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e215      	b.n	8001ef2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac6:	4b57      	ldr	r3, [pc, #348]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x110>
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d069      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae2:	4b50      	ldr	r3, [pc, #320]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00b      	beq.n	8001b06 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aee:	4b4d      	ldr	r3, [pc, #308]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d11c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x190>
 8001afa:	4b4a      	ldr	r3, [pc, #296]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d116      	bne.n	8001b34 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b06:	4b47      	ldr	r3, [pc, #284]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d005      	beq.n	8001b1e <HAL_RCC_OscConfig+0x17a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d001      	beq.n	8001b1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e1e9      	b.n	8001ef2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1e:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	493d      	ldr	r1, [pc, #244]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b32:	e040      	b.n	8001bb6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d023      	beq.n	8001b84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b3c:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a38      	ldr	r2, [pc, #224]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7ff f83c 	bl	8000bc4 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b50:	f7ff f838 	bl	8000bc4 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e1c7      	b.n	8001ef2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b62:	4b30      	ldr	r3, [pc, #192]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4929      	ldr	r1, [pc, #164]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]
 8001b82:	e018      	b.n	8001bb6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b84:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a26      	ldr	r2, [pc, #152]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001b8a:	f023 0301 	bic.w	r3, r3, #1
 8001b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7ff f818 	bl	8000bc4 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b98:	f7ff f814 	bl	8000bc4 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e1a3      	b.n	8001ef2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001baa:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d038      	beq.n	8001c34 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d019      	beq.n	8001bfe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bca:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bce:	4a15      	ldr	r2, [pc, #84]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd6:	f7fe fff5 	bl	8000bc4 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bde:	f7fe fff1 	bl	8000bc4 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e180      	b.n	8001ef2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x23a>
 8001bfc:	e01a      	b.n	8001c34 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c02:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <HAL_RCC_OscConfig+0x280>)
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0a:	f7fe ffdb 	bl	8000bc4 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c12:	f7fe ffd7 	bl	8000bc4 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d903      	bls.n	8001c28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e166      	b.n	8001ef2 <HAL_RCC_OscConfig+0x54e>
 8001c24:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c28:	4b92      	ldr	r3, [pc, #584]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1ee      	bne.n	8001c12 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 80a4 	beq.w	8001d8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c42:	4b8c      	ldr	r3, [pc, #560]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10d      	bne.n	8001c6a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	4b89      	ldr	r3, [pc, #548]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4a88      	ldr	r2, [pc, #544]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c58:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5a:	4b86      	ldr	r3, [pc, #536]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c66:	2301      	movs	r3, #1
 8001c68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c6a:	4b83      	ldr	r3, [pc, #524]	; (8001e78 <HAL_RCC_OscConfig+0x4d4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d118      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c76:	4b80      	ldr	r3, [pc, #512]	; (8001e78 <HAL_RCC_OscConfig+0x4d4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a7f      	ldr	r2, [pc, #508]	; (8001e78 <HAL_RCC_OscConfig+0x4d4>)
 8001c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c82:	f7fe ff9f 	bl	8000bc4 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8a:	f7fe ff9b 	bl	8000bc4 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b64      	cmp	r3, #100	; 0x64
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e12a      	b.n	8001ef2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9c:	4b76      	ldr	r3, [pc, #472]	; (8001e78 <HAL_RCC_OscConfig+0x4d4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x31a>
 8001cb0:	4b70      	ldr	r3, [pc, #448]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb4:	4a6f      	ldr	r2, [pc, #444]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6713      	str	r3, [r2, #112]	; 0x70
 8001cbc:	e02d      	b.n	8001d1a <HAL_RCC_OscConfig+0x376>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x33c>
 8001cc6:	4b6b      	ldr	r3, [pc, #428]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cca:	4a6a      	ldr	r2, [pc, #424]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd2:	4b68      	ldr	r3, [pc, #416]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd6:	4a67      	ldr	r2, [pc, #412]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001cd8:	f023 0304 	bic.w	r3, r3, #4
 8001cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cde:	e01c      	b.n	8001d1a <HAL_RCC_OscConfig+0x376>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b05      	cmp	r3, #5
 8001ce6:	d10c      	bne.n	8001d02 <HAL_RCC_OscConfig+0x35e>
 8001ce8:	4b62      	ldr	r3, [pc, #392]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	4a61      	ldr	r2, [pc, #388]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf4:	4b5f      	ldr	r3, [pc, #380]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf8:	4a5e      	ldr	r2, [pc, #376]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8001d00:	e00b      	b.n	8001d1a <HAL_RCC_OscConfig+0x376>
 8001d02:	4b5c      	ldr	r3, [pc, #368]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d06:	4a5b      	ldr	r2, [pc, #364]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001d08:	f023 0301 	bic.w	r3, r3, #1
 8001d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0e:	4b59      	ldr	r3, [pc, #356]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d12:	4a58      	ldr	r2, [pc, #352]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001d14:	f023 0304 	bic.w	r3, r3, #4
 8001d18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d015      	beq.n	8001d4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d22:	f7fe ff4f 	bl	8000bc4 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d28:	e00a      	b.n	8001d40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7fe ff4b 	bl	8000bc4 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e0d8      	b.n	8001ef2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d40:	4b4c      	ldr	r3, [pc, #304]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0ee      	beq.n	8001d2a <HAL_RCC_OscConfig+0x386>
 8001d4c:	e014      	b.n	8001d78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4e:	f7fe ff39 	bl	8000bc4 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d54:	e00a      	b.n	8001d6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d56:	f7fe ff35 	bl	8000bc4 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e0c2      	b.n	8001ef2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6c:	4b41      	ldr	r3, [pc, #260]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1ee      	bne.n	8001d56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d105      	bne.n	8001d8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a3c      	ldr	r2, [pc, #240]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 80ae 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d94:	4b37      	ldr	r3, [pc, #220]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 030c 	and.w	r3, r3, #12
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d06d      	beq.n	8001e7c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d14b      	bne.n	8001e40 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da8:	4b32      	ldr	r3, [pc, #200]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a31      	ldr	r2, [pc, #196]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7fe ff06 	bl	8000bc4 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7fe ff02 	bl	8000bc4 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e091      	b.n	8001ef2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dce:	4b29      	ldr	r3, [pc, #164]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69da      	ldr	r2, [r3, #28]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	019b      	lsls	r3, r3, #6
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	085b      	lsrs	r3, r3, #1
 8001df2:	3b01      	subs	r3, #1
 8001df4:	041b      	lsls	r3, r3, #16
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	061b      	lsls	r3, r3, #24
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	071b      	lsls	r3, r3, #28
 8001e06:	491b      	ldr	r1, [pc, #108]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e0c:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a18      	ldr	r2, [pc, #96]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7fe fed4 	bl	8000bc4 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7fe fed0 	bl	8000bc4 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e05f      	b.n	8001ef2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0x47c>
 8001e3e:	e057      	b.n	8001ef0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0b      	ldr	r2, [pc, #44]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7fe feba 	bl	8000bc4 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e54:	f7fe feb6 	bl	8000bc4 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e045      	b.n	8001ef2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e66:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <HAL_RCC_OscConfig+0x4d0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x4b0>
 8001e72:	e03d      	b.n	8001ef0 <HAL_RCC_OscConfig+0x54c>
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <HAL_RCC_OscConfig+0x558>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d030      	beq.n	8001eec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d129      	bne.n	8001eec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d122      	bne.n	8001eec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001eac:	4013      	ands	r3, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eb2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d119      	bne.n	8001eec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec2:	085b      	lsrs	r3, r3, #1
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d10f      	bne.n	8001eec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d107      	bne.n	8001eec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800

08001f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0d0      	b.n	80020ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f18:	4b6a      	ldr	r3, [pc, #424]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d910      	bls.n	8001f48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b67      	ldr	r3, [pc, #412]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 020f 	bic.w	r2, r3, #15
 8001f2e:	4965      	ldr	r1, [pc, #404]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b63      	ldr	r3, [pc, #396]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0b8      	b.n	80020ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d020      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f60:	4b59      	ldr	r3, [pc, #356]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	4a58      	ldr	r2, [pc, #352]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f78:	4b53      	ldr	r3, [pc, #332]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	4a52      	ldr	r2, [pc, #328]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f84:	4b50      	ldr	r3, [pc, #320]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	494d      	ldr	r1, [pc, #308]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d040      	beq.n	8002024 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	4b47      	ldr	r3, [pc, #284]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d115      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e07f      	b.n	80020ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc2:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e073      	b.n	80020ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd2:	4b3d      	ldr	r3, [pc, #244]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e06b      	b.n	80020ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe2:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f023 0203 	bic.w	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4936      	ldr	r1, [pc, #216]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ff4:	f7fe fde6 	bl	8000bc4 <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffc:	f7fe fde2 	bl	8000bc4 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	; 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e053      	b.n	80020ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 020c 	and.w	r2, r3, #12
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	429a      	cmp	r2, r3
 8002022:	d1eb      	bne.n	8001ffc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002024:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d210      	bcs.n	8002054 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 020f 	bic.w	r2, r3, #15
 800203a:	4922      	ldr	r1, [pc, #136]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e032      	b.n	80020ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4916      	ldr	r1, [pc, #88]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 800206e:	4313      	orrs	r3, r2
 8002070:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d009      	beq.n	8002092 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	490e      	ldr	r1, [pc, #56]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002092:	f000 f821 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8002096:	4602      	mov	r2, r0
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	490a      	ldr	r1, [pc, #40]	; (80020cc <HAL_RCC_ClockConfig+0x1cc>)
 80020a4:	5ccb      	ldrb	r3, [r1, r3]
 80020a6:	fa22 f303 	lsr.w	r3, r2, r3
 80020aa:	4a09      	ldr	r2, [pc, #36]	; (80020d0 <HAL_RCC_ClockConfig+0x1d0>)
 80020ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_RCC_ClockConfig+0x1d4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fd42 	bl	8000b3c <HAL_InitTick>

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40023c00 	.word	0x40023c00
 80020c8:	40023800 	.word	0x40023800
 80020cc:	08004c40 	.word	0x08004c40
 80020d0:	20000000 	.word	0x20000000
 80020d4:	20000004 	.word	0x20000004

080020d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020dc:	b094      	sub	sp, #80	; 0x50
 80020de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	647b      	str	r3, [r7, #68]	; 0x44
 80020e4:	2300      	movs	r3, #0
 80020e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020e8:	2300      	movs	r3, #0
 80020ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020f0:	4b79      	ldr	r3, [pc, #484]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d00d      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x40>
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	f200 80e1 	bhi.w	80022c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x34>
 8002106:	2b04      	cmp	r3, #4
 8002108:	d003      	beq.n	8002112 <HAL_RCC_GetSysClockFreq+0x3a>
 800210a:	e0db      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800210c:	4b73      	ldr	r3, [pc, #460]	; (80022dc <HAL_RCC_GetSysClockFreq+0x204>)
 800210e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002110:	e0db      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002112:	4b73      	ldr	r3, [pc, #460]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002114:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002116:	e0d8      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002118:	4b6f      	ldr	r3, [pc, #444]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002120:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002122:	4b6d      	ldr	r3, [pc, #436]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d063      	beq.n	80021f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800212e:	4b6a      	ldr	r3, [pc, #424]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	099b      	lsrs	r3, r3, #6
 8002134:	2200      	movs	r2, #0
 8002136:	63bb      	str	r3, [r7, #56]	; 0x38
 8002138:	63fa      	str	r2, [r7, #60]	; 0x3c
 800213a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002140:	633b      	str	r3, [r7, #48]	; 0x30
 8002142:	2300      	movs	r3, #0
 8002144:	637b      	str	r3, [r7, #52]	; 0x34
 8002146:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800214a:	4622      	mov	r2, r4
 800214c:	462b      	mov	r3, r5
 800214e:	f04f 0000 	mov.w	r0, #0
 8002152:	f04f 0100 	mov.w	r1, #0
 8002156:	0159      	lsls	r1, r3, #5
 8002158:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800215c:	0150      	lsls	r0, r2, #5
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4621      	mov	r1, r4
 8002164:	1a51      	subs	r1, r2, r1
 8002166:	6139      	str	r1, [r7, #16]
 8002168:	4629      	mov	r1, r5
 800216a:	eb63 0301 	sbc.w	r3, r3, r1
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800217c:	4659      	mov	r1, fp
 800217e:	018b      	lsls	r3, r1, #6
 8002180:	4651      	mov	r1, sl
 8002182:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002186:	4651      	mov	r1, sl
 8002188:	018a      	lsls	r2, r1, #6
 800218a:	4651      	mov	r1, sl
 800218c:	ebb2 0801 	subs.w	r8, r2, r1
 8002190:	4659      	mov	r1, fp
 8002192:	eb63 0901 	sbc.w	r9, r3, r1
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021aa:	4690      	mov	r8, r2
 80021ac:	4699      	mov	r9, r3
 80021ae:	4623      	mov	r3, r4
 80021b0:	eb18 0303 	adds.w	r3, r8, r3
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	462b      	mov	r3, r5
 80021b8:	eb49 0303 	adc.w	r3, r9, r3
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021ca:	4629      	mov	r1, r5
 80021cc:	024b      	lsls	r3, r1, #9
 80021ce:	4621      	mov	r1, r4
 80021d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021d4:	4621      	mov	r1, r4
 80021d6:	024a      	lsls	r2, r1, #9
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021de:	2200      	movs	r2, #0
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80021e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021e8:	f7fe f882 	bl	80002f0 <__aeabi_uldivmod>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4613      	mov	r3, r2
 80021f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021f4:	e058      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f6:	4b38      	ldr	r3, [pc, #224]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	099b      	lsrs	r3, r3, #6
 80021fc:	2200      	movs	r2, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	4611      	mov	r1, r2
 8002202:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002206:	623b      	str	r3, [r7, #32]
 8002208:	2300      	movs	r3, #0
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
 800220c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002210:	4642      	mov	r2, r8
 8002212:	464b      	mov	r3, r9
 8002214:	f04f 0000 	mov.w	r0, #0
 8002218:	f04f 0100 	mov.w	r1, #0
 800221c:	0159      	lsls	r1, r3, #5
 800221e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002222:	0150      	lsls	r0, r2, #5
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4641      	mov	r1, r8
 800222a:	ebb2 0a01 	subs.w	sl, r2, r1
 800222e:	4649      	mov	r1, r9
 8002230:	eb63 0b01 	sbc.w	fp, r3, r1
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002240:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002244:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002248:	ebb2 040a 	subs.w	r4, r2, sl
 800224c:	eb63 050b 	sbc.w	r5, r3, fp
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	00eb      	lsls	r3, r5, #3
 800225a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800225e:	00e2      	lsls	r2, r4, #3
 8002260:	4614      	mov	r4, r2
 8002262:	461d      	mov	r5, r3
 8002264:	4643      	mov	r3, r8
 8002266:	18e3      	adds	r3, r4, r3
 8002268:	603b      	str	r3, [r7, #0]
 800226a:	464b      	mov	r3, r9
 800226c:	eb45 0303 	adc.w	r3, r5, r3
 8002270:	607b      	str	r3, [r7, #4]
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800227e:	4629      	mov	r1, r5
 8002280:	028b      	lsls	r3, r1, #10
 8002282:	4621      	mov	r1, r4
 8002284:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002288:	4621      	mov	r1, r4
 800228a:	028a      	lsls	r2, r1, #10
 800228c:	4610      	mov	r0, r2
 800228e:	4619      	mov	r1, r3
 8002290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002292:	2200      	movs	r2, #0
 8002294:	61bb      	str	r3, [r7, #24]
 8002296:	61fa      	str	r2, [r7, #28]
 8002298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800229c:	f7fe f828 	bl	80002f0 <__aeabi_uldivmod>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4613      	mov	r3, r2
 80022a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	0c1b      	lsrs	r3, r3, #16
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	3301      	adds	r3, #1
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80022b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022c2:	e002      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_RCC_GetSysClockFreq+0x204>)
 80022c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3750      	adds	r7, #80	; 0x50
 80022d0:	46bd      	mov	sp, r7
 80022d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800
 80022dc:	00f42400 	.word	0x00f42400
 80022e0:	007a1200 	.word	0x007a1200

080022e4 <__errno>:
 80022e4:	4b01      	ldr	r3, [pc, #4]	; (80022ec <__errno+0x8>)
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	2000000c 	.word	0x2000000c

080022f0 <__libc_init_array>:
 80022f0:	b570      	push	{r4, r5, r6, lr}
 80022f2:	4d0d      	ldr	r5, [pc, #52]	; (8002328 <__libc_init_array+0x38>)
 80022f4:	4c0d      	ldr	r4, [pc, #52]	; (800232c <__libc_init_array+0x3c>)
 80022f6:	1b64      	subs	r4, r4, r5
 80022f8:	10a4      	asrs	r4, r4, #2
 80022fa:	2600      	movs	r6, #0
 80022fc:	42a6      	cmp	r6, r4
 80022fe:	d109      	bne.n	8002314 <__libc_init_array+0x24>
 8002300:	4d0b      	ldr	r5, [pc, #44]	; (8002330 <__libc_init_array+0x40>)
 8002302:	4c0c      	ldr	r4, [pc, #48]	; (8002334 <__libc_init_array+0x44>)
 8002304:	f002 fc90 	bl	8004c28 <_init>
 8002308:	1b64      	subs	r4, r4, r5
 800230a:	10a4      	asrs	r4, r4, #2
 800230c:	2600      	movs	r6, #0
 800230e:	42a6      	cmp	r6, r4
 8002310:	d105      	bne.n	800231e <__libc_init_array+0x2e>
 8002312:	bd70      	pop	{r4, r5, r6, pc}
 8002314:	f855 3b04 	ldr.w	r3, [r5], #4
 8002318:	4798      	blx	r3
 800231a:	3601      	adds	r6, #1
 800231c:	e7ee      	b.n	80022fc <__libc_init_array+0xc>
 800231e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002322:	4798      	blx	r3
 8002324:	3601      	adds	r6, #1
 8002326:	e7f2      	b.n	800230e <__libc_init_array+0x1e>
 8002328:	08005034 	.word	0x08005034
 800232c:	08005034 	.word	0x08005034
 8002330:	08005034 	.word	0x08005034
 8002334:	08005038 	.word	0x08005038

08002338 <memset>:
 8002338:	4402      	add	r2, r0
 800233a:	4603      	mov	r3, r0
 800233c:	4293      	cmp	r3, r2
 800233e:	d100      	bne.n	8002342 <memset+0xa>
 8002340:	4770      	bx	lr
 8002342:	f803 1b01 	strb.w	r1, [r3], #1
 8002346:	e7f9      	b.n	800233c <memset+0x4>

08002348 <__cvt>:
 8002348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800234a:	ed2d 8b02 	vpush	{d8}
 800234e:	eeb0 8b40 	vmov.f64	d8, d0
 8002352:	b085      	sub	sp, #20
 8002354:	4617      	mov	r7, r2
 8002356:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002358:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800235a:	ee18 2a90 	vmov	r2, s17
 800235e:	f025 0520 	bic.w	r5, r5, #32
 8002362:	2a00      	cmp	r2, #0
 8002364:	bfb6      	itet	lt
 8002366:	222d      	movlt	r2, #45	; 0x2d
 8002368:	2200      	movge	r2, #0
 800236a:	eeb1 8b40 	vneglt.f64	d8, d0
 800236e:	2d46      	cmp	r5, #70	; 0x46
 8002370:	460c      	mov	r4, r1
 8002372:	701a      	strb	r2, [r3, #0]
 8002374:	d004      	beq.n	8002380 <__cvt+0x38>
 8002376:	2d45      	cmp	r5, #69	; 0x45
 8002378:	d100      	bne.n	800237c <__cvt+0x34>
 800237a:	3401      	adds	r4, #1
 800237c:	2102      	movs	r1, #2
 800237e:	e000      	b.n	8002382 <__cvt+0x3a>
 8002380:	2103      	movs	r1, #3
 8002382:	ab03      	add	r3, sp, #12
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	ab02      	add	r3, sp, #8
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	4622      	mov	r2, r4
 800238c:	4633      	mov	r3, r6
 800238e:	eeb0 0b48 	vmov.f64	d0, d8
 8002392:	f000 fca9 	bl	8002ce8 <_dtoa_r>
 8002396:	2d47      	cmp	r5, #71	; 0x47
 8002398:	d101      	bne.n	800239e <__cvt+0x56>
 800239a:	07fb      	lsls	r3, r7, #31
 800239c:	d51a      	bpl.n	80023d4 <__cvt+0x8c>
 800239e:	2d46      	cmp	r5, #70	; 0x46
 80023a0:	eb00 0204 	add.w	r2, r0, r4
 80023a4:	d10c      	bne.n	80023c0 <__cvt+0x78>
 80023a6:	7803      	ldrb	r3, [r0, #0]
 80023a8:	2b30      	cmp	r3, #48	; 0x30
 80023aa:	d107      	bne.n	80023bc <__cvt+0x74>
 80023ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80023b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b4:	bf1c      	itt	ne
 80023b6:	f1c4 0401 	rsbne	r4, r4, #1
 80023ba:	6034      	strne	r4, [r6, #0]
 80023bc:	6833      	ldr	r3, [r6, #0]
 80023be:	441a      	add	r2, r3
 80023c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80023c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c8:	bf08      	it	eq
 80023ca:	9203      	streq	r2, [sp, #12]
 80023cc:	2130      	movs	r1, #48	; 0x30
 80023ce:	9b03      	ldr	r3, [sp, #12]
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d307      	bcc.n	80023e4 <__cvt+0x9c>
 80023d4:	9b03      	ldr	r3, [sp, #12]
 80023d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80023d8:	1a1b      	subs	r3, r3, r0
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	b005      	add	sp, #20
 80023de:	ecbd 8b02 	vpop	{d8}
 80023e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023e4:	1c5c      	adds	r4, r3, #1
 80023e6:	9403      	str	r4, [sp, #12]
 80023e8:	7019      	strb	r1, [r3, #0]
 80023ea:	e7f0      	b.n	80023ce <__cvt+0x86>

080023ec <__exponent>:
 80023ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023ee:	4603      	mov	r3, r0
 80023f0:	2900      	cmp	r1, #0
 80023f2:	bfb8      	it	lt
 80023f4:	4249      	neglt	r1, r1
 80023f6:	f803 2b02 	strb.w	r2, [r3], #2
 80023fa:	bfb4      	ite	lt
 80023fc:	222d      	movlt	r2, #45	; 0x2d
 80023fe:	222b      	movge	r2, #43	; 0x2b
 8002400:	2909      	cmp	r1, #9
 8002402:	7042      	strb	r2, [r0, #1]
 8002404:	dd2a      	ble.n	800245c <__exponent+0x70>
 8002406:	f10d 0407 	add.w	r4, sp, #7
 800240a:	46a4      	mov	ip, r4
 800240c:	270a      	movs	r7, #10
 800240e:	46a6      	mov	lr, r4
 8002410:	460a      	mov	r2, r1
 8002412:	fb91 f6f7 	sdiv	r6, r1, r7
 8002416:	fb07 1516 	mls	r5, r7, r6, r1
 800241a:	3530      	adds	r5, #48	; 0x30
 800241c:	2a63      	cmp	r2, #99	; 0x63
 800241e:	f104 34ff 	add.w	r4, r4, #4294967295
 8002422:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002426:	4631      	mov	r1, r6
 8002428:	dcf1      	bgt.n	800240e <__exponent+0x22>
 800242a:	3130      	adds	r1, #48	; 0x30
 800242c:	f1ae 0502 	sub.w	r5, lr, #2
 8002430:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002434:	1c44      	adds	r4, r0, #1
 8002436:	4629      	mov	r1, r5
 8002438:	4561      	cmp	r1, ip
 800243a:	d30a      	bcc.n	8002452 <__exponent+0x66>
 800243c:	f10d 0209 	add.w	r2, sp, #9
 8002440:	eba2 020e 	sub.w	r2, r2, lr
 8002444:	4565      	cmp	r5, ip
 8002446:	bf88      	it	hi
 8002448:	2200      	movhi	r2, #0
 800244a:	4413      	add	r3, r2
 800244c:	1a18      	subs	r0, r3, r0
 800244e:	b003      	add	sp, #12
 8002450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002452:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002456:	f804 2f01 	strb.w	r2, [r4, #1]!
 800245a:	e7ed      	b.n	8002438 <__exponent+0x4c>
 800245c:	2330      	movs	r3, #48	; 0x30
 800245e:	3130      	adds	r1, #48	; 0x30
 8002460:	7083      	strb	r3, [r0, #2]
 8002462:	70c1      	strb	r1, [r0, #3]
 8002464:	1d03      	adds	r3, r0, #4
 8002466:	e7f1      	b.n	800244c <__exponent+0x60>

08002468 <_printf_float>:
 8002468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800246c:	b08b      	sub	sp, #44	; 0x2c
 800246e:	460c      	mov	r4, r1
 8002470:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8002474:	4616      	mov	r6, r2
 8002476:	461f      	mov	r7, r3
 8002478:	4605      	mov	r5, r0
 800247a:	f001 f9a3 	bl	80037c4 <_localeconv_r>
 800247e:	f8d0 b000 	ldr.w	fp, [r0]
 8002482:	4658      	mov	r0, fp
 8002484:	f7fd fedc 	bl	8000240 <strlen>
 8002488:	2300      	movs	r3, #0
 800248a:	9308      	str	r3, [sp, #32]
 800248c:	f8d8 3000 	ldr.w	r3, [r8]
 8002490:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002494:	6822      	ldr	r2, [r4, #0]
 8002496:	3307      	adds	r3, #7
 8002498:	f023 0307 	bic.w	r3, r3, #7
 800249c:	f103 0108 	add.w	r1, r3, #8
 80024a0:	f8c8 1000 	str.w	r1, [r8]
 80024a4:	4682      	mov	sl, r0
 80024a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024aa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80024ae:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8002710 <_printf_float+0x2a8>
 80024b2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80024b6:	eeb0 6bc0 	vabs.f64	d6, d0
 80024ba:	eeb4 6b47 	vcmp.f64	d6, d7
 80024be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c2:	dd24      	ble.n	800250e <_printf_float+0xa6>
 80024c4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80024c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024cc:	d502      	bpl.n	80024d4 <_printf_float+0x6c>
 80024ce:	232d      	movs	r3, #45	; 0x2d
 80024d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024d4:	4b90      	ldr	r3, [pc, #576]	; (8002718 <_printf_float+0x2b0>)
 80024d6:	4891      	ldr	r0, [pc, #580]	; (800271c <_printf_float+0x2b4>)
 80024d8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80024dc:	bf94      	ite	ls
 80024de:	4698      	movls	r8, r3
 80024e0:	4680      	movhi	r8, r0
 80024e2:	2303      	movs	r3, #3
 80024e4:	6123      	str	r3, [r4, #16]
 80024e6:	f022 0204 	bic.w	r2, r2, #4
 80024ea:	2300      	movs	r3, #0
 80024ec:	6022      	str	r2, [r4, #0]
 80024ee:	9304      	str	r3, [sp, #16]
 80024f0:	9700      	str	r7, [sp, #0]
 80024f2:	4633      	mov	r3, r6
 80024f4:	aa09      	add	r2, sp, #36	; 0x24
 80024f6:	4621      	mov	r1, r4
 80024f8:	4628      	mov	r0, r5
 80024fa:	f000 f9d3 	bl	80028a4 <_printf_common>
 80024fe:	3001      	adds	r0, #1
 8002500:	f040 808a 	bne.w	8002618 <_printf_float+0x1b0>
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	b00b      	add	sp, #44	; 0x2c
 800250a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800250e:	eeb4 0b40 	vcmp.f64	d0, d0
 8002512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002516:	d709      	bvc.n	800252c <_printf_float+0xc4>
 8002518:	ee10 3a90 	vmov	r3, s1
 800251c:	2b00      	cmp	r3, #0
 800251e:	bfbc      	itt	lt
 8002520:	232d      	movlt	r3, #45	; 0x2d
 8002522:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002526:	487e      	ldr	r0, [pc, #504]	; (8002720 <_printf_float+0x2b8>)
 8002528:	4b7e      	ldr	r3, [pc, #504]	; (8002724 <_printf_float+0x2bc>)
 800252a:	e7d5      	b.n	80024d8 <_printf_float+0x70>
 800252c:	6863      	ldr	r3, [r4, #4]
 800252e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002532:	9104      	str	r1, [sp, #16]
 8002534:	1c59      	adds	r1, r3, #1
 8002536:	d13c      	bne.n	80025b2 <_printf_float+0x14a>
 8002538:	2306      	movs	r3, #6
 800253a:	6063      	str	r3, [r4, #4]
 800253c:	2300      	movs	r3, #0
 800253e:	9303      	str	r3, [sp, #12]
 8002540:	ab08      	add	r3, sp, #32
 8002542:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002546:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800254a:	ab07      	add	r3, sp, #28
 800254c:	6861      	ldr	r1, [r4, #4]
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	6022      	str	r2, [r4, #0]
 8002552:	f10d 031b 	add.w	r3, sp, #27
 8002556:	4628      	mov	r0, r5
 8002558:	f7ff fef6 	bl	8002348 <__cvt>
 800255c:	9b04      	ldr	r3, [sp, #16]
 800255e:	9907      	ldr	r1, [sp, #28]
 8002560:	2b47      	cmp	r3, #71	; 0x47
 8002562:	4680      	mov	r8, r0
 8002564:	d108      	bne.n	8002578 <_printf_float+0x110>
 8002566:	1cc8      	adds	r0, r1, #3
 8002568:	db02      	blt.n	8002570 <_printf_float+0x108>
 800256a:	6863      	ldr	r3, [r4, #4]
 800256c:	4299      	cmp	r1, r3
 800256e:	dd41      	ble.n	80025f4 <_printf_float+0x18c>
 8002570:	f1a9 0902 	sub.w	r9, r9, #2
 8002574:	fa5f f989 	uxtb.w	r9, r9
 8002578:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800257c:	d820      	bhi.n	80025c0 <_printf_float+0x158>
 800257e:	3901      	subs	r1, #1
 8002580:	464a      	mov	r2, r9
 8002582:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002586:	9107      	str	r1, [sp, #28]
 8002588:	f7ff ff30 	bl	80023ec <__exponent>
 800258c:	9a08      	ldr	r2, [sp, #32]
 800258e:	9004      	str	r0, [sp, #16]
 8002590:	1813      	adds	r3, r2, r0
 8002592:	2a01      	cmp	r2, #1
 8002594:	6123      	str	r3, [r4, #16]
 8002596:	dc02      	bgt.n	800259e <_printf_float+0x136>
 8002598:	6822      	ldr	r2, [r4, #0]
 800259a:	07d2      	lsls	r2, r2, #31
 800259c:	d501      	bpl.n	80025a2 <_printf_float+0x13a>
 800259e:	3301      	adds	r3, #1
 80025a0:	6123      	str	r3, [r4, #16]
 80025a2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0a2      	beq.n	80024f0 <_printf_float+0x88>
 80025aa:	232d      	movs	r3, #45	; 0x2d
 80025ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025b0:	e79e      	b.n	80024f0 <_printf_float+0x88>
 80025b2:	9904      	ldr	r1, [sp, #16]
 80025b4:	2947      	cmp	r1, #71	; 0x47
 80025b6:	d1c1      	bne.n	800253c <_printf_float+0xd4>
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1bf      	bne.n	800253c <_printf_float+0xd4>
 80025bc:	2301      	movs	r3, #1
 80025be:	e7bc      	b.n	800253a <_printf_float+0xd2>
 80025c0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80025c4:	d118      	bne.n	80025f8 <_printf_float+0x190>
 80025c6:	2900      	cmp	r1, #0
 80025c8:	6863      	ldr	r3, [r4, #4]
 80025ca:	dd0b      	ble.n	80025e4 <_printf_float+0x17c>
 80025cc:	6121      	str	r1, [r4, #16]
 80025ce:	b913      	cbnz	r3, 80025d6 <_printf_float+0x16e>
 80025d0:	6822      	ldr	r2, [r4, #0]
 80025d2:	07d0      	lsls	r0, r2, #31
 80025d4:	d502      	bpl.n	80025dc <_printf_float+0x174>
 80025d6:	3301      	adds	r3, #1
 80025d8:	440b      	add	r3, r1
 80025da:	6123      	str	r3, [r4, #16]
 80025dc:	2300      	movs	r3, #0
 80025de:	65a1      	str	r1, [r4, #88]	; 0x58
 80025e0:	9304      	str	r3, [sp, #16]
 80025e2:	e7de      	b.n	80025a2 <_printf_float+0x13a>
 80025e4:	b913      	cbnz	r3, 80025ec <_printf_float+0x184>
 80025e6:	6822      	ldr	r2, [r4, #0]
 80025e8:	07d2      	lsls	r2, r2, #31
 80025ea:	d501      	bpl.n	80025f0 <_printf_float+0x188>
 80025ec:	3302      	adds	r3, #2
 80025ee:	e7f4      	b.n	80025da <_printf_float+0x172>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e7f2      	b.n	80025da <_printf_float+0x172>
 80025f4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80025f8:	9b08      	ldr	r3, [sp, #32]
 80025fa:	4299      	cmp	r1, r3
 80025fc:	db05      	blt.n	800260a <_printf_float+0x1a2>
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	6121      	str	r1, [r4, #16]
 8002602:	07d8      	lsls	r0, r3, #31
 8002604:	d5ea      	bpl.n	80025dc <_printf_float+0x174>
 8002606:	1c4b      	adds	r3, r1, #1
 8002608:	e7e7      	b.n	80025da <_printf_float+0x172>
 800260a:	2900      	cmp	r1, #0
 800260c:	bfd4      	ite	le
 800260e:	f1c1 0202 	rsble	r2, r1, #2
 8002612:	2201      	movgt	r2, #1
 8002614:	4413      	add	r3, r2
 8002616:	e7e0      	b.n	80025da <_printf_float+0x172>
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	055a      	lsls	r2, r3, #21
 800261c:	d407      	bmi.n	800262e <_printf_float+0x1c6>
 800261e:	6923      	ldr	r3, [r4, #16]
 8002620:	4642      	mov	r2, r8
 8002622:	4631      	mov	r1, r6
 8002624:	4628      	mov	r0, r5
 8002626:	47b8      	blx	r7
 8002628:	3001      	adds	r0, #1
 800262a:	d12a      	bne.n	8002682 <_printf_float+0x21a>
 800262c:	e76a      	b.n	8002504 <_printf_float+0x9c>
 800262e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002632:	f240 80e2 	bls.w	80027fa <_printf_float+0x392>
 8002636:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800263a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800263e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002642:	d133      	bne.n	80026ac <_printf_float+0x244>
 8002644:	4a38      	ldr	r2, [pc, #224]	; (8002728 <_printf_float+0x2c0>)
 8002646:	2301      	movs	r3, #1
 8002648:	4631      	mov	r1, r6
 800264a:	4628      	mov	r0, r5
 800264c:	47b8      	blx	r7
 800264e:	3001      	adds	r0, #1
 8002650:	f43f af58 	beq.w	8002504 <_printf_float+0x9c>
 8002654:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8002658:	429a      	cmp	r2, r3
 800265a:	db02      	blt.n	8002662 <_printf_float+0x1fa>
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	07d8      	lsls	r0, r3, #31
 8002660:	d50f      	bpl.n	8002682 <_printf_float+0x21a>
 8002662:	4653      	mov	r3, sl
 8002664:	465a      	mov	r2, fp
 8002666:	4631      	mov	r1, r6
 8002668:	4628      	mov	r0, r5
 800266a:	47b8      	blx	r7
 800266c:	3001      	adds	r0, #1
 800266e:	f43f af49 	beq.w	8002504 <_printf_float+0x9c>
 8002672:	f04f 0800 	mov.w	r8, #0
 8002676:	f104 091a 	add.w	r9, r4, #26
 800267a:	9b08      	ldr	r3, [sp, #32]
 800267c:	3b01      	subs	r3, #1
 800267e:	4543      	cmp	r3, r8
 8002680:	dc09      	bgt.n	8002696 <_printf_float+0x22e>
 8002682:	6823      	ldr	r3, [r4, #0]
 8002684:	079b      	lsls	r3, r3, #30
 8002686:	f100 8108 	bmi.w	800289a <_printf_float+0x432>
 800268a:	68e0      	ldr	r0, [r4, #12]
 800268c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800268e:	4298      	cmp	r0, r3
 8002690:	bfb8      	it	lt
 8002692:	4618      	movlt	r0, r3
 8002694:	e738      	b.n	8002508 <_printf_float+0xa0>
 8002696:	2301      	movs	r3, #1
 8002698:	464a      	mov	r2, r9
 800269a:	4631      	mov	r1, r6
 800269c:	4628      	mov	r0, r5
 800269e:	47b8      	blx	r7
 80026a0:	3001      	adds	r0, #1
 80026a2:	f43f af2f 	beq.w	8002504 <_printf_float+0x9c>
 80026a6:	f108 0801 	add.w	r8, r8, #1
 80026aa:	e7e6      	b.n	800267a <_printf_float+0x212>
 80026ac:	9b07      	ldr	r3, [sp, #28]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	dc3c      	bgt.n	800272c <_printf_float+0x2c4>
 80026b2:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <_printf_float+0x2c0>)
 80026b4:	2301      	movs	r3, #1
 80026b6:	4631      	mov	r1, r6
 80026b8:	4628      	mov	r0, r5
 80026ba:	47b8      	blx	r7
 80026bc:	3001      	adds	r0, #1
 80026be:	f43f af21 	beq.w	8002504 <_printf_float+0x9c>
 80026c2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	d102      	bne.n	80026d0 <_printf_float+0x268>
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	07d9      	lsls	r1, r3, #31
 80026ce:	d5d8      	bpl.n	8002682 <_printf_float+0x21a>
 80026d0:	4653      	mov	r3, sl
 80026d2:	465a      	mov	r2, fp
 80026d4:	4631      	mov	r1, r6
 80026d6:	4628      	mov	r0, r5
 80026d8:	47b8      	blx	r7
 80026da:	3001      	adds	r0, #1
 80026dc:	f43f af12 	beq.w	8002504 <_printf_float+0x9c>
 80026e0:	f04f 0900 	mov.w	r9, #0
 80026e4:	f104 0a1a 	add.w	sl, r4, #26
 80026e8:	9b07      	ldr	r3, [sp, #28]
 80026ea:	425b      	negs	r3, r3
 80026ec:	454b      	cmp	r3, r9
 80026ee:	dc01      	bgt.n	80026f4 <_printf_float+0x28c>
 80026f0:	9b08      	ldr	r3, [sp, #32]
 80026f2:	e795      	b.n	8002620 <_printf_float+0x1b8>
 80026f4:	2301      	movs	r3, #1
 80026f6:	4652      	mov	r2, sl
 80026f8:	4631      	mov	r1, r6
 80026fa:	4628      	mov	r0, r5
 80026fc:	47b8      	blx	r7
 80026fe:	3001      	adds	r0, #1
 8002700:	f43f af00 	beq.w	8002504 <_printf_float+0x9c>
 8002704:	f109 0901 	add.w	r9, r9, #1
 8002708:	e7ee      	b.n	80026e8 <_printf_float+0x280>
 800270a:	bf00      	nop
 800270c:	f3af 8000 	nop.w
 8002710:	ffffffff 	.word	0xffffffff
 8002714:	7fefffff 	.word	0x7fefffff
 8002718:	08004c54 	.word	0x08004c54
 800271c:	08004c58 	.word	0x08004c58
 8002720:	08004c60 	.word	0x08004c60
 8002724:	08004c5c 	.word	0x08004c5c
 8002728:	08004c64 	.word	0x08004c64
 800272c:	9a08      	ldr	r2, [sp, #32]
 800272e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002730:	429a      	cmp	r2, r3
 8002732:	bfa8      	it	ge
 8002734:	461a      	movge	r2, r3
 8002736:	2a00      	cmp	r2, #0
 8002738:	4691      	mov	r9, r2
 800273a:	dc38      	bgt.n	80027ae <_printf_float+0x346>
 800273c:	2300      	movs	r3, #0
 800273e:	9305      	str	r3, [sp, #20]
 8002740:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002744:	f104 021a 	add.w	r2, r4, #26
 8002748:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800274a:	9905      	ldr	r1, [sp, #20]
 800274c:	9304      	str	r3, [sp, #16]
 800274e:	eba3 0309 	sub.w	r3, r3, r9
 8002752:	428b      	cmp	r3, r1
 8002754:	dc33      	bgt.n	80027be <_printf_float+0x356>
 8002756:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800275a:	429a      	cmp	r2, r3
 800275c:	db3c      	blt.n	80027d8 <_printf_float+0x370>
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	07da      	lsls	r2, r3, #31
 8002762:	d439      	bmi.n	80027d8 <_printf_float+0x370>
 8002764:	9b08      	ldr	r3, [sp, #32]
 8002766:	9a04      	ldr	r2, [sp, #16]
 8002768:	9907      	ldr	r1, [sp, #28]
 800276a:	1a9a      	subs	r2, r3, r2
 800276c:	eba3 0901 	sub.w	r9, r3, r1
 8002770:	4591      	cmp	r9, r2
 8002772:	bfa8      	it	ge
 8002774:	4691      	movge	r9, r2
 8002776:	f1b9 0f00 	cmp.w	r9, #0
 800277a:	dc35      	bgt.n	80027e8 <_printf_float+0x380>
 800277c:	f04f 0800 	mov.w	r8, #0
 8002780:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002784:	f104 0a1a 	add.w	sl, r4, #26
 8002788:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	eba3 0309 	sub.w	r3, r3, r9
 8002792:	4543      	cmp	r3, r8
 8002794:	f77f af75 	ble.w	8002682 <_printf_float+0x21a>
 8002798:	2301      	movs	r3, #1
 800279a:	4652      	mov	r2, sl
 800279c:	4631      	mov	r1, r6
 800279e:	4628      	mov	r0, r5
 80027a0:	47b8      	blx	r7
 80027a2:	3001      	adds	r0, #1
 80027a4:	f43f aeae 	beq.w	8002504 <_printf_float+0x9c>
 80027a8:	f108 0801 	add.w	r8, r8, #1
 80027ac:	e7ec      	b.n	8002788 <_printf_float+0x320>
 80027ae:	4613      	mov	r3, r2
 80027b0:	4631      	mov	r1, r6
 80027b2:	4642      	mov	r2, r8
 80027b4:	4628      	mov	r0, r5
 80027b6:	47b8      	blx	r7
 80027b8:	3001      	adds	r0, #1
 80027ba:	d1bf      	bne.n	800273c <_printf_float+0x2d4>
 80027bc:	e6a2      	b.n	8002504 <_printf_float+0x9c>
 80027be:	2301      	movs	r3, #1
 80027c0:	4631      	mov	r1, r6
 80027c2:	4628      	mov	r0, r5
 80027c4:	9204      	str	r2, [sp, #16]
 80027c6:	47b8      	blx	r7
 80027c8:	3001      	adds	r0, #1
 80027ca:	f43f ae9b 	beq.w	8002504 <_printf_float+0x9c>
 80027ce:	9b05      	ldr	r3, [sp, #20]
 80027d0:	9a04      	ldr	r2, [sp, #16]
 80027d2:	3301      	adds	r3, #1
 80027d4:	9305      	str	r3, [sp, #20]
 80027d6:	e7b7      	b.n	8002748 <_printf_float+0x2e0>
 80027d8:	4653      	mov	r3, sl
 80027da:	465a      	mov	r2, fp
 80027dc:	4631      	mov	r1, r6
 80027de:	4628      	mov	r0, r5
 80027e0:	47b8      	blx	r7
 80027e2:	3001      	adds	r0, #1
 80027e4:	d1be      	bne.n	8002764 <_printf_float+0x2fc>
 80027e6:	e68d      	b.n	8002504 <_printf_float+0x9c>
 80027e8:	9a04      	ldr	r2, [sp, #16]
 80027ea:	464b      	mov	r3, r9
 80027ec:	4442      	add	r2, r8
 80027ee:	4631      	mov	r1, r6
 80027f0:	4628      	mov	r0, r5
 80027f2:	47b8      	blx	r7
 80027f4:	3001      	adds	r0, #1
 80027f6:	d1c1      	bne.n	800277c <_printf_float+0x314>
 80027f8:	e684      	b.n	8002504 <_printf_float+0x9c>
 80027fa:	9a08      	ldr	r2, [sp, #32]
 80027fc:	2a01      	cmp	r2, #1
 80027fe:	dc01      	bgt.n	8002804 <_printf_float+0x39c>
 8002800:	07db      	lsls	r3, r3, #31
 8002802:	d537      	bpl.n	8002874 <_printf_float+0x40c>
 8002804:	2301      	movs	r3, #1
 8002806:	4642      	mov	r2, r8
 8002808:	4631      	mov	r1, r6
 800280a:	4628      	mov	r0, r5
 800280c:	47b8      	blx	r7
 800280e:	3001      	adds	r0, #1
 8002810:	f43f ae78 	beq.w	8002504 <_printf_float+0x9c>
 8002814:	4653      	mov	r3, sl
 8002816:	465a      	mov	r2, fp
 8002818:	4631      	mov	r1, r6
 800281a:	4628      	mov	r0, r5
 800281c:	47b8      	blx	r7
 800281e:	3001      	adds	r0, #1
 8002820:	f43f ae70 	beq.w	8002504 <_printf_float+0x9c>
 8002824:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8002828:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800282c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002830:	d01b      	beq.n	800286a <_printf_float+0x402>
 8002832:	9b08      	ldr	r3, [sp, #32]
 8002834:	f108 0201 	add.w	r2, r8, #1
 8002838:	3b01      	subs	r3, #1
 800283a:	4631      	mov	r1, r6
 800283c:	4628      	mov	r0, r5
 800283e:	47b8      	blx	r7
 8002840:	3001      	adds	r0, #1
 8002842:	d10e      	bne.n	8002862 <_printf_float+0x3fa>
 8002844:	e65e      	b.n	8002504 <_printf_float+0x9c>
 8002846:	2301      	movs	r3, #1
 8002848:	464a      	mov	r2, r9
 800284a:	4631      	mov	r1, r6
 800284c:	4628      	mov	r0, r5
 800284e:	47b8      	blx	r7
 8002850:	3001      	adds	r0, #1
 8002852:	f43f ae57 	beq.w	8002504 <_printf_float+0x9c>
 8002856:	f108 0801 	add.w	r8, r8, #1
 800285a:	9b08      	ldr	r3, [sp, #32]
 800285c:	3b01      	subs	r3, #1
 800285e:	4543      	cmp	r3, r8
 8002860:	dcf1      	bgt.n	8002846 <_printf_float+0x3de>
 8002862:	9b04      	ldr	r3, [sp, #16]
 8002864:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002868:	e6db      	b.n	8002622 <_printf_float+0x1ba>
 800286a:	f04f 0800 	mov.w	r8, #0
 800286e:	f104 091a 	add.w	r9, r4, #26
 8002872:	e7f2      	b.n	800285a <_printf_float+0x3f2>
 8002874:	2301      	movs	r3, #1
 8002876:	4642      	mov	r2, r8
 8002878:	e7df      	b.n	800283a <_printf_float+0x3d2>
 800287a:	2301      	movs	r3, #1
 800287c:	464a      	mov	r2, r9
 800287e:	4631      	mov	r1, r6
 8002880:	4628      	mov	r0, r5
 8002882:	47b8      	blx	r7
 8002884:	3001      	adds	r0, #1
 8002886:	f43f ae3d 	beq.w	8002504 <_printf_float+0x9c>
 800288a:	f108 0801 	add.w	r8, r8, #1
 800288e:	68e3      	ldr	r3, [r4, #12]
 8002890:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002892:	1a5b      	subs	r3, r3, r1
 8002894:	4543      	cmp	r3, r8
 8002896:	dcf0      	bgt.n	800287a <_printf_float+0x412>
 8002898:	e6f7      	b.n	800268a <_printf_float+0x222>
 800289a:	f04f 0800 	mov.w	r8, #0
 800289e:	f104 0919 	add.w	r9, r4, #25
 80028a2:	e7f4      	b.n	800288e <_printf_float+0x426>

080028a4 <_printf_common>:
 80028a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028a8:	4616      	mov	r6, r2
 80028aa:	4699      	mov	r9, r3
 80028ac:	688a      	ldr	r2, [r1, #8]
 80028ae:	690b      	ldr	r3, [r1, #16]
 80028b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028b4:	4293      	cmp	r3, r2
 80028b6:	bfb8      	it	lt
 80028b8:	4613      	movlt	r3, r2
 80028ba:	6033      	str	r3, [r6, #0]
 80028bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80028c0:	4607      	mov	r7, r0
 80028c2:	460c      	mov	r4, r1
 80028c4:	b10a      	cbz	r2, 80028ca <_printf_common+0x26>
 80028c6:	3301      	adds	r3, #1
 80028c8:	6033      	str	r3, [r6, #0]
 80028ca:	6823      	ldr	r3, [r4, #0]
 80028cc:	0699      	lsls	r1, r3, #26
 80028ce:	bf42      	ittt	mi
 80028d0:	6833      	ldrmi	r3, [r6, #0]
 80028d2:	3302      	addmi	r3, #2
 80028d4:	6033      	strmi	r3, [r6, #0]
 80028d6:	6825      	ldr	r5, [r4, #0]
 80028d8:	f015 0506 	ands.w	r5, r5, #6
 80028dc:	d106      	bne.n	80028ec <_printf_common+0x48>
 80028de:	f104 0a19 	add.w	sl, r4, #25
 80028e2:	68e3      	ldr	r3, [r4, #12]
 80028e4:	6832      	ldr	r2, [r6, #0]
 80028e6:	1a9b      	subs	r3, r3, r2
 80028e8:	42ab      	cmp	r3, r5
 80028ea:	dc26      	bgt.n	800293a <_printf_common+0x96>
 80028ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80028f0:	1e13      	subs	r3, r2, #0
 80028f2:	6822      	ldr	r2, [r4, #0]
 80028f4:	bf18      	it	ne
 80028f6:	2301      	movne	r3, #1
 80028f8:	0692      	lsls	r2, r2, #26
 80028fa:	d42b      	bmi.n	8002954 <_printf_common+0xb0>
 80028fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002900:	4649      	mov	r1, r9
 8002902:	4638      	mov	r0, r7
 8002904:	47c0      	blx	r8
 8002906:	3001      	adds	r0, #1
 8002908:	d01e      	beq.n	8002948 <_printf_common+0xa4>
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	68e5      	ldr	r5, [r4, #12]
 800290e:	6832      	ldr	r2, [r6, #0]
 8002910:	f003 0306 	and.w	r3, r3, #6
 8002914:	2b04      	cmp	r3, #4
 8002916:	bf08      	it	eq
 8002918:	1aad      	subeq	r5, r5, r2
 800291a:	68a3      	ldr	r3, [r4, #8]
 800291c:	6922      	ldr	r2, [r4, #16]
 800291e:	bf0c      	ite	eq
 8002920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002924:	2500      	movne	r5, #0
 8002926:	4293      	cmp	r3, r2
 8002928:	bfc4      	itt	gt
 800292a:	1a9b      	subgt	r3, r3, r2
 800292c:	18ed      	addgt	r5, r5, r3
 800292e:	2600      	movs	r6, #0
 8002930:	341a      	adds	r4, #26
 8002932:	42b5      	cmp	r5, r6
 8002934:	d11a      	bne.n	800296c <_printf_common+0xc8>
 8002936:	2000      	movs	r0, #0
 8002938:	e008      	b.n	800294c <_printf_common+0xa8>
 800293a:	2301      	movs	r3, #1
 800293c:	4652      	mov	r2, sl
 800293e:	4649      	mov	r1, r9
 8002940:	4638      	mov	r0, r7
 8002942:	47c0      	blx	r8
 8002944:	3001      	adds	r0, #1
 8002946:	d103      	bne.n	8002950 <_printf_common+0xac>
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002950:	3501      	adds	r5, #1
 8002952:	e7c6      	b.n	80028e2 <_printf_common+0x3e>
 8002954:	18e1      	adds	r1, r4, r3
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	2030      	movs	r0, #48	; 0x30
 800295a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800295e:	4422      	add	r2, r4
 8002960:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002964:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002968:	3302      	adds	r3, #2
 800296a:	e7c7      	b.n	80028fc <_printf_common+0x58>
 800296c:	2301      	movs	r3, #1
 800296e:	4622      	mov	r2, r4
 8002970:	4649      	mov	r1, r9
 8002972:	4638      	mov	r0, r7
 8002974:	47c0      	blx	r8
 8002976:	3001      	adds	r0, #1
 8002978:	d0e6      	beq.n	8002948 <_printf_common+0xa4>
 800297a:	3601      	adds	r6, #1
 800297c:	e7d9      	b.n	8002932 <_printf_common+0x8e>
	...

08002980 <_printf_i>:
 8002980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002984:	7e0f      	ldrb	r7, [r1, #24]
 8002986:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002988:	2f78      	cmp	r7, #120	; 0x78
 800298a:	4691      	mov	r9, r2
 800298c:	4680      	mov	r8, r0
 800298e:	460c      	mov	r4, r1
 8002990:	469a      	mov	sl, r3
 8002992:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002996:	d807      	bhi.n	80029a8 <_printf_i+0x28>
 8002998:	2f62      	cmp	r7, #98	; 0x62
 800299a:	d80a      	bhi.n	80029b2 <_printf_i+0x32>
 800299c:	2f00      	cmp	r7, #0
 800299e:	f000 80d8 	beq.w	8002b52 <_printf_i+0x1d2>
 80029a2:	2f58      	cmp	r7, #88	; 0x58
 80029a4:	f000 80a3 	beq.w	8002aee <_printf_i+0x16e>
 80029a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80029b0:	e03a      	b.n	8002a28 <_printf_i+0xa8>
 80029b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80029b6:	2b15      	cmp	r3, #21
 80029b8:	d8f6      	bhi.n	80029a8 <_printf_i+0x28>
 80029ba:	a101      	add	r1, pc, #4	; (adr r1, 80029c0 <_printf_i+0x40>)
 80029bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029c0:	08002a19 	.word	0x08002a19
 80029c4:	08002a2d 	.word	0x08002a2d
 80029c8:	080029a9 	.word	0x080029a9
 80029cc:	080029a9 	.word	0x080029a9
 80029d0:	080029a9 	.word	0x080029a9
 80029d4:	080029a9 	.word	0x080029a9
 80029d8:	08002a2d 	.word	0x08002a2d
 80029dc:	080029a9 	.word	0x080029a9
 80029e0:	080029a9 	.word	0x080029a9
 80029e4:	080029a9 	.word	0x080029a9
 80029e8:	080029a9 	.word	0x080029a9
 80029ec:	08002b39 	.word	0x08002b39
 80029f0:	08002a5d 	.word	0x08002a5d
 80029f4:	08002b1b 	.word	0x08002b1b
 80029f8:	080029a9 	.word	0x080029a9
 80029fc:	080029a9 	.word	0x080029a9
 8002a00:	08002b5b 	.word	0x08002b5b
 8002a04:	080029a9 	.word	0x080029a9
 8002a08:	08002a5d 	.word	0x08002a5d
 8002a0c:	080029a9 	.word	0x080029a9
 8002a10:	080029a9 	.word	0x080029a9
 8002a14:	08002b23 	.word	0x08002b23
 8002a18:	682b      	ldr	r3, [r5, #0]
 8002a1a:	1d1a      	adds	r2, r3, #4
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	602a      	str	r2, [r5, #0]
 8002a20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0a3      	b.n	8002b74 <_printf_i+0x1f4>
 8002a2c:	6820      	ldr	r0, [r4, #0]
 8002a2e:	6829      	ldr	r1, [r5, #0]
 8002a30:	0606      	lsls	r6, r0, #24
 8002a32:	f101 0304 	add.w	r3, r1, #4
 8002a36:	d50a      	bpl.n	8002a4e <_printf_i+0xce>
 8002a38:	680e      	ldr	r6, [r1, #0]
 8002a3a:	602b      	str	r3, [r5, #0]
 8002a3c:	2e00      	cmp	r6, #0
 8002a3e:	da03      	bge.n	8002a48 <_printf_i+0xc8>
 8002a40:	232d      	movs	r3, #45	; 0x2d
 8002a42:	4276      	negs	r6, r6
 8002a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a48:	485e      	ldr	r0, [pc, #376]	; (8002bc4 <_printf_i+0x244>)
 8002a4a:	230a      	movs	r3, #10
 8002a4c:	e019      	b.n	8002a82 <_printf_i+0x102>
 8002a4e:	680e      	ldr	r6, [r1, #0]
 8002a50:	602b      	str	r3, [r5, #0]
 8002a52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a56:	bf18      	it	ne
 8002a58:	b236      	sxthne	r6, r6
 8002a5a:	e7ef      	b.n	8002a3c <_printf_i+0xbc>
 8002a5c:	682b      	ldr	r3, [r5, #0]
 8002a5e:	6820      	ldr	r0, [r4, #0]
 8002a60:	1d19      	adds	r1, r3, #4
 8002a62:	6029      	str	r1, [r5, #0]
 8002a64:	0601      	lsls	r1, r0, #24
 8002a66:	d501      	bpl.n	8002a6c <_printf_i+0xec>
 8002a68:	681e      	ldr	r6, [r3, #0]
 8002a6a:	e002      	b.n	8002a72 <_printf_i+0xf2>
 8002a6c:	0646      	lsls	r6, r0, #25
 8002a6e:	d5fb      	bpl.n	8002a68 <_printf_i+0xe8>
 8002a70:	881e      	ldrh	r6, [r3, #0]
 8002a72:	4854      	ldr	r0, [pc, #336]	; (8002bc4 <_printf_i+0x244>)
 8002a74:	2f6f      	cmp	r7, #111	; 0x6f
 8002a76:	bf0c      	ite	eq
 8002a78:	2308      	moveq	r3, #8
 8002a7a:	230a      	movne	r3, #10
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a82:	6865      	ldr	r5, [r4, #4]
 8002a84:	60a5      	str	r5, [r4, #8]
 8002a86:	2d00      	cmp	r5, #0
 8002a88:	bfa2      	ittt	ge
 8002a8a:	6821      	ldrge	r1, [r4, #0]
 8002a8c:	f021 0104 	bicge.w	r1, r1, #4
 8002a90:	6021      	strge	r1, [r4, #0]
 8002a92:	b90e      	cbnz	r6, 8002a98 <_printf_i+0x118>
 8002a94:	2d00      	cmp	r5, #0
 8002a96:	d04d      	beq.n	8002b34 <_printf_i+0x1b4>
 8002a98:	4615      	mov	r5, r2
 8002a9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8002a9e:	fb03 6711 	mls	r7, r3, r1, r6
 8002aa2:	5dc7      	ldrb	r7, [r0, r7]
 8002aa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002aa8:	4637      	mov	r7, r6
 8002aaa:	42bb      	cmp	r3, r7
 8002aac:	460e      	mov	r6, r1
 8002aae:	d9f4      	bls.n	8002a9a <_printf_i+0x11a>
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d10b      	bne.n	8002acc <_printf_i+0x14c>
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	07de      	lsls	r6, r3, #31
 8002ab8:	d508      	bpl.n	8002acc <_printf_i+0x14c>
 8002aba:	6923      	ldr	r3, [r4, #16]
 8002abc:	6861      	ldr	r1, [r4, #4]
 8002abe:	4299      	cmp	r1, r3
 8002ac0:	bfde      	ittt	le
 8002ac2:	2330      	movle	r3, #48	; 0x30
 8002ac4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ac8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002acc:	1b52      	subs	r2, r2, r5
 8002ace:	6122      	str	r2, [r4, #16]
 8002ad0:	f8cd a000 	str.w	sl, [sp]
 8002ad4:	464b      	mov	r3, r9
 8002ad6:	aa03      	add	r2, sp, #12
 8002ad8:	4621      	mov	r1, r4
 8002ada:	4640      	mov	r0, r8
 8002adc:	f7ff fee2 	bl	80028a4 <_printf_common>
 8002ae0:	3001      	adds	r0, #1
 8002ae2:	d14c      	bne.n	8002b7e <_printf_i+0x1fe>
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	b004      	add	sp, #16
 8002aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aee:	4835      	ldr	r0, [pc, #212]	; (8002bc4 <_printf_i+0x244>)
 8002af0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002af4:	6829      	ldr	r1, [r5, #0]
 8002af6:	6823      	ldr	r3, [r4, #0]
 8002af8:	f851 6b04 	ldr.w	r6, [r1], #4
 8002afc:	6029      	str	r1, [r5, #0]
 8002afe:	061d      	lsls	r5, r3, #24
 8002b00:	d514      	bpl.n	8002b2c <_printf_i+0x1ac>
 8002b02:	07df      	lsls	r7, r3, #31
 8002b04:	bf44      	itt	mi
 8002b06:	f043 0320 	orrmi.w	r3, r3, #32
 8002b0a:	6023      	strmi	r3, [r4, #0]
 8002b0c:	b91e      	cbnz	r6, 8002b16 <_printf_i+0x196>
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	f023 0320 	bic.w	r3, r3, #32
 8002b14:	6023      	str	r3, [r4, #0]
 8002b16:	2310      	movs	r3, #16
 8002b18:	e7b0      	b.n	8002a7c <_printf_i+0xfc>
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	f043 0320 	orr.w	r3, r3, #32
 8002b20:	6023      	str	r3, [r4, #0]
 8002b22:	2378      	movs	r3, #120	; 0x78
 8002b24:	4828      	ldr	r0, [pc, #160]	; (8002bc8 <_printf_i+0x248>)
 8002b26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b2a:	e7e3      	b.n	8002af4 <_printf_i+0x174>
 8002b2c:	0659      	lsls	r1, r3, #25
 8002b2e:	bf48      	it	mi
 8002b30:	b2b6      	uxthmi	r6, r6
 8002b32:	e7e6      	b.n	8002b02 <_printf_i+0x182>
 8002b34:	4615      	mov	r5, r2
 8002b36:	e7bb      	b.n	8002ab0 <_printf_i+0x130>
 8002b38:	682b      	ldr	r3, [r5, #0]
 8002b3a:	6826      	ldr	r6, [r4, #0]
 8002b3c:	6961      	ldr	r1, [r4, #20]
 8002b3e:	1d18      	adds	r0, r3, #4
 8002b40:	6028      	str	r0, [r5, #0]
 8002b42:	0635      	lsls	r5, r6, #24
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	d501      	bpl.n	8002b4c <_printf_i+0x1cc>
 8002b48:	6019      	str	r1, [r3, #0]
 8002b4a:	e002      	b.n	8002b52 <_printf_i+0x1d2>
 8002b4c:	0670      	lsls	r0, r6, #25
 8002b4e:	d5fb      	bpl.n	8002b48 <_printf_i+0x1c8>
 8002b50:	8019      	strh	r1, [r3, #0]
 8002b52:	2300      	movs	r3, #0
 8002b54:	6123      	str	r3, [r4, #16]
 8002b56:	4615      	mov	r5, r2
 8002b58:	e7ba      	b.n	8002ad0 <_printf_i+0x150>
 8002b5a:	682b      	ldr	r3, [r5, #0]
 8002b5c:	1d1a      	adds	r2, r3, #4
 8002b5e:	602a      	str	r2, [r5, #0]
 8002b60:	681d      	ldr	r5, [r3, #0]
 8002b62:	6862      	ldr	r2, [r4, #4]
 8002b64:	2100      	movs	r1, #0
 8002b66:	4628      	mov	r0, r5
 8002b68:	f7fd fb72 	bl	8000250 <memchr>
 8002b6c:	b108      	cbz	r0, 8002b72 <_printf_i+0x1f2>
 8002b6e:	1b40      	subs	r0, r0, r5
 8002b70:	6060      	str	r0, [r4, #4]
 8002b72:	6863      	ldr	r3, [r4, #4]
 8002b74:	6123      	str	r3, [r4, #16]
 8002b76:	2300      	movs	r3, #0
 8002b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b7c:	e7a8      	b.n	8002ad0 <_printf_i+0x150>
 8002b7e:	6923      	ldr	r3, [r4, #16]
 8002b80:	462a      	mov	r2, r5
 8002b82:	4649      	mov	r1, r9
 8002b84:	4640      	mov	r0, r8
 8002b86:	47d0      	blx	sl
 8002b88:	3001      	adds	r0, #1
 8002b8a:	d0ab      	beq.n	8002ae4 <_printf_i+0x164>
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	079b      	lsls	r3, r3, #30
 8002b90:	d413      	bmi.n	8002bba <_printf_i+0x23a>
 8002b92:	68e0      	ldr	r0, [r4, #12]
 8002b94:	9b03      	ldr	r3, [sp, #12]
 8002b96:	4298      	cmp	r0, r3
 8002b98:	bfb8      	it	lt
 8002b9a:	4618      	movlt	r0, r3
 8002b9c:	e7a4      	b.n	8002ae8 <_printf_i+0x168>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	4632      	mov	r2, r6
 8002ba2:	4649      	mov	r1, r9
 8002ba4:	4640      	mov	r0, r8
 8002ba6:	47d0      	blx	sl
 8002ba8:	3001      	adds	r0, #1
 8002baa:	d09b      	beq.n	8002ae4 <_printf_i+0x164>
 8002bac:	3501      	adds	r5, #1
 8002bae:	68e3      	ldr	r3, [r4, #12]
 8002bb0:	9903      	ldr	r1, [sp, #12]
 8002bb2:	1a5b      	subs	r3, r3, r1
 8002bb4:	42ab      	cmp	r3, r5
 8002bb6:	dcf2      	bgt.n	8002b9e <_printf_i+0x21e>
 8002bb8:	e7eb      	b.n	8002b92 <_printf_i+0x212>
 8002bba:	2500      	movs	r5, #0
 8002bbc:	f104 0619 	add.w	r6, r4, #25
 8002bc0:	e7f5      	b.n	8002bae <_printf_i+0x22e>
 8002bc2:	bf00      	nop
 8002bc4:	08004c66 	.word	0x08004c66
 8002bc8:	08004c77 	.word	0x08004c77

08002bcc <quorem>:
 8002bcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd0:	6903      	ldr	r3, [r0, #16]
 8002bd2:	690c      	ldr	r4, [r1, #16]
 8002bd4:	42a3      	cmp	r3, r4
 8002bd6:	4607      	mov	r7, r0
 8002bd8:	f2c0 8081 	blt.w	8002cde <quorem+0x112>
 8002bdc:	3c01      	subs	r4, #1
 8002bde:	f101 0814 	add.w	r8, r1, #20
 8002be2:	f100 0514 	add.w	r5, r0, #20
 8002be6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002bea:	9301      	str	r3, [sp, #4]
 8002bec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002bf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002bfc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002c00:	fbb2 f6f3 	udiv	r6, r2, r3
 8002c04:	d331      	bcc.n	8002c6a <quorem+0x9e>
 8002c06:	f04f 0e00 	mov.w	lr, #0
 8002c0a:	4640      	mov	r0, r8
 8002c0c:	46ac      	mov	ip, r5
 8002c0e:	46f2      	mov	sl, lr
 8002c10:	f850 2b04 	ldr.w	r2, [r0], #4
 8002c14:	b293      	uxth	r3, r2
 8002c16:	fb06 e303 	mla	r3, r6, r3, lr
 8002c1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	ebaa 0303 	sub.w	r3, sl, r3
 8002c24:	f8dc a000 	ldr.w	sl, [ip]
 8002c28:	0c12      	lsrs	r2, r2, #16
 8002c2a:	fa13 f38a 	uxtah	r3, r3, sl
 8002c2e:	fb06 e202 	mla	r2, r6, r2, lr
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	9b00      	ldr	r3, [sp, #0]
 8002c36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002c3a:	b292      	uxth	r2, r2
 8002c3c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002c40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002c44:	f8bd 3000 	ldrh.w	r3, [sp]
 8002c48:	4581      	cmp	r9, r0
 8002c4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c4e:	f84c 3b04 	str.w	r3, [ip], #4
 8002c52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002c56:	d2db      	bcs.n	8002c10 <quorem+0x44>
 8002c58:	f855 300b 	ldr.w	r3, [r5, fp]
 8002c5c:	b92b      	cbnz	r3, 8002c6a <quorem+0x9e>
 8002c5e:	9b01      	ldr	r3, [sp, #4]
 8002c60:	3b04      	subs	r3, #4
 8002c62:	429d      	cmp	r5, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	d32e      	bcc.n	8002cc6 <quorem+0xfa>
 8002c68:	613c      	str	r4, [r7, #16]
 8002c6a:	4638      	mov	r0, r7
 8002c6c:	f001 f846 	bl	8003cfc <__mcmp>
 8002c70:	2800      	cmp	r0, #0
 8002c72:	db24      	blt.n	8002cbe <quorem+0xf2>
 8002c74:	3601      	adds	r6, #1
 8002c76:	4628      	mov	r0, r5
 8002c78:	f04f 0c00 	mov.w	ip, #0
 8002c7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8002c80:	f8d0 e000 	ldr.w	lr, [r0]
 8002c84:	b293      	uxth	r3, r2
 8002c86:	ebac 0303 	sub.w	r3, ip, r3
 8002c8a:	0c12      	lsrs	r2, r2, #16
 8002c8c:	fa13 f38e 	uxtah	r3, r3, lr
 8002c90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002c94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c9e:	45c1      	cmp	r9, r8
 8002ca0:	f840 3b04 	str.w	r3, [r0], #4
 8002ca4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002ca8:	d2e8      	bcs.n	8002c7c <quorem+0xb0>
 8002caa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002cae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002cb2:	b922      	cbnz	r2, 8002cbe <quorem+0xf2>
 8002cb4:	3b04      	subs	r3, #4
 8002cb6:	429d      	cmp	r5, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	d30a      	bcc.n	8002cd2 <quorem+0x106>
 8002cbc:	613c      	str	r4, [r7, #16]
 8002cbe:	4630      	mov	r0, r6
 8002cc0:	b003      	add	sp, #12
 8002cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	3b04      	subs	r3, #4
 8002cca:	2a00      	cmp	r2, #0
 8002ccc:	d1cc      	bne.n	8002c68 <quorem+0x9c>
 8002cce:	3c01      	subs	r4, #1
 8002cd0:	e7c7      	b.n	8002c62 <quorem+0x96>
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	3b04      	subs	r3, #4
 8002cd6:	2a00      	cmp	r2, #0
 8002cd8:	d1f0      	bne.n	8002cbc <quorem+0xf0>
 8002cda:	3c01      	subs	r4, #1
 8002cdc:	e7eb      	b.n	8002cb6 <quorem+0xea>
 8002cde:	2000      	movs	r0, #0
 8002ce0:	e7ee      	b.n	8002cc0 <quorem+0xf4>
 8002ce2:	0000      	movs	r0, r0
 8002ce4:	0000      	movs	r0, r0
	...

08002ce8 <_dtoa_r>:
 8002ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cec:	ed2d 8b02 	vpush	{d8}
 8002cf0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002cf2:	b091      	sub	sp, #68	; 0x44
 8002cf4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002cf8:	ec59 8b10 	vmov	r8, r9, d0
 8002cfc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8002cfe:	9106      	str	r1, [sp, #24]
 8002d00:	4606      	mov	r6, r0
 8002d02:	9208      	str	r2, [sp, #32]
 8002d04:	930c      	str	r3, [sp, #48]	; 0x30
 8002d06:	b975      	cbnz	r5, 8002d26 <_dtoa_r+0x3e>
 8002d08:	2010      	movs	r0, #16
 8002d0a:	f000 fd5f 	bl	80037cc <malloc>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	6270      	str	r0, [r6, #36]	; 0x24
 8002d12:	b920      	cbnz	r0, 8002d1e <_dtoa_r+0x36>
 8002d14:	4baa      	ldr	r3, [pc, #680]	; (8002fc0 <_dtoa_r+0x2d8>)
 8002d16:	21ea      	movs	r1, #234	; 0xea
 8002d18:	48aa      	ldr	r0, [pc, #680]	; (8002fc4 <_dtoa_r+0x2dc>)
 8002d1a:	f001 f9f7 	bl	800410c <__assert_func>
 8002d1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002d22:	6005      	str	r5, [r0, #0]
 8002d24:	60c5      	str	r5, [r0, #12]
 8002d26:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002d28:	6819      	ldr	r1, [r3, #0]
 8002d2a:	b151      	cbz	r1, 8002d42 <_dtoa_r+0x5a>
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	604a      	str	r2, [r1, #4]
 8002d30:	2301      	movs	r3, #1
 8002d32:	4093      	lsls	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
 8002d36:	4630      	mov	r0, r6
 8002d38:	f000 fd9e 	bl	8003878 <_Bfree>
 8002d3c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	f1b9 0300 	subs.w	r3, r9, #0
 8002d46:	bfbb      	ittet	lt
 8002d48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002d4c:	9303      	strlt	r3, [sp, #12]
 8002d4e:	2300      	movge	r3, #0
 8002d50:	2201      	movlt	r2, #1
 8002d52:	bfac      	ite	ge
 8002d54:	6023      	strge	r3, [r4, #0]
 8002d56:	6022      	strlt	r2, [r4, #0]
 8002d58:	4b9b      	ldr	r3, [pc, #620]	; (8002fc8 <_dtoa_r+0x2e0>)
 8002d5a:	9c03      	ldr	r4, [sp, #12]
 8002d5c:	43a3      	bics	r3, r4
 8002d5e:	d11c      	bne.n	8002d9a <_dtoa_r+0xb2>
 8002d60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002d62:	f242 730f 	movw	r3, #9999	; 0x270f
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8002d6c:	ea53 0308 	orrs.w	r3, r3, r8
 8002d70:	f000 84fd 	beq.w	800376e <_dtoa_r+0xa86>
 8002d74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002d76:	b963      	cbnz	r3, 8002d92 <_dtoa_r+0xaa>
 8002d78:	4b94      	ldr	r3, [pc, #592]	; (8002fcc <_dtoa_r+0x2e4>)
 8002d7a:	e01f      	b.n	8002dbc <_dtoa_r+0xd4>
 8002d7c:	4b94      	ldr	r3, [pc, #592]	; (8002fd0 <_dtoa_r+0x2e8>)
 8002d7e:	9301      	str	r3, [sp, #4]
 8002d80:	3308      	adds	r3, #8
 8002d82:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	9801      	ldr	r0, [sp, #4]
 8002d88:	b011      	add	sp, #68	; 0x44
 8002d8a:	ecbd 8b02 	vpop	{d8}
 8002d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d92:	4b8e      	ldr	r3, [pc, #568]	; (8002fcc <_dtoa_r+0x2e4>)
 8002d94:	9301      	str	r3, [sp, #4]
 8002d96:	3303      	adds	r3, #3
 8002d98:	e7f3      	b.n	8002d82 <_dtoa_r+0x9a>
 8002d9a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8002d9e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8002da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da6:	d10b      	bne.n	8002dc0 <_dtoa_r+0xd8>
 8002da8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002daa:	2301      	movs	r3, #1
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 84d9 	beq.w	8003768 <_dtoa_r+0xa80>
 8002db6:	4887      	ldr	r0, [pc, #540]	; (8002fd4 <_dtoa_r+0x2ec>)
 8002db8:	6018      	str	r0, [r3, #0]
 8002dba:	1e43      	subs	r3, r0, #1
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	e7e2      	b.n	8002d86 <_dtoa_r+0x9e>
 8002dc0:	a90f      	add	r1, sp, #60	; 0x3c
 8002dc2:	aa0e      	add	r2, sp, #56	; 0x38
 8002dc4:	4630      	mov	r0, r6
 8002dc6:	eeb0 0b48 	vmov.f64	d0, d8
 8002dca:	f001 f83d 	bl	8003e48 <__d2b>
 8002dce:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8002dd2:	4605      	mov	r5, r0
 8002dd4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002dd6:	2900      	cmp	r1, #0
 8002dd8:	d046      	beq.n	8002e68 <_dtoa_r+0x180>
 8002dda:	ee18 4a90 	vmov	r4, s17
 8002dde:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002de2:	ec53 2b18 	vmov	r2, r3, d8
 8002de6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8002dea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002dee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8002df2:	2400      	movs	r4, #0
 8002df4:	ec43 2b16 	vmov	d6, r2, r3
 8002df8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8002dfc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8002fa8 <_dtoa_r+0x2c0>
 8002e00:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002e04:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8002fb0 <_dtoa_r+0x2c8>
 8002e08:	eea7 6b05 	vfma.f64	d6, d7, d5
 8002e0c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8002fb8 <_dtoa_r+0x2d0>
 8002e10:	ee07 1a90 	vmov	s15, r1
 8002e14:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8002e18:	eeb0 7b46 	vmov.f64	d7, d6
 8002e1c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8002e20:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8002e24:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2c:	ee16 ba90 	vmov	fp, s13
 8002e30:	940a      	str	r4, [sp, #40]	; 0x28
 8002e32:	d508      	bpl.n	8002e46 <_dtoa_r+0x15e>
 8002e34:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8002e38:	eeb4 6b47 	vcmp.f64	d6, d7
 8002e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e40:	bf18      	it	ne
 8002e42:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8002e46:	f1bb 0f16 	cmp.w	fp, #22
 8002e4a:	d82f      	bhi.n	8002eac <_dtoa_r+0x1c4>
 8002e4c:	4b62      	ldr	r3, [pc, #392]	; (8002fd8 <_dtoa_r+0x2f0>)
 8002e4e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002e52:	ed93 7b00 	vldr	d7, [r3]
 8002e56:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8002e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5e:	d501      	bpl.n	8002e64 <_dtoa_r+0x17c>
 8002e60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002e64:	2300      	movs	r3, #0
 8002e66:	e022      	b.n	8002eae <_dtoa_r+0x1c6>
 8002e68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002e6a:	4401      	add	r1, r0
 8002e6c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	bfc1      	itttt	gt
 8002e74:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002e78:	fa04 f303 	lslgt.w	r3, r4, r3
 8002e7c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8002e80:	fa28 f804 	lsrgt.w	r8, r8, r4
 8002e84:	bfd6      	itet	le
 8002e86:	f1c3 0320 	rsble	r3, r3, #32
 8002e8a:	ea43 0808 	orrgt.w	r8, r3, r8
 8002e8e:	fa08 f803 	lslle.w	r8, r8, r3
 8002e92:	ee07 8a90 	vmov	s15, r8
 8002e96:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002e9a:	3901      	subs	r1, #1
 8002e9c:	ee17 4a90 	vmov	r4, s15
 8002ea0:	ec53 2b17 	vmov	r2, r3, d7
 8002ea4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8002ea8:	2401      	movs	r4, #1
 8002eaa:	e7a3      	b.n	8002df4 <_dtoa_r+0x10c>
 8002eac:	2301      	movs	r3, #1
 8002eae:	930b      	str	r3, [sp, #44]	; 0x2c
 8002eb0:	1a43      	subs	r3, r0, r1
 8002eb2:	1e5a      	subs	r2, r3, #1
 8002eb4:	bf45      	ittet	mi
 8002eb6:	f1c3 0301 	rsbmi	r3, r3, #1
 8002eba:	9304      	strmi	r3, [sp, #16]
 8002ebc:	2300      	movpl	r3, #0
 8002ebe:	2300      	movmi	r3, #0
 8002ec0:	9205      	str	r2, [sp, #20]
 8002ec2:	bf54      	ite	pl
 8002ec4:	9304      	strpl	r3, [sp, #16]
 8002ec6:	9305      	strmi	r3, [sp, #20]
 8002ec8:	f1bb 0f00 	cmp.w	fp, #0
 8002ecc:	db18      	blt.n	8002f00 <_dtoa_r+0x218>
 8002ece:	9b05      	ldr	r3, [sp, #20]
 8002ed0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8002ed4:	445b      	add	r3, fp
 8002ed6:	9305      	str	r3, [sp, #20]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	9a06      	ldr	r2, [sp, #24]
 8002edc:	2a09      	cmp	r2, #9
 8002ede:	d849      	bhi.n	8002f74 <_dtoa_r+0x28c>
 8002ee0:	2a05      	cmp	r2, #5
 8002ee2:	bfc4      	itt	gt
 8002ee4:	3a04      	subgt	r2, #4
 8002ee6:	9206      	strgt	r2, [sp, #24]
 8002ee8:	9a06      	ldr	r2, [sp, #24]
 8002eea:	f1a2 0202 	sub.w	r2, r2, #2
 8002eee:	bfcc      	ite	gt
 8002ef0:	2400      	movgt	r4, #0
 8002ef2:	2401      	movle	r4, #1
 8002ef4:	2a03      	cmp	r2, #3
 8002ef6:	d848      	bhi.n	8002f8a <_dtoa_r+0x2a2>
 8002ef8:	e8df f002 	tbb	[pc, r2]
 8002efc:	3a2c2e0b 	.word	0x3a2c2e0b
 8002f00:	9b04      	ldr	r3, [sp, #16]
 8002f02:	2200      	movs	r2, #0
 8002f04:	eba3 030b 	sub.w	r3, r3, fp
 8002f08:	9304      	str	r3, [sp, #16]
 8002f0a:	9209      	str	r2, [sp, #36]	; 0x24
 8002f0c:	f1cb 0300 	rsb	r3, fp, #0
 8002f10:	e7e3      	b.n	8002eda <_dtoa_r+0x1f2>
 8002f12:	2200      	movs	r2, #0
 8002f14:	9207      	str	r2, [sp, #28]
 8002f16:	9a08      	ldr	r2, [sp, #32]
 8002f18:	2a00      	cmp	r2, #0
 8002f1a:	dc39      	bgt.n	8002f90 <_dtoa_r+0x2a8>
 8002f1c:	f04f 0a01 	mov.w	sl, #1
 8002f20:	46d1      	mov	r9, sl
 8002f22:	4652      	mov	r2, sl
 8002f24:	f8cd a020 	str.w	sl, [sp, #32]
 8002f28:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	6079      	str	r1, [r7, #4]
 8002f2e:	2004      	movs	r0, #4
 8002f30:	f100 0c14 	add.w	ip, r0, #20
 8002f34:	4594      	cmp	ip, r2
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	d92f      	bls.n	8002f9a <_dtoa_r+0x2b2>
 8002f3a:	4630      	mov	r0, r6
 8002f3c:	930d      	str	r3, [sp, #52]	; 0x34
 8002f3e:	f000 fc5b 	bl	80037f8 <_Balloc>
 8002f42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f44:	9001      	str	r0, [sp, #4]
 8002f46:	4602      	mov	r2, r0
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	d149      	bne.n	8002fe0 <_dtoa_r+0x2f8>
 8002f4c:	4b23      	ldr	r3, [pc, #140]	; (8002fdc <_dtoa_r+0x2f4>)
 8002f4e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002f52:	e6e1      	b.n	8002d18 <_dtoa_r+0x30>
 8002f54:	2201      	movs	r2, #1
 8002f56:	e7dd      	b.n	8002f14 <_dtoa_r+0x22c>
 8002f58:	2200      	movs	r2, #0
 8002f5a:	9207      	str	r2, [sp, #28]
 8002f5c:	9a08      	ldr	r2, [sp, #32]
 8002f5e:	eb0b 0a02 	add.w	sl, fp, r2
 8002f62:	f10a 0901 	add.w	r9, sl, #1
 8002f66:	464a      	mov	r2, r9
 8002f68:	2a01      	cmp	r2, #1
 8002f6a:	bfb8      	it	lt
 8002f6c:	2201      	movlt	r2, #1
 8002f6e:	e7db      	b.n	8002f28 <_dtoa_r+0x240>
 8002f70:	2201      	movs	r2, #1
 8002f72:	e7f2      	b.n	8002f5a <_dtoa_r+0x272>
 8002f74:	2401      	movs	r4, #1
 8002f76:	2200      	movs	r2, #0
 8002f78:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8002f7c:	f04f 3aff 	mov.w	sl, #4294967295
 8002f80:	2100      	movs	r1, #0
 8002f82:	46d1      	mov	r9, sl
 8002f84:	2212      	movs	r2, #18
 8002f86:	9108      	str	r1, [sp, #32]
 8002f88:	e7ce      	b.n	8002f28 <_dtoa_r+0x240>
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	9207      	str	r2, [sp, #28]
 8002f8e:	e7f5      	b.n	8002f7c <_dtoa_r+0x294>
 8002f90:	f8dd a020 	ldr.w	sl, [sp, #32]
 8002f94:	46d1      	mov	r9, sl
 8002f96:	4652      	mov	r2, sl
 8002f98:	e7c6      	b.n	8002f28 <_dtoa_r+0x240>
 8002f9a:	3101      	adds	r1, #1
 8002f9c:	6079      	str	r1, [r7, #4]
 8002f9e:	0040      	lsls	r0, r0, #1
 8002fa0:	e7c6      	b.n	8002f30 <_dtoa_r+0x248>
 8002fa2:	bf00      	nop
 8002fa4:	f3af 8000 	nop.w
 8002fa8:	636f4361 	.word	0x636f4361
 8002fac:	3fd287a7 	.word	0x3fd287a7
 8002fb0:	8b60c8b3 	.word	0x8b60c8b3
 8002fb4:	3fc68a28 	.word	0x3fc68a28
 8002fb8:	509f79fb 	.word	0x509f79fb
 8002fbc:	3fd34413 	.word	0x3fd34413
 8002fc0:	08004c95 	.word	0x08004c95
 8002fc4:	08004cac 	.word	0x08004cac
 8002fc8:	7ff00000 	.word	0x7ff00000
 8002fcc:	08004c91 	.word	0x08004c91
 8002fd0:	08004c88 	.word	0x08004c88
 8002fd4:	08004c65 	.word	0x08004c65
 8002fd8:	08004da0 	.word	0x08004da0
 8002fdc:	08004d07 	.word	0x08004d07
 8002fe0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8002fe2:	9901      	ldr	r1, [sp, #4]
 8002fe4:	6011      	str	r1, [r2, #0]
 8002fe6:	f1b9 0f0e 	cmp.w	r9, #14
 8002fea:	d86c      	bhi.n	80030c6 <_dtoa_r+0x3de>
 8002fec:	2c00      	cmp	r4, #0
 8002fee:	d06a      	beq.n	80030c6 <_dtoa_r+0x3de>
 8002ff0:	f1bb 0f00 	cmp.w	fp, #0
 8002ff4:	f340 80a0 	ble.w	8003138 <_dtoa_r+0x450>
 8002ff8:	49c1      	ldr	r1, [pc, #772]	; (8003300 <_dtoa_r+0x618>)
 8002ffa:	f00b 020f 	and.w	r2, fp, #15
 8002ffe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8003002:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003006:	ed92 7b00 	vldr	d7, [r2]
 800300a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800300e:	f000 8087 	beq.w	8003120 <_dtoa_r+0x438>
 8003012:	4abc      	ldr	r2, [pc, #752]	; (8003304 <_dtoa_r+0x61c>)
 8003014:	ed92 6b08 	vldr	d6, [r2, #32]
 8003018:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800301c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003020:	f001 010f 	and.w	r1, r1, #15
 8003024:	2203      	movs	r2, #3
 8003026:	48b7      	ldr	r0, [pc, #732]	; (8003304 <_dtoa_r+0x61c>)
 8003028:	2900      	cmp	r1, #0
 800302a:	d17b      	bne.n	8003124 <_dtoa_r+0x43c>
 800302c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8003030:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8003034:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003038:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800303a:	2900      	cmp	r1, #0
 800303c:	f000 80a2 	beq.w	8003184 <_dtoa_r+0x49c>
 8003040:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003044:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003048:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800304c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003050:	f140 8098 	bpl.w	8003184 <_dtoa_r+0x49c>
 8003054:	f1b9 0f00 	cmp.w	r9, #0
 8003058:	f000 8094 	beq.w	8003184 <_dtoa_r+0x49c>
 800305c:	f1ba 0f00 	cmp.w	sl, #0
 8003060:	dd2f      	ble.n	80030c2 <_dtoa_r+0x3da>
 8003062:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8003066:	ee27 7b06 	vmul.f64	d7, d7, d6
 800306a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800306e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003072:	3201      	adds	r2, #1
 8003074:	4650      	mov	r0, sl
 8003076:	ed9d 6b02 	vldr	d6, [sp, #8]
 800307a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800307e:	ee07 2a90 	vmov	s15, r2
 8003082:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003086:	eea7 5b06 	vfma.f64	d5, d7, d6
 800308a:	ee15 4a90 	vmov	r4, s11
 800308e:	ec52 1b15 	vmov	r1, r2, d5
 8003092:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8003096:	2800      	cmp	r0, #0
 8003098:	d177      	bne.n	800318a <_dtoa_r+0x4a2>
 800309a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800309e:	ee36 6b47 	vsub.f64	d6, d6, d7
 80030a2:	ec42 1b17 	vmov	d7, r1, r2
 80030a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80030aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ae:	f300 8263 	bgt.w	8003578 <_dtoa_r+0x890>
 80030b2:	eeb1 7b47 	vneg.f64	d7, d7
 80030b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80030ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030be:	f100 8258 	bmi.w	8003572 <_dtoa_r+0x88a>
 80030c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80030c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80030c8:	2a00      	cmp	r2, #0
 80030ca:	f2c0 811d 	blt.w	8003308 <_dtoa_r+0x620>
 80030ce:	f1bb 0f0e 	cmp.w	fp, #14
 80030d2:	f300 8119 	bgt.w	8003308 <_dtoa_r+0x620>
 80030d6:	4b8a      	ldr	r3, [pc, #552]	; (8003300 <_dtoa_r+0x618>)
 80030d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80030dc:	ed93 6b00 	vldr	d6, [r3]
 80030e0:	9b08      	ldr	r3, [sp, #32]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f280 80b7 	bge.w	8003256 <_dtoa_r+0x56e>
 80030e8:	f1b9 0f00 	cmp.w	r9, #0
 80030ec:	f300 80b3 	bgt.w	8003256 <_dtoa_r+0x56e>
 80030f0:	f040 823f 	bne.w	8003572 <_dtoa_r+0x88a>
 80030f4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80030f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80030fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003100:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003108:	464c      	mov	r4, r9
 800310a:	464f      	mov	r7, r9
 800310c:	f280 8215 	bge.w	800353a <_dtoa_r+0x852>
 8003110:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003114:	2331      	movs	r3, #49	; 0x31
 8003116:	f808 3b01 	strb.w	r3, [r8], #1
 800311a:	f10b 0b01 	add.w	fp, fp, #1
 800311e:	e211      	b.n	8003544 <_dtoa_r+0x85c>
 8003120:	2202      	movs	r2, #2
 8003122:	e780      	b.n	8003026 <_dtoa_r+0x33e>
 8003124:	07cc      	lsls	r4, r1, #31
 8003126:	d504      	bpl.n	8003132 <_dtoa_r+0x44a>
 8003128:	ed90 6b00 	vldr	d6, [r0]
 800312c:	3201      	adds	r2, #1
 800312e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003132:	1049      	asrs	r1, r1, #1
 8003134:	3008      	adds	r0, #8
 8003136:	e777      	b.n	8003028 <_dtoa_r+0x340>
 8003138:	d022      	beq.n	8003180 <_dtoa_r+0x498>
 800313a:	f1cb 0100 	rsb	r1, fp, #0
 800313e:	4a70      	ldr	r2, [pc, #448]	; (8003300 <_dtoa_r+0x618>)
 8003140:	f001 000f 	and.w	r0, r1, #15
 8003144:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8003148:	ed92 7b00 	vldr	d7, [r2]
 800314c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8003150:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003154:	486b      	ldr	r0, [pc, #428]	; (8003304 <_dtoa_r+0x61c>)
 8003156:	1109      	asrs	r1, r1, #4
 8003158:	2400      	movs	r4, #0
 800315a:	2202      	movs	r2, #2
 800315c:	b929      	cbnz	r1, 800316a <_dtoa_r+0x482>
 800315e:	2c00      	cmp	r4, #0
 8003160:	f43f af6a 	beq.w	8003038 <_dtoa_r+0x350>
 8003164:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003168:	e766      	b.n	8003038 <_dtoa_r+0x350>
 800316a:	07cf      	lsls	r7, r1, #31
 800316c:	d505      	bpl.n	800317a <_dtoa_r+0x492>
 800316e:	ed90 6b00 	vldr	d6, [r0]
 8003172:	3201      	adds	r2, #1
 8003174:	2401      	movs	r4, #1
 8003176:	ee27 7b06 	vmul.f64	d7, d7, d6
 800317a:	1049      	asrs	r1, r1, #1
 800317c:	3008      	adds	r0, #8
 800317e:	e7ed      	b.n	800315c <_dtoa_r+0x474>
 8003180:	2202      	movs	r2, #2
 8003182:	e759      	b.n	8003038 <_dtoa_r+0x350>
 8003184:	465f      	mov	r7, fp
 8003186:	4648      	mov	r0, r9
 8003188:	e775      	b.n	8003076 <_dtoa_r+0x38e>
 800318a:	ec42 1b17 	vmov	d7, r1, r2
 800318e:	4a5c      	ldr	r2, [pc, #368]	; (8003300 <_dtoa_r+0x618>)
 8003190:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8003194:	ed12 4b02 	vldr	d4, [r2, #-8]
 8003198:	9a01      	ldr	r2, [sp, #4]
 800319a:	1814      	adds	r4, r2, r0
 800319c:	9a07      	ldr	r2, [sp, #28]
 800319e:	b352      	cbz	r2, 80031f6 <_dtoa_r+0x50e>
 80031a0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80031a4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80031a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80031ac:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80031b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80031b4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80031b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80031bc:	ee14 2a90 	vmov	r2, s9
 80031c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80031c4:	3230      	adds	r2, #48	; 0x30
 80031c6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80031ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80031ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d2:	f808 2b01 	strb.w	r2, [r8], #1
 80031d6:	d439      	bmi.n	800324c <_dtoa_r+0x564>
 80031d8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80031dc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80031e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e4:	d472      	bmi.n	80032cc <_dtoa_r+0x5e4>
 80031e6:	45a0      	cmp	r8, r4
 80031e8:	f43f af6b 	beq.w	80030c2 <_dtoa_r+0x3da>
 80031ec:	ee27 7b03 	vmul.f64	d7, d7, d3
 80031f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80031f4:	e7e0      	b.n	80031b8 <_dtoa_r+0x4d0>
 80031f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80031fa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80031fe:	4621      	mov	r1, r4
 8003200:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8003204:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8003208:	ee14 2a90 	vmov	r2, s9
 800320c:	3230      	adds	r2, #48	; 0x30
 800320e:	f808 2b01 	strb.w	r2, [r8], #1
 8003212:	45a0      	cmp	r8, r4
 8003214:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8003218:	ee36 6b45 	vsub.f64	d6, d6, d5
 800321c:	d118      	bne.n	8003250 <_dtoa_r+0x568>
 800321e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8003222:	ee37 4b05 	vadd.f64	d4, d7, d5
 8003226:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800322a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322e:	dc4d      	bgt.n	80032cc <_dtoa_r+0x5e4>
 8003230:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003234:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323c:	f57f af41 	bpl.w	80030c2 <_dtoa_r+0x3da>
 8003240:	4688      	mov	r8, r1
 8003242:	3901      	subs	r1, #1
 8003244:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8003248:	2b30      	cmp	r3, #48	; 0x30
 800324a:	d0f9      	beq.n	8003240 <_dtoa_r+0x558>
 800324c:	46bb      	mov	fp, r7
 800324e:	e02a      	b.n	80032a6 <_dtoa_r+0x5be>
 8003250:	ee26 6b03 	vmul.f64	d6, d6, d3
 8003254:	e7d6      	b.n	8003204 <_dtoa_r+0x51c>
 8003256:	ed9d 7b02 	vldr	d7, [sp, #8]
 800325a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800325e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003262:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8003266:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800326a:	ee15 3a10 	vmov	r3, s10
 800326e:	3330      	adds	r3, #48	; 0x30
 8003270:	f808 3b01 	strb.w	r3, [r8], #1
 8003274:	9b01      	ldr	r3, [sp, #4]
 8003276:	eba8 0303 	sub.w	r3, r8, r3
 800327a:	4599      	cmp	r9, r3
 800327c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8003280:	eea3 7b46 	vfms.f64	d7, d3, d6
 8003284:	d133      	bne.n	80032ee <_dtoa_r+0x606>
 8003286:	ee37 7b07 	vadd.f64	d7, d7, d7
 800328a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800328e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003292:	dc1a      	bgt.n	80032ca <_dtoa_r+0x5e2>
 8003294:	eeb4 7b46 	vcmp.f64	d7, d6
 8003298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329c:	d103      	bne.n	80032a6 <_dtoa_r+0x5be>
 800329e:	ee15 3a10 	vmov	r3, s10
 80032a2:	07d9      	lsls	r1, r3, #31
 80032a4:	d411      	bmi.n	80032ca <_dtoa_r+0x5e2>
 80032a6:	4629      	mov	r1, r5
 80032a8:	4630      	mov	r0, r6
 80032aa:	f000 fae5 	bl	8003878 <_Bfree>
 80032ae:	2300      	movs	r3, #0
 80032b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80032b2:	f888 3000 	strb.w	r3, [r8]
 80032b6:	f10b 0301 	add.w	r3, fp, #1
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f43f ad61 	beq.w	8002d86 <_dtoa_r+0x9e>
 80032c4:	f8c3 8000 	str.w	r8, [r3]
 80032c8:	e55d      	b.n	8002d86 <_dtoa_r+0x9e>
 80032ca:	465f      	mov	r7, fp
 80032cc:	4643      	mov	r3, r8
 80032ce:	4698      	mov	r8, r3
 80032d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80032d4:	2a39      	cmp	r2, #57	; 0x39
 80032d6:	d106      	bne.n	80032e6 <_dtoa_r+0x5fe>
 80032d8:	9a01      	ldr	r2, [sp, #4]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d1f7      	bne.n	80032ce <_dtoa_r+0x5e6>
 80032de:	9901      	ldr	r1, [sp, #4]
 80032e0:	2230      	movs	r2, #48	; 0x30
 80032e2:	3701      	adds	r7, #1
 80032e4:	700a      	strb	r2, [r1, #0]
 80032e6:	781a      	ldrb	r2, [r3, #0]
 80032e8:	3201      	adds	r2, #1
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	e7ae      	b.n	800324c <_dtoa_r+0x564>
 80032ee:	ee27 7b04 	vmul.f64	d7, d7, d4
 80032f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80032f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fa:	d1b2      	bne.n	8003262 <_dtoa_r+0x57a>
 80032fc:	e7d3      	b.n	80032a6 <_dtoa_r+0x5be>
 80032fe:	bf00      	nop
 8003300:	08004da0 	.word	0x08004da0
 8003304:	08004d78 	.word	0x08004d78
 8003308:	9907      	ldr	r1, [sp, #28]
 800330a:	2900      	cmp	r1, #0
 800330c:	f000 80d0 	beq.w	80034b0 <_dtoa_r+0x7c8>
 8003310:	9906      	ldr	r1, [sp, #24]
 8003312:	2901      	cmp	r1, #1
 8003314:	f300 80b4 	bgt.w	8003480 <_dtoa_r+0x798>
 8003318:	990a      	ldr	r1, [sp, #40]	; 0x28
 800331a:	2900      	cmp	r1, #0
 800331c:	f000 80ac 	beq.w	8003478 <_dtoa_r+0x790>
 8003320:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003324:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8003328:	461c      	mov	r4, r3
 800332a:	930a      	str	r3, [sp, #40]	; 0x28
 800332c:	9b04      	ldr	r3, [sp, #16]
 800332e:	4413      	add	r3, r2
 8003330:	9304      	str	r3, [sp, #16]
 8003332:	9b05      	ldr	r3, [sp, #20]
 8003334:	2101      	movs	r1, #1
 8003336:	4413      	add	r3, r2
 8003338:	4630      	mov	r0, r6
 800333a:	9305      	str	r3, [sp, #20]
 800333c:	f000 fb54 	bl	80039e8 <__i2b>
 8003340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003342:	4607      	mov	r7, r0
 8003344:	f1b8 0f00 	cmp.w	r8, #0
 8003348:	dd0d      	ble.n	8003366 <_dtoa_r+0x67e>
 800334a:	9a05      	ldr	r2, [sp, #20]
 800334c:	2a00      	cmp	r2, #0
 800334e:	dd0a      	ble.n	8003366 <_dtoa_r+0x67e>
 8003350:	4542      	cmp	r2, r8
 8003352:	9904      	ldr	r1, [sp, #16]
 8003354:	bfa8      	it	ge
 8003356:	4642      	movge	r2, r8
 8003358:	1a89      	subs	r1, r1, r2
 800335a:	9104      	str	r1, [sp, #16]
 800335c:	9905      	ldr	r1, [sp, #20]
 800335e:	eba8 0802 	sub.w	r8, r8, r2
 8003362:	1a8a      	subs	r2, r1, r2
 8003364:	9205      	str	r2, [sp, #20]
 8003366:	b303      	cbz	r3, 80033aa <_dtoa_r+0x6c2>
 8003368:	9a07      	ldr	r2, [sp, #28]
 800336a:	2a00      	cmp	r2, #0
 800336c:	f000 80a5 	beq.w	80034ba <_dtoa_r+0x7d2>
 8003370:	2c00      	cmp	r4, #0
 8003372:	dd13      	ble.n	800339c <_dtoa_r+0x6b4>
 8003374:	4639      	mov	r1, r7
 8003376:	4622      	mov	r2, r4
 8003378:	4630      	mov	r0, r6
 800337a:	930d      	str	r3, [sp, #52]	; 0x34
 800337c:	f000 fbf4 	bl	8003b68 <__pow5mult>
 8003380:	462a      	mov	r2, r5
 8003382:	4601      	mov	r1, r0
 8003384:	4607      	mov	r7, r0
 8003386:	4630      	mov	r0, r6
 8003388:	f000 fb44 	bl	8003a14 <__multiply>
 800338c:	4629      	mov	r1, r5
 800338e:	900a      	str	r0, [sp, #40]	; 0x28
 8003390:	4630      	mov	r0, r6
 8003392:	f000 fa71 	bl	8003878 <_Bfree>
 8003396:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003398:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800339a:	4615      	mov	r5, r2
 800339c:	1b1a      	subs	r2, r3, r4
 800339e:	d004      	beq.n	80033aa <_dtoa_r+0x6c2>
 80033a0:	4629      	mov	r1, r5
 80033a2:	4630      	mov	r0, r6
 80033a4:	f000 fbe0 	bl	8003b68 <__pow5mult>
 80033a8:	4605      	mov	r5, r0
 80033aa:	2101      	movs	r1, #1
 80033ac:	4630      	mov	r0, r6
 80033ae:	f000 fb1b 	bl	80039e8 <__i2b>
 80033b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	4604      	mov	r4, r0
 80033b8:	f340 8081 	ble.w	80034be <_dtoa_r+0x7d6>
 80033bc:	461a      	mov	r2, r3
 80033be:	4601      	mov	r1, r0
 80033c0:	4630      	mov	r0, r6
 80033c2:	f000 fbd1 	bl	8003b68 <__pow5mult>
 80033c6:	9b06      	ldr	r3, [sp, #24]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	4604      	mov	r4, r0
 80033cc:	dd7a      	ble.n	80034c4 <_dtoa_r+0x7dc>
 80033ce:	2300      	movs	r3, #0
 80033d0:	930a      	str	r3, [sp, #40]	; 0x28
 80033d2:	6922      	ldr	r2, [r4, #16]
 80033d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80033d8:	6910      	ldr	r0, [r2, #16]
 80033da:	f000 fab5 	bl	8003948 <__hi0bits>
 80033de:	f1c0 0020 	rsb	r0, r0, #32
 80033e2:	9b05      	ldr	r3, [sp, #20]
 80033e4:	4418      	add	r0, r3
 80033e6:	f010 001f 	ands.w	r0, r0, #31
 80033ea:	f000 808c 	beq.w	8003506 <_dtoa_r+0x81e>
 80033ee:	f1c0 0220 	rsb	r2, r0, #32
 80033f2:	2a04      	cmp	r2, #4
 80033f4:	f340 8085 	ble.w	8003502 <_dtoa_r+0x81a>
 80033f8:	f1c0 001c 	rsb	r0, r0, #28
 80033fc:	9b04      	ldr	r3, [sp, #16]
 80033fe:	4403      	add	r3, r0
 8003400:	9304      	str	r3, [sp, #16]
 8003402:	9b05      	ldr	r3, [sp, #20]
 8003404:	4403      	add	r3, r0
 8003406:	4480      	add	r8, r0
 8003408:	9305      	str	r3, [sp, #20]
 800340a:	9b04      	ldr	r3, [sp, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	dd05      	ble.n	800341c <_dtoa_r+0x734>
 8003410:	4629      	mov	r1, r5
 8003412:	461a      	mov	r2, r3
 8003414:	4630      	mov	r0, r6
 8003416:	f000 fc01 	bl	8003c1c <__lshift>
 800341a:	4605      	mov	r5, r0
 800341c:	9b05      	ldr	r3, [sp, #20]
 800341e:	2b00      	cmp	r3, #0
 8003420:	dd05      	ble.n	800342e <_dtoa_r+0x746>
 8003422:	4621      	mov	r1, r4
 8003424:	461a      	mov	r2, r3
 8003426:	4630      	mov	r0, r6
 8003428:	f000 fbf8 	bl	8003c1c <__lshift>
 800342c:	4604      	mov	r4, r0
 800342e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003430:	2b00      	cmp	r3, #0
 8003432:	d06a      	beq.n	800350a <_dtoa_r+0x822>
 8003434:	4621      	mov	r1, r4
 8003436:	4628      	mov	r0, r5
 8003438:	f000 fc60 	bl	8003cfc <__mcmp>
 800343c:	2800      	cmp	r0, #0
 800343e:	da64      	bge.n	800350a <_dtoa_r+0x822>
 8003440:	2300      	movs	r3, #0
 8003442:	4629      	mov	r1, r5
 8003444:	220a      	movs	r2, #10
 8003446:	4630      	mov	r0, r6
 8003448:	f000 fa38 	bl	80038bc <__multadd>
 800344c:	9b07      	ldr	r3, [sp, #28]
 800344e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003452:	4605      	mov	r5, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 8191 	beq.w	800377c <_dtoa_r+0xa94>
 800345a:	4639      	mov	r1, r7
 800345c:	2300      	movs	r3, #0
 800345e:	220a      	movs	r2, #10
 8003460:	4630      	mov	r0, r6
 8003462:	f000 fa2b 	bl	80038bc <__multadd>
 8003466:	f1ba 0f00 	cmp.w	sl, #0
 800346a:	4607      	mov	r7, r0
 800346c:	f300 808d 	bgt.w	800358a <_dtoa_r+0x8a2>
 8003470:	9b06      	ldr	r3, [sp, #24]
 8003472:	2b02      	cmp	r3, #2
 8003474:	dc50      	bgt.n	8003518 <_dtoa_r+0x830>
 8003476:	e088      	b.n	800358a <_dtoa_r+0x8a2>
 8003478:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800347a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800347e:	e751      	b.n	8003324 <_dtoa_r+0x63c>
 8003480:	f109 34ff 	add.w	r4, r9, #4294967295
 8003484:	42a3      	cmp	r3, r4
 8003486:	bfbf      	itttt	lt
 8003488:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800348a:	1ae3      	sublt	r3, r4, r3
 800348c:	18d2      	addlt	r2, r2, r3
 800348e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8003490:	bfb6      	itet	lt
 8003492:	4623      	movlt	r3, r4
 8003494:	1b1c      	subge	r4, r3, r4
 8003496:	2400      	movlt	r4, #0
 8003498:	f1b9 0f00 	cmp.w	r9, #0
 800349c:	bfb5      	itete	lt
 800349e:	9a04      	ldrlt	r2, [sp, #16]
 80034a0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80034a4:	eba2 0809 	sublt.w	r8, r2, r9
 80034a8:	464a      	movge	r2, r9
 80034aa:	bfb8      	it	lt
 80034ac:	2200      	movlt	r2, #0
 80034ae:	e73c      	b.n	800332a <_dtoa_r+0x642>
 80034b0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80034b4:	9f07      	ldr	r7, [sp, #28]
 80034b6:	461c      	mov	r4, r3
 80034b8:	e744      	b.n	8003344 <_dtoa_r+0x65c>
 80034ba:	461a      	mov	r2, r3
 80034bc:	e770      	b.n	80033a0 <_dtoa_r+0x6b8>
 80034be:	9b06      	ldr	r3, [sp, #24]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	dc18      	bgt.n	80034f6 <_dtoa_r+0x80e>
 80034c4:	9b02      	ldr	r3, [sp, #8]
 80034c6:	b9b3      	cbnz	r3, 80034f6 <_dtoa_r+0x80e>
 80034c8:	9b03      	ldr	r3, [sp, #12]
 80034ca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80034ce:	b9a2      	cbnz	r2, 80034fa <_dtoa_r+0x812>
 80034d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034d4:	0d12      	lsrs	r2, r2, #20
 80034d6:	0512      	lsls	r2, r2, #20
 80034d8:	b18a      	cbz	r2, 80034fe <_dtoa_r+0x816>
 80034da:	9b04      	ldr	r3, [sp, #16]
 80034dc:	3301      	adds	r3, #1
 80034de:	9304      	str	r3, [sp, #16]
 80034e0:	9b05      	ldr	r3, [sp, #20]
 80034e2:	3301      	adds	r3, #1
 80034e4:	9305      	str	r3, [sp, #20]
 80034e6:	2301      	movs	r3, #1
 80034e8:	930a      	str	r3, [sp, #40]	; 0x28
 80034ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f47f af70 	bne.w	80033d2 <_dtoa_r+0x6ea>
 80034f2:	2001      	movs	r0, #1
 80034f4:	e775      	b.n	80033e2 <_dtoa_r+0x6fa>
 80034f6:	2300      	movs	r3, #0
 80034f8:	e7f6      	b.n	80034e8 <_dtoa_r+0x800>
 80034fa:	9b02      	ldr	r3, [sp, #8]
 80034fc:	e7f4      	b.n	80034e8 <_dtoa_r+0x800>
 80034fe:	920a      	str	r2, [sp, #40]	; 0x28
 8003500:	e7f3      	b.n	80034ea <_dtoa_r+0x802>
 8003502:	d082      	beq.n	800340a <_dtoa_r+0x722>
 8003504:	4610      	mov	r0, r2
 8003506:	301c      	adds	r0, #28
 8003508:	e778      	b.n	80033fc <_dtoa_r+0x714>
 800350a:	f1b9 0f00 	cmp.w	r9, #0
 800350e:	dc37      	bgt.n	8003580 <_dtoa_r+0x898>
 8003510:	9b06      	ldr	r3, [sp, #24]
 8003512:	2b02      	cmp	r3, #2
 8003514:	dd34      	ble.n	8003580 <_dtoa_r+0x898>
 8003516:	46ca      	mov	sl, r9
 8003518:	f1ba 0f00 	cmp.w	sl, #0
 800351c:	d10d      	bne.n	800353a <_dtoa_r+0x852>
 800351e:	4621      	mov	r1, r4
 8003520:	4653      	mov	r3, sl
 8003522:	2205      	movs	r2, #5
 8003524:	4630      	mov	r0, r6
 8003526:	f000 f9c9 	bl	80038bc <__multadd>
 800352a:	4601      	mov	r1, r0
 800352c:	4604      	mov	r4, r0
 800352e:	4628      	mov	r0, r5
 8003530:	f000 fbe4 	bl	8003cfc <__mcmp>
 8003534:	2800      	cmp	r0, #0
 8003536:	f73f adeb 	bgt.w	8003110 <_dtoa_r+0x428>
 800353a:	9b08      	ldr	r3, [sp, #32]
 800353c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003540:	ea6f 0b03 	mvn.w	fp, r3
 8003544:	f04f 0900 	mov.w	r9, #0
 8003548:	4621      	mov	r1, r4
 800354a:	4630      	mov	r0, r6
 800354c:	f000 f994 	bl	8003878 <_Bfree>
 8003550:	2f00      	cmp	r7, #0
 8003552:	f43f aea8 	beq.w	80032a6 <_dtoa_r+0x5be>
 8003556:	f1b9 0f00 	cmp.w	r9, #0
 800355a:	d005      	beq.n	8003568 <_dtoa_r+0x880>
 800355c:	45b9      	cmp	r9, r7
 800355e:	d003      	beq.n	8003568 <_dtoa_r+0x880>
 8003560:	4649      	mov	r1, r9
 8003562:	4630      	mov	r0, r6
 8003564:	f000 f988 	bl	8003878 <_Bfree>
 8003568:	4639      	mov	r1, r7
 800356a:	4630      	mov	r0, r6
 800356c:	f000 f984 	bl	8003878 <_Bfree>
 8003570:	e699      	b.n	80032a6 <_dtoa_r+0x5be>
 8003572:	2400      	movs	r4, #0
 8003574:	4627      	mov	r7, r4
 8003576:	e7e0      	b.n	800353a <_dtoa_r+0x852>
 8003578:	46bb      	mov	fp, r7
 800357a:	4604      	mov	r4, r0
 800357c:	4607      	mov	r7, r0
 800357e:	e5c7      	b.n	8003110 <_dtoa_r+0x428>
 8003580:	9b07      	ldr	r3, [sp, #28]
 8003582:	46ca      	mov	sl, r9
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 8100 	beq.w	800378a <_dtoa_r+0xaa2>
 800358a:	f1b8 0f00 	cmp.w	r8, #0
 800358e:	dd05      	ble.n	800359c <_dtoa_r+0x8b4>
 8003590:	4639      	mov	r1, r7
 8003592:	4642      	mov	r2, r8
 8003594:	4630      	mov	r0, r6
 8003596:	f000 fb41 	bl	8003c1c <__lshift>
 800359a:	4607      	mov	r7, r0
 800359c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d05d      	beq.n	800365e <_dtoa_r+0x976>
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4630      	mov	r0, r6
 80035a6:	f000 f927 	bl	80037f8 <_Balloc>
 80035aa:	4680      	mov	r8, r0
 80035ac:	b928      	cbnz	r0, 80035ba <_dtoa_r+0x8d2>
 80035ae:	4b82      	ldr	r3, [pc, #520]	; (80037b8 <_dtoa_r+0xad0>)
 80035b0:	4602      	mov	r2, r0
 80035b2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80035b6:	f7ff bbaf 	b.w	8002d18 <_dtoa_r+0x30>
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	3202      	adds	r2, #2
 80035be:	0092      	lsls	r2, r2, #2
 80035c0:	f107 010c 	add.w	r1, r7, #12
 80035c4:	300c      	adds	r0, #12
 80035c6:	f000 f909 	bl	80037dc <memcpy>
 80035ca:	2201      	movs	r2, #1
 80035cc:	4641      	mov	r1, r8
 80035ce:	4630      	mov	r0, r6
 80035d0:	f000 fb24 	bl	8003c1c <__lshift>
 80035d4:	9b01      	ldr	r3, [sp, #4]
 80035d6:	3301      	adds	r3, #1
 80035d8:	9304      	str	r3, [sp, #16]
 80035da:	9b01      	ldr	r3, [sp, #4]
 80035dc:	4453      	add	r3, sl
 80035de:	9308      	str	r3, [sp, #32]
 80035e0:	9b02      	ldr	r3, [sp, #8]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	46b9      	mov	r9, r7
 80035e8:	9307      	str	r3, [sp, #28]
 80035ea:	4607      	mov	r7, r0
 80035ec:	9b04      	ldr	r3, [sp, #16]
 80035ee:	4621      	mov	r1, r4
 80035f0:	3b01      	subs	r3, #1
 80035f2:	4628      	mov	r0, r5
 80035f4:	9302      	str	r3, [sp, #8]
 80035f6:	f7ff fae9 	bl	8002bcc <quorem>
 80035fa:	4603      	mov	r3, r0
 80035fc:	3330      	adds	r3, #48	; 0x30
 80035fe:	9005      	str	r0, [sp, #20]
 8003600:	4649      	mov	r1, r9
 8003602:	4628      	mov	r0, r5
 8003604:	9309      	str	r3, [sp, #36]	; 0x24
 8003606:	f000 fb79 	bl	8003cfc <__mcmp>
 800360a:	463a      	mov	r2, r7
 800360c:	4682      	mov	sl, r0
 800360e:	4621      	mov	r1, r4
 8003610:	4630      	mov	r0, r6
 8003612:	f000 fb8f 	bl	8003d34 <__mdiff>
 8003616:	68c2      	ldr	r2, [r0, #12]
 8003618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800361a:	4680      	mov	r8, r0
 800361c:	bb0a      	cbnz	r2, 8003662 <_dtoa_r+0x97a>
 800361e:	4601      	mov	r1, r0
 8003620:	4628      	mov	r0, r5
 8003622:	f000 fb6b 	bl	8003cfc <__mcmp>
 8003626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003628:	4602      	mov	r2, r0
 800362a:	4641      	mov	r1, r8
 800362c:	4630      	mov	r0, r6
 800362e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8003632:	f000 f921 	bl	8003878 <_Bfree>
 8003636:	9b06      	ldr	r3, [sp, #24]
 8003638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800363a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800363e:	ea43 0102 	orr.w	r1, r3, r2
 8003642:	9b07      	ldr	r3, [sp, #28]
 8003644:	430b      	orrs	r3, r1
 8003646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003648:	d10d      	bne.n	8003666 <_dtoa_r+0x97e>
 800364a:	2b39      	cmp	r3, #57	; 0x39
 800364c:	d029      	beq.n	80036a2 <_dtoa_r+0x9ba>
 800364e:	f1ba 0f00 	cmp.w	sl, #0
 8003652:	dd01      	ble.n	8003658 <_dtoa_r+0x970>
 8003654:	9b05      	ldr	r3, [sp, #20]
 8003656:	3331      	adds	r3, #49	; 0x31
 8003658:	9a02      	ldr	r2, [sp, #8]
 800365a:	7013      	strb	r3, [r2, #0]
 800365c:	e774      	b.n	8003548 <_dtoa_r+0x860>
 800365e:	4638      	mov	r0, r7
 8003660:	e7b8      	b.n	80035d4 <_dtoa_r+0x8ec>
 8003662:	2201      	movs	r2, #1
 8003664:	e7e1      	b.n	800362a <_dtoa_r+0x942>
 8003666:	f1ba 0f00 	cmp.w	sl, #0
 800366a:	db06      	blt.n	800367a <_dtoa_r+0x992>
 800366c:	9906      	ldr	r1, [sp, #24]
 800366e:	ea41 0a0a 	orr.w	sl, r1, sl
 8003672:	9907      	ldr	r1, [sp, #28]
 8003674:	ea5a 0101 	orrs.w	r1, sl, r1
 8003678:	d120      	bne.n	80036bc <_dtoa_r+0x9d4>
 800367a:	2a00      	cmp	r2, #0
 800367c:	ddec      	ble.n	8003658 <_dtoa_r+0x970>
 800367e:	4629      	mov	r1, r5
 8003680:	2201      	movs	r2, #1
 8003682:	4630      	mov	r0, r6
 8003684:	9304      	str	r3, [sp, #16]
 8003686:	f000 fac9 	bl	8003c1c <__lshift>
 800368a:	4621      	mov	r1, r4
 800368c:	4605      	mov	r5, r0
 800368e:	f000 fb35 	bl	8003cfc <__mcmp>
 8003692:	2800      	cmp	r0, #0
 8003694:	9b04      	ldr	r3, [sp, #16]
 8003696:	dc02      	bgt.n	800369e <_dtoa_r+0x9b6>
 8003698:	d1de      	bne.n	8003658 <_dtoa_r+0x970>
 800369a:	07da      	lsls	r2, r3, #31
 800369c:	d5dc      	bpl.n	8003658 <_dtoa_r+0x970>
 800369e:	2b39      	cmp	r3, #57	; 0x39
 80036a0:	d1d8      	bne.n	8003654 <_dtoa_r+0x96c>
 80036a2:	9a02      	ldr	r2, [sp, #8]
 80036a4:	2339      	movs	r3, #57	; 0x39
 80036a6:	7013      	strb	r3, [r2, #0]
 80036a8:	4643      	mov	r3, r8
 80036aa:	4698      	mov	r8, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80036b2:	2a39      	cmp	r2, #57	; 0x39
 80036b4:	d051      	beq.n	800375a <_dtoa_r+0xa72>
 80036b6:	3201      	adds	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
 80036ba:	e745      	b.n	8003548 <_dtoa_r+0x860>
 80036bc:	2a00      	cmp	r2, #0
 80036be:	dd03      	ble.n	80036c8 <_dtoa_r+0x9e0>
 80036c0:	2b39      	cmp	r3, #57	; 0x39
 80036c2:	d0ee      	beq.n	80036a2 <_dtoa_r+0x9ba>
 80036c4:	3301      	adds	r3, #1
 80036c6:	e7c7      	b.n	8003658 <_dtoa_r+0x970>
 80036c8:	9a04      	ldr	r2, [sp, #16]
 80036ca:	9908      	ldr	r1, [sp, #32]
 80036cc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80036d0:	428a      	cmp	r2, r1
 80036d2:	d02b      	beq.n	800372c <_dtoa_r+0xa44>
 80036d4:	4629      	mov	r1, r5
 80036d6:	2300      	movs	r3, #0
 80036d8:	220a      	movs	r2, #10
 80036da:	4630      	mov	r0, r6
 80036dc:	f000 f8ee 	bl	80038bc <__multadd>
 80036e0:	45b9      	cmp	r9, r7
 80036e2:	4605      	mov	r5, r0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	f04f 020a 	mov.w	r2, #10
 80036ec:	4649      	mov	r1, r9
 80036ee:	4630      	mov	r0, r6
 80036f0:	d107      	bne.n	8003702 <_dtoa_r+0xa1a>
 80036f2:	f000 f8e3 	bl	80038bc <__multadd>
 80036f6:	4681      	mov	r9, r0
 80036f8:	4607      	mov	r7, r0
 80036fa:	9b04      	ldr	r3, [sp, #16]
 80036fc:	3301      	adds	r3, #1
 80036fe:	9304      	str	r3, [sp, #16]
 8003700:	e774      	b.n	80035ec <_dtoa_r+0x904>
 8003702:	f000 f8db 	bl	80038bc <__multadd>
 8003706:	4639      	mov	r1, r7
 8003708:	4681      	mov	r9, r0
 800370a:	2300      	movs	r3, #0
 800370c:	220a      	movs	r2, #10
 800370e:	4630      	mov	r0, r6
 8003710:	f000 f8d4 	bl	80038bc <__multadd>
 8003714:	4607      	mov	r7, r0
 8003716:	e7f0      	b.n	80036fa <_dtoa_r+0xa12>
 8003718:	f1ba 0f00 	cmp.w	sl, #0
 800371c:	9a01      	ldr	r2, [sp, #4]
 800371e:	bfcc      	ite	gt
 8003720:	46d0      	movgt	r8, sl
 8003722:	f04f 0801 	movle.w	r8, #1
 8003726:	4490      	add	r8, r2
 8003728:	f04f 0900 	mov.w	r9, #0
 800372c:	4629      	mov	r1, r5
 800372e:	2201      	movs	r2, #1
 8003730:	4630      	mov	r0, r6
 8003732:	9302      	str	r3, [sp, #8]
 8003734:	f000 fa72 	bl	8003c1c <__lshift>
 8003738:	4621      	mov	r1, r4
 800373a:	4605      	mov	r5, r0
 800373c:	f000 fade 	bl	8003cfc <__mcmp>
 8003740:	2800      	cmp	r0, #0
 8003742:	dcb1      	bgt.n	80036a8 <_dtoa_r+0x9c0>
 8003744:	d102      	bne.n	800374c <_dtoa_r+0xa64>
 8003746:	9b02      	ldr	r3, [sp, #8]
 8003748:	07db      	lsls	r3, r3, #31
 800374a:	d4ad      	bmi.n	80036a8 <_dtoa_r+0x9c0>
 800374c:	4643      	mov	r3, r8
 800374e:	4698      	mov	r8, r3
 8003750:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003754:	2a30      	cmp	r2, #48	; 0x30
 8003756:	d0fa      	beq.n	800374e <_dtoa_r+0xa66>
 8003758:	e6f6      	b.n	8003548 <_dtoa_r+0x860>
 800375a:	9a01      	ldr	r2, [sp, #4]
 800375c:	429a      	cmp	r2, r3
 800375e:	d1a4      	bne.n	80036aa <_dtoa_r+0x9c2>
 8003760:	f10b 0b01 	add.w	fp, fp, #1
 8003764:	2331      	movs	r3, #49	; 0x31
 8003766:	e778      	b.n	800365a <_dtoa_r+0x972>
 8003768:	4b14      	ldr	r3, [pc, #80]	; (80037bc <_dtoa_r+0xad4>)
 800376a:	f7ff bb27 	b.w	8002dbc <_dtoa_r+0xd4>
 800376e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003770:	2b00      	cmp	r3, #0
 8003772:	f47f ab03 	bne.w	8002d7c <_dtoa_r+0x94>
 8003776:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <_dtoa_r+0xad8>)
 8003778:	f7ff bb20 	b.w	8002dbc <_dtoa_r+0xd4>
 800377c:	f1ba 0f00 	cmp.w	sl, #0
 8003780:	dc03      	bgt.n	800378a <_dtoa_r+0xaa2>
 8003782:	9b06      	ldr	r3, [sp, #24]
 8003784:	2b02      	cmp	r3, #2
 8003786:	f73f aec7 	bgt.w	8003518 <_dtoa_r+0x830>
 800378a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800378e:	4621      	mov	r1, r4
 8003790:	4628      	mov	r0, r5
 8003792:	f7ff fa1b 	bl	8002bcc <quorem>
 8003796:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800379a:	f808 3b01 	strb.w	r3, [r8], #1
 800379e:	9a01      	ldr	r2, [sp, #4]
 80037a0:	eba8 0202 	sub.w	r2, r8, r2
 80037a4:	4592      	cmp	sl, r2
 80037a6:	ddb7      	ble.n	8003718 <_dtoa_r+0xa30>
 80037a8:	4629      	mov	r1, r5
 80037aa:	2300      	movs	r3, #0
 80037ac:	220a      	movs	r2, #10
 80037ae:	4630      	mov	r0, r6
 80037b0:	f000 f884 	bl	80038bc <__multadd>
 80037b4:	4605      	mov	r5, r0
 80037b6:	e7ea      	b.n	800378e <_dtoa_r+0xaa6>
 80037b8:	08004d07 	.word	0x08004d07
 80037bc:	08004c64 	.word	0x08004c64
 80037c0:	08004c88 	.word	0x08004c88

080037c4 <_localeconv_r>:
 80037c4:	4800      	ldr	r0, [pc, #0]	; (80037c8 <_localeconv_r+0x4>)
 80037c6:	4770      	bx	lr
 80037c8:	20000160 	.word	0x20000160

080037cc <malloc>:
 80037cc:	4b02      	ldr	r3, [pc, #8]	; (80037d8 <malloc+0xc>)
 80037ce:	4601      	mov	r1, r0
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	f000 bc17 	b.w	8004004 <_malloc_r>
 80037d6:	bf00      	nop
 80037d8:	2000000c 	.word	0x2000000c

080037dc <memcpy>:
 80037dc:	440a      	add	r2, r1
 80037de:	4291      	cmp	r1, r2
 80037e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80037e4:	d100      	bne.n	80037e8 <memcpy+0xc>
 80037e6:	4770      	bx	lr
 80037e8:	b510      	push	{r4, lr}
 80037ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037f2:	4291      	cmp	r1, r2
 80037f4:	d1f9      	bne.n	80037ea <memcpy+0xe>
 80037f6:	bd10      	pop	{r4, pc}

080037f8 <_Balloc>:
 80037f8:	b570      	push	{r4, r5, r6, lr}
 80037fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80037fc:	4604      	mov	r4, r0
 80037fe:	460d      	mov	r5, r1
 8003800:	b976      	cbnz	r6, 8003820 <_Balloc+0x28>
 8003802:	2010      	movs	r0, #16
 8003804:	f7ff ffe2 	bl	80037cc <malloc>
 8003808:	4602      	mov	r2, r0
 800380a:	6260      	str	r0, [r4, #36]	; 0x24
 800380c:	b920      	cbnz	r0, 8003818 <_Balloc+0x20>
 800380e:	4b18      	ldr	r3, [pc, #96]	; (8003870 <_Balloc+0x78>)
 8003810:	4818      	ldr	r0, [pc, #96]	; (8003874 <_Balloc+0x7c>)
 8003812:	2166      	movs	r1, #102	; 0x66
 8003814:	f000 fc7a 	bl	800410c <__assert_func>
 8003818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800381c:	6006      	str	r6, [r0, #0]
 800381e:	60c6      	str	r6, [r0, #12]
 8003820:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003822:	68f3      	ldr	r3, [r6, #12]
 8003824:	b183      	cbz	r3, 8003848 <_Balloc+0x50>
 8003826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800382e:	b9b8      	cbnz	r0, 8003860 <_Balloc+0x68>
 8003830:	2101      	movs	r1, #1
 8003832:	fa01 f605 	lsl.w	r6, r1, r5
 8003836:	1d72      	adds	r2, r6, #5
 8003838:	0092      	lsls	r2, r2, #2
 800383a:	4620      	mov	r0, r4
 800383c:	f000 fb60 	bl	8003f00 <_calloc_r>
 8003840:	b160      	cbz	r0, 800385c <_Balloc+0x64>
 8003842:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003846:	e00e      	b.n	8003866 <_Balloc+0x6e>
 8003848:	2221      	movs	r2, #33	; 0x21
 800384a:	2104      	movs	r1, #4
 800384c:	4620      	mov	r0, r4
 800384e:	f000 fb57 	bl	8003f00 <_calloc_r>
 8003852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003854:	60f0      	str	r0, [r6, #12]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e4      	bne.n	8003826 <_Balloc+0x2e>
 800385c:	2000      	movs	r0, #0
 800385e:	bd70      	pop	{r4, r5, r6, pc}
 8003860:	6802      	ldr	r2, [r0, #0]
 8003862:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003866:	2300      	movs	r3, #0
 8003868:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800386c:	e7f7      	b.n	800385e <_Balloc+0x66>
 800386e:	bf00      	nop
 8003870:	08004c95 	.word	0x08004c95
 8003874:	08004d18 	.word	0x08004d18

08003878 <_Bfree>:
 8003878:	b570      	push	{r4, r5, r6, lr}
 800387a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800387c:	4605      	mov	r5, r0
 800387e:	460c      	mov	r4, r1
 8003880:	b976      	cbnz	r6, 80038a0 <_Bfree+0x28>
 8003882:	2010      	movs	r0, #16
 8003884:	f7ff ffa2 	bl	80037cc <malloc>
 8003888:	4602      	mov	r2, r0
 800388a:	6268      	str	r0, [r5, #36]	; 0x24
 800388c:	b920      	cbnz	r0, 8003898 <_Bfree+0x20>
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <_Bfree+0x3c>)
 8003890:	4809      	ldr	r0, [pc, #36]	; (80038b8 <_Bfree+0x40>)
 8003892:	218a      	movs	r1, #138	; 0x8a
 8003894:	f000 fc3a 	bl	800410c <__assert_func>
 8003898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800389c:	6006      	str	r6, [r0, #0]
 800389e:	60c6      	str	r6, [r0, #12]
 80038a0:	b13c      	cbz	r4, 80038b2 <_Bfree+0x3a>
 80038a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80038a4:	6862      	ldr	r2, [r4, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80038ac:	6021      	str	r1, [r4, #0]
 80038ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80038b2:	bd70      	pop	{r4, r5, r6, pc}
 80038b4:	08004c95 	.word	0x08004c95
 80038b8:	08004d18 	.word	0x08004d18

080038bc <__multadd>:
 80038bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038c0:	690d      	ldr	r5, [r1, #16]
 80038c2:	4607      	mov	r7, r0
 80038c4:	460c      	mov	r4, r1
 80038c6:	461e      	mov	r6, r3
 80038c8:	f101 0c14 	add.w	ip, r1, #20
 80038cc:	2000      	movs	r0, #0
 80038ce:	f8dc 3000 	ldr.w	r3, [ip]
 80038d2:	b299      	uxth	r1, r3
 80038d4:	fb02 6101 	mla	r1, r2, r1, r6
 80038d8:	0c1e      	lsrs	r6, r3, #16
 80038da:	0c0b      	lsrs	r3, r1, #16
 80038dc:	fb02 3306 	mla	r3, r2, r6, r3
 80038e0:	b289      	uxth	r1, r1
 80038e2:	3001      	adds	r0, #1
 80038e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80038e8:	4285      	cmp	r5, r0
 80038ea:	f84c 1b04 	str.w	r1, [ip], #4
 80038ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80038f2:	dcec      	bgt.n	80038ce <__multadd+0x12>
 80038f4:	b30e      	cbz	r6, 800393a <__multadd+0x7e>
 80038f6:	68a3      	ldr	r3, [r4, #8]
 80038f8:	42ab      	cmp	r3, r5
 80038fa:	dc19      	bgt.n	8003930 <__multadd+0x74>
 80038fc:	6861      	ldr	r1, [r4, #4]
 80038fe:	4638      	mov	r0, r7
 8003900:	3101      	adds	r1, #1
 8003902:	f7ff ff79 	bl	80037f8 <_Balloc>
 8003906:	4680      	mov	r8, r0
 8003908:	b928      	cbnz	r0, 8003916 <__multadd+0x5a>
 800390a:	4602      	mov	r2, r0
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <__multadd+0x84>)
 800390e:	480d      	ldr	r0, [pc, #52]	; (8003944 <__multadd+0x88>)
 8003910:	21b5      	movs	r1, #181	; 0xb5
 8003912:	f000 fbfb 	bl	800410c <__assert_func>
 8003916:	6922      	ldr	r2, [r4, #16]
 8003918:	3202      	adds	r2, #2
 800391a:	f104 010c 	add.w	r1, r4, #12
 800391e:	0092      	lsls	r2, r2, #2
 8003920:	300c      	adds	r0, #12
 8003922:	f7ff ff5b 	bl	80037dc <memcpy>
 8003926:	4621      	mov	r1, r4
 8003928:	4638      	mov	r0, r7
 800392a:	f7ff ffa5 	bl	8003878 <_Bfree>
 800392e:	4644      	mov	r4, r8
 8003930:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003934:	3501      	adds	r5, #1
 8003936:	615e      	str	r6, [r3, #20]
 8003938:	6125      	str	r5, [r4, #16]
 800393a:	4620      	mov	r0, r4
 800393c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003940:	08004d07 	.word	0x08004d07
 8003944:	08004d18 	.word	0x08004d18

08003948 <__hi0bits>:
 8003948:	0c03      	lsrs	r3, r0, #16
 800394a:	041b      	lsls	r3, r3, #16
 800394c:	b9d3      	cbnz	r3, 8003984 <__hi0bits+0x3c>
 800394e:	0400      	lsls	r0, r0, #16
 8003950:	2310      	movs	r3, #16
 8003952:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003956:	bf04      	itt	eq
 8003958:	0200      	lsleq	r0, r0, #8
 800395a:	3308      	addeq	r3, #8
 800395c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003960:	bf04      	itt	eq
 8003962:	0100      	lsleq	r0, r0, #4
 8003964:	3304      	addeq	r3, #4
 8003966:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800396a:	bf04      	itt	eq
 800396c:	0080      	lsleq	r0, r0, #2
 800396e:	3302      	addeq	r3, #2
 8003970:	2800      	cmp	r0, #0
 8003972:	db05      	blt.n	8003980 <__hi0bits+0x38>
 8003974:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003978:	f103 0301 	add.w	r3, r3, #1
 800397c:	bf08      	it	eq
 800397e:	2320      	moveq	r3, #32
 8003980:	4618      	mov	r0, r3
 8003982:	4770      	bx	lr
 8003984:	2300      	movs	r3, #0
 8003986:	e7e4      	b.n	8003952 <__hi0bits+0xa>

08003988 <__lo0bits>:
 8003988:	6803      	ldr	r3, [r0, #0]
 800398a:	f013 0207 	ands.w	r2, r3, #7
 800398e:	4601      	mov	r1, r0
 8003990:	d00b      	beq.n	80039aa <__lo0bits+0x22>
 8003992:	07da      	lsls	r2, r3, #31
 8003994:	d423      	bmi.n	80039de <__lo0bits+0x56>
 8003996:	0798      	lsls	r0, r3, #30
 8003998:	bf49      	itett	mi
 800399a:	085b      	lsrmi	r3, r3, #1
 800399c:	089b      	lsrpl	r3, r3, #2
 800399e:	2001      	movmi	r0, #1
 80039a0:	600b      	strmi	r3, [r1, #0]
 80039a2:	bf5c      	itt	pl
 80039a4:	600b      	strpl	r3, [r1, #0]
 80039a6:	2002      	movpl	r0, #2
 80039a8:	4770      	bx	lr
 80039aa:	b298      	uxth	r0, r3
 80039ac:	b9a8      	cbnz	r0, 80039da <__lo0bits+0x52>
 80039ae:	0c1b      	lsrs	r3, r3, #16
 80039b0:	2010      	movs	r0, #16
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	b90a      	cbnz	r2, 80039ba <__lo0bits+0x32>
 80039b6:	3008      	adds	r0, #8
 80039b8:	0a1b      	lsrs	r3, r3, #8
 80039ba:	071a      	lsls	r2, r3, #28
 80039bc:	bf04      	itt	eq
 80039be:	091b      	lsreq	r3, r3, #4
 80039c0:	3004      	addeq	r0, #4
 80039c2:	079a      	lsls	r2, r3, #30
 80039c4:	bf04      	itt	eq
 80039c6:	089b      	lsreq	r3, r3, #2
 80039c8:	3002      	addeq	r0, #2
 80039ca:	07da      	lsls	r2, r3, #31
 80039cc:	d403      	bmi.n	80039d6 <__lo0bits+0x4e>
 80039ce:	085b      	lsrs	r3, r3, #1
 80039d0:	f100 0001 	add.w	r0, r0, #1
 80039d4:	d005      	beq.n	80039e2 <__lo0bits+0x5a>
 80039d6:	600b      	str	r3, [r1, #0]
 80039d8:	4770      	bx	lr
 80039da:	4610      	mov	r0, r2
 80039dc:	e7e9      	b.n	80039b2 <__lo0bits+0x2a>
 80039de:	2000      	movs	r0, #0
 80039e0:	4770      	bx	lr
 80039e2:	2020      	movs	r0, #32
 80039e4:	4770      	bx	lr
	...

080039e8 <__i2b>:
 80039e8:	b510      	push	{r4, lr}
 80039ea:	460c      	mov	r4, r1
 80039ec:	2101      	movs	r1, #1
 80039ee:	f7ff ff03 	bl	80037f8 <_Balloc>
 80039f2:	4602      	mov	r2, r0
 80039f4:	b928      	cbnz	r0, 8003a02 <__i2b+0x1a>
 80039f6:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <__i2b+0x24>)
 80039f8:	4805      	ldr	r0, [pc, #20]	; (8003a10 <__i2b+0x28>)
 80039fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80039fe:	f000 fb85 	bl	800410c <__assert_func>
 8003a02:	2301      	movs	r3, #1
 8003a04:	6144      	str	r4, [r0, #20]
 8003a06:	6103      	str	r3, [r0, #16]
 8003a08:	bd10      	pop	{r4, pc}
 8003a0a:	bf00      	nop
 8003a0c:	08004d07 	.word	0x08004d07
 8003a10:	08004d18 	.word	0x08004d18

08003a14 <__multiply>:
 8003a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a18:	4691      	mov	r9, r2
 8003a1a:	690a      	ldr	r2, [r1, #16]
 8003a1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	bfb8      	it	lt
 8003a24:	460b      	movlt	r3, r1
 8003a26:	460c      	mov	r4, r1
 8003a28:	bfbc      	itt	lt
 8003a2a:	464c      	movlt	r4, r9
 8003a2c:	4699      	movlt	r9, r3
 8003a2e:	6927      	ldr	r7, [r4, #16]
 8003a30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003a34:	68a3      	ldr	r3, [r4, #8]
 8003a36:	6861      	ldr	r1, [r4, #4]
 8003a38:	eb07 060a 	add.w	r6, r7, sl
 8003a3c:	42b3      	cmp	r3, r6
 8003a3e:	b085      	sub	sp, #20
 8003a40:	bfb8      	it	lt
 8003a42:	3101      	addlt	r1, #1
 8003a44:	f7ff fed8 	bl	80037f8 <_Balloc>
 8003a48:	b930      	cbnz	r0, 8003a58 <__multiply+0x44>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	4b44      	ldr	r3, [pc, #272]	; (8003b60 <__multiply+0x14c>)
 8003a4e:	4845      	ldr	r0, [pc, #276]	; (8003b64 <__multiply+0x150>)
 8003a50:	f240 115d 	movw	r1, #349	; 0x15d
 8003a54:	f000 fb5a 	bl	800410c <__assert_func>
 8003a58:	f100 0514 	add.w	r5, r0, #20
 8003a5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003a60:	462b      	mov	r3, r5
 8003a62:	2200      	movs	r2, #0
 8003a64:	4543      	cmp	r3, r8
 8003a66:	d321      	bcc.n	8003aac <__multiply+0x98>
 8003a68:	f104 0314 	add.w	r3, r4, #20
 8003a6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003a70:	f109 0314 	add.w	r3, r9, #20
 8003a74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003a78:	9202      	str	r2, [sp, #8]
 8003a7a:	1b3a      	subs	r2, r7, r4
 8003a7c:	3a15      	subs	r2, #21
 8003a7e:	f022 0203 	bic.w	r2, r2, #3
 8003a82:	3204      	adds	r2, #4
 8003a84:	f104 0115 	add.w	r1, r4, #21
 8003a88:	428f      	cmp	r7, r1
 8003a8a:	bf38      	it	cc
 8003a8c:	2204      	movcc	r2, #4
 8003a8e:	9201      	str	r2, [sp, #4]
 8003a90:	9a02      	ldr	r2, [sp, #8]
 8003a92:	9303      	str	r3, [sp, #12]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d80c      	bhi.n	8003ab2 <__multiply+0x9e>
 8003a98:	2e00      	cmp	r6, #0
 8003a9a:	dd03      	ble.n	8003aa4 <__multiply+0x90>
 8003a9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d05a      	beq.n	8003b5a <__multiply+0x146>
 8003aa4:	6106      	str	r6, [r0, #16]
 8003aa6:	b005      	add	sp, #20
 8003aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aac:	f843 2b04 	str.w	r2, [r3], #4
 8003ab0:	e7d8      	b.n	8003a64 <__multiply+0x50>
 8003ab2:	f8b3 a000 	ldrh.w	sl, [r3]
 8003ab6:	f1ba 0f00 	cmp.w	sl, #0
 8003aba:	d024      	beq.n	8003b06 <__multiply+0xf2>
 8003abc:	f104 0e14 	add.w	lr, r4, #20
 8003ac0:	46a9      	mov	r9, r5
 8003ac2:	f04f 0c00 	mov.w	ip, #0
 8003ac6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003aca:	f8d9 1000 	ldr.w	r1, [r9]
 8003ace:	fa1f fb82 	uxth.w	fp, r2
 8003ad2:	b289      	uxth	r1, r1
 8003ad4:	fb0a 110b 	mla	r1, sl, fp, r1
 8003ad8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8003adc:	f8d9 2000 	ldr.w	r2, [r9]
 8003ae0:	4461      	add	r1, ip
 8003ae2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003ae6:	fb0a c20b 	mla	r2, sl, fp, ip
 8003aea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003aee:	b289      	uxth	r1, r1
 8003af0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003af4:	4577      	cmp	r7, lr
 8003af6:	f849 1b04 	str.w	r1, [r9], #4
 8003afa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003afe:	d8e2      	bhi.n	8003ac6 <__multiply+0xb2>
 8003b00:	9a01      	ldr	r2, [sp, #4]
 8003b02:	f845 c002 	str.w	ip, [r5, r2]
 8003b06:	9a03      	ldr	r2, [sp, #12]
 8003b08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	f1b9 0f00 	cmp.w	r9, #0
 8003b12:	d020      	beq.n	8003b56 <__multiply+0x142>
 8003b14:	6829      	ldr	r1, [r5, #0]
 8003b16:	f104 0c14 	add.w	ip, r4, #20
 8003b1a:	46ae      	mov	lr, r5
 8003b1c:	f04f 0a00 	mov.w	sl, #0
 8003b20:	f8bc b000 	ldrh.w	fp, [ip]
 8003b24:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003b28:	fb09 220b 	mla	r2, r9, fp, r2
 8003b2c:	4492      	add	sl, r2
 8003b2e:	b289      	uxth	r1, r1
 8003b30:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8003b34:	f84e 1b04 	str.w	r1, [lr], #4
 8003b38:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003b3c:	f8be 1000 	ldrh.w	r1, [lr]
 8003b40:	0c12      	lsrs	r2, r2, #16
 8003b42:	fb09 1102 	mla	r1, r9, r2, r1
 8003b46:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8003b4a:	4567      	cmp	r7, ip
 8003b4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003b50:	d8e6      	bhi.n	8003b20 <__multiply+0x10c>
 8003b52:	9a01      	ldr	r2, [sp, #4]
 8003b54:	50a9      	str	r1, [r5, r2]
 8003b56:	3504      	adds	r5, #4
 8003b58:	e79a      	b.n	8003a90 <__multiply+0x7c>
 8003b5a:	3e01      	subs	r6, #1
 8003b5c:	e79c      	b.n	8003a98 <__multiply+0x84>
 8003b5e:	bf00      	nop
 8003b60:	08004d07 	.word	0x08004d07
 8003b64:	08004d18 	.word	0x08004d18

08003b68 <__pow5mult>:
 8003b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b6c:	4615      	mov	r5, r2
 8003b6e:	f012 0203 	ands.w	r2, r2, #3
 8003b72:	4606      	mov	r6, r0
 8003b74:	460f      	mov	r7, r1
 8003b76:	d007      	beq.n	8003b88 <__pow5mult+0x20>
 8003b78:	4c25      	ldr	r4, [pc, #148]	; (8003c10 <__pow5mult+0xa8>)
 8003b7a:	3a01      	subs	r2, #1
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003b82:	f7ff fe9b 	bl	80038bc <__multadd>
 8003b86:	4607      	mov	r7, r0
 8003b88:	10ad      	asrs	r5, r5, #2
 8003b8a:	d03d      	beq.n	8003c08 <__pow5mult+0xa0>
 8003b8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003b8e:	b97c      	cbnz	r4, 8003bb0 <__pow5mult+0x48>
 8003b90:	2010      	movs	r0, #16
 8003b92:	f7ff fe1b 	bl	80037cc <malloc>
 8003b96:	4602      	mov	r2, r0
 8003b98:	6270      	str	r0, [r6, #36]	; 0x24
 8003b9a:	b928      	cbnz	r0, 8003ba8 <__pow5mult+0x40>
 8003b9c:	4b1d      	ldr	r3, [pc, #116]	; (8003c14 <__pow5mult+0xac>)
 8003b9e:	481e      	ldr	r0, [pc, #120]	; (8003c18 <__pow5mult+0xb0>)
 8003ba0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003ba4:	f000 fab2 	bl	800410c <__assert_func>
 8003ba8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003bac:	6004      	str	r4, [r0, #0]
 8003bae:	60c4      	str	r4, [r0, #12]
 8003bb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003bb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003bb8:	b94c      	cbnz	r4, 8003bce <__pow5mult+0x66>
 8003bba:	f240 2171 	movw	r1, #625	; 0x271
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	f7ff ff12 	bl	80039e8 <__i2b>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8003bca:	4604      	mov	r4, r0
 8003bcc:	6003      	str	r3, [r0, #0]
 8003bce:	f04f 0900 	mov.w	r9, #0
 8003bd2:	07eb      	lsls	r3, r5, #31
 8003bd4:	d50a      	bpl.n	8003bec <__pow5mult+0x84>
 8003bd6:	4639      	mov	r1, r7
 8003bd8:	4622      	mov	r2, r4
 8003bda:	4630      	mov	r0, r6
 8003bdc:	f7ff ff1a 	bl	8003a14 <__multiply>
 8003be0:	4639      	mov	r1, r7
 8003be2:	4680      	mov	r8, r0
 8003be4:	4630      	mov	r0, r6
 8003be6:	f7ff fe47 	bl	8003878 <_Bfree>
 8003bea:	4647      	mov	r7, r8
 8003bec:	106d      	asrs	r5, r5, #1
 8003bee:	d00b      	beq.n	8003c08 <__pow5mult+0xa0>
 8003bf0:	6820      	ldr	r0, [r4, #0]
 8003bf2:	b938      	cbnz	r0, 8003c04 <__pow5mult+0x9c>
 8003bf4:	4622      	mov	r2, r4
 8003bf6:	4621      	mov	r1, r4
 8003bf8:	4630      	mov	r0, r6
 8003bfa:	f7ff ff0b 	bl	8003a14 <__multiply>
 8003bfe:	6020      	str	r0, [r4, #0]
 8003c00:	f8c0 9000 	str.w	r9, [r0]
 8003c04:	4604      	mov	r4, r0
 8003c06:	e7e4      	b.n	8003bd2 <__pow5mult+0x6a>
 8003c08:	4638      	mov	r0, r7
 8003c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c0e:	bf00      	nop
 8003c10:	08004e68 	.word	0x08004e68
 8003c14:	08004c95 	.word	0x08004c95
 8003c18:	08004d18 	.word	0x08004d18

08003c1c <__lshift>:
 8003c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c20:	460c      	mov	r4, r1
 8003c22:	6849      	ldr	r1, [r1, #4]
 8003c24:	6923      	ldr	r3, [r4, #16]
 8003c26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003c2a:	68a3      	ldr	r3, [r4, #8]
 8003c2c:	4607      	mov	r7, r0
 8003c2e:	4691      	mov	r9, r2
 8003c30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003c34:	f108 0601 	add.w	r6, r8, #1
 8003c38:	42b3      	cmp	r3, r6
 8003c3a:	db0b      	blt.n	8003c54 <__lshift+0x38>
 8003c3c:	4638      	mov	r0, r7
 8003c3e:	f7ff fddb 	bl	80037f8 <_Balloc>
 8003c42:	4605      	mov	r5, r0
 8003c44:	b948      	cbnz	r0, 8003c5a <__lshift+0x3e>
 8003c46:	4602      	mov	r2, r0
 8003c48:	4b2a      	ldr	r3, [pc, #168]	; (8003cf4 <__lshift+0xd8>)
 8003c4a:	482b      	ldr	r0, [pc, #172]	; (8003cf8 <__lshift+0xdc>)
 8003c4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003c50:	f000 fa5c 	bl	800410c <__assert_func>
 8003c54:	3101      	adds	r1, #1
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	e7ee      	b.n	8003c38 <__lshift+0x1c>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f100 0114 	add.w	r1, r0, #20
 8003c60:	f100 0210 	add.w	r2, r0, #16
 8003c64:	4618      	mov	r0, r3
 8003c66:	4553      	cmp	r3, sl
 8003c68:	db37      	blt.n	8003cda <__lshift+0xbe>
 8003c6a:	6920      	ldr	r0, [r4, #16]
 8003c6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003c70:	f104 0314 	add.w	r3, r4, #20
 8003c74:	f019 091f 	ands.w	r9, r9, #31
 8003c78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003c7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003c80:	d02f      	beq.n	8003ce2 <__lshift+0xc6>
 8003c82:	f1c9 0e20 	rsb	lr, r9, #32
 8003c86:	468a      	mov	sl, r1
 8003c88:	f04f 0c00 	mov.w	ip, #0
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	fa02 f209 	lsl.w	r2, r2, r9
 8003c92:	ea42 020c 	orr.w	r2, r2, ip
 8003c96:	f84a 2b04 	str.w	r2, [sl], #4
 8003c9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c9e:	4298      	cmp	r0, r3
 8003ca0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8003ca4:	d8f2      	bhi.n	8003c8c <__lshift+0x70>
 8003ca6:	1b03      	subs	r3, r0, r4
 8003ca8:	3b15      	subs	r3, #21
 8003caa:	f023 0303 	bic.w	r3, r3, #3
 8003cae:	3304      	adds	r3, #4
 8003cb0:	f104 0215 	add.w	r2, r4, #21
 8003cb4:	4290      	cmp	r0, r2
 8003cb6:	bf38      	it	cc
 8003cb8:	2304      	movcc	r3, #4
 8003cba:	f841 c003 	str.w	ip, [r1, r3]
 8003cbe:	f1bc 0f00 	cmp.w	ip, #0
 8003cc2:	d001      	beq.n	8003cc8 <__lshift+0xac>
 8003cc4:	f108 0602 	add.w	r6, r8, #2
 8003cc8:	3e01      	subs	r6, #1
 8003cca:	4638      	mov	r0, r7
 8003ccc:	612e      	str	r6, [r5, #16]
 8003cce:	4621      	mov	r1, r4
 8003cd0:	f7ff fdd2 	bl	8003878 <_Bfree>
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cda:	f842 0f04 	str.w	r0, [r2, #4]!
 8003cde:	3301      	adds	r3, #1
 8003ce0:	e7c1      	b.n	8003c66 <__lshift+0x4a>
 8003ce2:	3904      	subs	r1, #4
 8003ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ce8:	f841 2f04 	str.w	r2, [r1, #4]!
 8003cec:	4298      	cmp	r0, r3
 8003cee:	d8f9      	bhi.n	8003ce4 <__lshift+0xc8>
 8003cf0:	e7ea      	b.n	8003cc8 <__lshift+0xac>
 8003cf2:	bf00      	nop
 8003cf4:	08004d07 	.word	0x08004d07
 8003cf8:	08004d18 	.word	0x08004d18

08003cfc <__mcmp>:
 8003cfc:	b530      	push	{r4, r5, lr}
 8003cfe:	6902      	ldr	r2, [r0, #16]
 8003d00:	690c      	ldr	r4, [r1, #16]
 8003d02:	1b12      	subs	r2, r2, r4
 8003d04:	d10e      	bne.n	8003d24 <__mcmp+0x28>
 8003d06:	f100 0314 	add.w	r3, r0, #20
 8003d0a:	3114      	adds	r1, #20
 8003d0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8003d10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003d14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8003d18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8003d1c:	42a5      	cmp	r5, r4
 8003d1e:	d003      	beq.n	8003d28 <__mcmp+0x2c>
 8003d20:	d305      	bcc.n	8003d2e <__mcmp+0x32>
 8003d22:	2201      	movs	r2, #1
 8003d24:	4610      	mov	r0, r2
 8003d26:	bd30      	pop	{r4, r5, pc}
 8003d28:	4283      	cmp	r3, r0
 8003d2a:	d3f3      	bcc.n	8003d14 <__mcmp+0x18>
 8003d2c:	e7fa      	b.n	8003d24 <__mcmp+0x28>
 8003d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d32:	e7f7      	b.n	8003d24 <__mcmp+0x28>

08003d34 <__mdiff>:
 8003d34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d38:	460c      	mov	r4, r1
 8003d3a:	4606      	mov	r6, r0
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	4620      	mov	r0, r4
 8003d40:	4690      	mov	r8, r2
 8003d42:	f7ff ffdb 	bl	8003cfc <__mcmp>
 8003d46:	1e05      	subs	r5, r0, #0
 8003d48:	d110      	bne.n	8003d6c <__mdiff+0x38>
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	4630      	mov	r0, r6
 8003d4e:	f7ff fd53 	bl	80037f8 <_Balloc>
 8003d52:	b930      	cbnz	r0, 8003d62 <__mdiff+0x2e>
 8003d54:	4b3a      	ldr	r3, [pc, #232]	; (8003e40 <__mdiff+0x10c>)
 8003d56:	4602      	mov	r2, r0
 8003d58:	f240 2132 	movw	r1, #562	; 0x232
 8003d5c:	4839      	ldr	r0, [pc, #228]	; (8003e44 <__mdiff+0x110>)
 8003d5e:	f000 f9d5 	bl	800410c <__assert_func>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003d68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d6c:	bfa4      	itt	ge
 8003d6e:	4643      	movge	r3, r8
 8003d70:	46a0      	movge	r8, r4
 8003d72:	4630      	mov	r0, r6
 8003d74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003d78:	bfa6      	itte	ge
 8003d7a:	461c      	movge	r4, r3
 8003d7c:	2500      	movge	r5, #0
 8003d7e:	2501      	movlt	r5, #1
 8003d80:	f7ff fd3a 	bl	80037f8 <_Balloc>
 8003d84:	b920      	cbnz	r0, 8003d90 <__mdiff+0x5c>
 8003d86:	4b2e      	ldr	r3, [pc, #184]	; (8003e40 <__mdiff+0x10c>)
 8003d88:	4602      	mov	r2, r0
 8003d8a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003d8e:	e7e5      	b.n	8003d5c <__mdiff+0x28>
 8003d90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003d94:	6926      	ldr	r6, [r4, #16]
 8003d96:	60c5      	str	r5, [r0, #12]
 8003d98:	f104 0914 	add.w	r9, r4, #20
 8003d9c:	f108 0514 	add.w	r5, r8, #20
 8003da0:	f100 0e14 	add.w	lr, r0, #20
 8003da4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8003da8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8003dac:	f108 0210 	add.w	r2, r8, #16
 8003db0:	46f2      	mov	sl, lr
 8003db2:	2100      	movs	r1, #0
 8003db4:	f859 3b04 	ldr.w	r3, [r9], #4
 8003db8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8003dbc:	fa1f f883 	uxth.w	r8, r3
 8003dc0:	fa11 f18b 	uxtah	r1, r1, fp
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	eba1 0808 	sub.w	r8, r1, r8
 8003dca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003dce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8003dd2:	fa1f f888 	uxth.w	r8, r8
 8003dd6:	1419      	asrs	r1, r3, #16
 8003dd8:	454e      	cmp	r6, r9
 8003dda:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8003dde:	f84a 3b04 	str.w	r3, [sl], #4
 8003de2:	d8e7      	bhi.n	8003db4 <__mdiff+0x80>
 8003de4:	1b33      	subs	r3, r6, r4
 8003de6:	3b15      	subs	r3, #21
 8003de8:	f023 0303 	bic.w	r3, r3, #3
 8003dec:	3304      	adds	r3, #4
 8003dee:	3415      	adds	r4, #21
 8003df0:	42a6      	cmp	r6, r4
 8003df2:	bf38      	it	cc
 8003df4:	2304      	movcc	r3, #4
 8003df6:	441d      	add	r5, r3
 8003df8:	4473      	add	r3, lr
 8003dfa:	469e      	mov	lr, r3
 8003dfc:	462e      	mov	r6, r5
 8003dfe:	4566      	cmp	r6, ip
 8003e00:	d30e      	bcc.n	8003e20 <__mdiff+0xec>
 8003e02:	f10c 0203 	add.w	r2, ip, #3
 8003e06:	1b52      	subs	r2, r2, r5
 8003e08:	f022 0203 	bic.w	r2, r2, #3
 8003e0c:	3d03      	subs	r5, #3
 8003e0e:	45ac      	cmp	ip, r5
 8003e10:	bf38      	it	cc
 8003e12:	2200      	movcc	r2, #0
 8003e14:	441a      	add	r2, r3
 8003e16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8003e1a:	b17b      	cbz	r3, 8003e3c <__mdiff+0x108>
 8003e1c:	6107      	str	r7, [r0, #16]
 8003e1e:	e7a3      	b.n	8003d68 <__mdiff+0x34>
 8003e20:	f856 8b04 	ldr.w	r8, [r6], #4
 8003e24:	fa11 f288 	uxtah	r2, r1, r8
 8003e28:	1414      	asrs	r4, r2, #16
 8003e2a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8003e2e:	b292      	uxth	r2, r2
 8003e30:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003e34:	f84e 2b04 	str.w	r2, [lr], #4
 8003e38:	1421      	asrs	r1, r4, #16
 8003e3a:	e7e0      	b.n	8003dfe <__mdiff+0xca>
 8003e3c:	3f01      	subs	r7, #1
 8003e3e:	e7ea      	b.n	8003e16 <__mdiff+0xe2>
 8003e40:	08004d07 	.word	0x08004d07
 8003e44:	08004d18 	.word	0x08004d18

08003e48 <__d2b>:
 8003e48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003e4c:	4689      	mov	r9, r1
 8003e4e:	2101      	movs	r1, #1
 8003e50:	ec57 6b10 	vmov	r6, r7, d0
 8003e54:	4690      	mov	r8, r2
 8003e56:	f7ff fccf 	bl	80037f8 <_Balloc>
 8003e5a:	4604      	mov	r4, r0
 8003e5c:	b930      	cbnz	r0, 8003e6c <__d2b+0x24>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	4b25      	ldr	r3, [pc, #148]	; (8003ef8 <__d2b+0xb0>)
 8003e62:	4826      	ldr	r0, [pc, #152]	; (8003efc <__d2b+0xb4>)
 8003e64:	f240 310a 	movw	r1, #778	; 0x30a
 8003e68:	f000 f950 	bl	800410c <__assert_func>
 8003e6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8003e70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003e74:	bb35      	cbnz	r5, 8003ec4 <__d2b+0x7c>
 8003e76:	2e00      	cmp	r6, #0
 8003e78:	9301      	str	r3, [sp, #4]
 8003e7a:	d028      	beq.n	8003ece <__d2b+0x86>
 8003e7c:	4668      	mov	r0, sp
 8003e7e:	9600      	str	r6, [sp, #0]
 8003e80:	f7ff fd82 	bl	8003988 <__lo0bits>
 8003e84:	9900      	ldr	r1, [sp, #0]
 8003e86:	b300      	cbz	r0, 8003eca <__d2b+0x82>
 8003e88:	9a01      	ldr	r2, [sp, #4]
 8003e8a:	f1c0 0320 	rsb	r3, r0, #32
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	430b      	orrs	r3, r1
 8003e94:	40c2      	lsrs	r2, r0
 8003e96:	6163      	str	r3, [r4, #20]
 8003e98:	9201      	str	r2, [sp, #4]
 8003e9a:	9b01      	ldr	r3, [sp, #4]
 8003e9c:	61a3      	str	r3, [r4, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	bf14      	ite	ne
 8003ea2:	2202      	movne	r2, #2
 8003ea4:	2201      	moveq	r2, #1
 8003ea6:	6122      	str	r2, [r4, #16]
 8003ea8:	b1d5      	cbz	r5, 8003ee0 <__d2b+0x98>
 8003eaa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8003eae:	4405      	add	r5, r0
 8003eb0:	f8c9 5000 	str.w	r5, [r9]
 8003eb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003eb8:	f8c8 0000 	str.w	r0, [r8]
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	b003      	add	sp, #12
 8003ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ec4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ec8:	e7d5      	b.n	8003e76 <__d2b+0x2e>
 8003eca:	6161      	str	r1, [r4, #20]
 8003ecc:	e7e5      	b.n	8003e9a <__d2b+0x52>
 8003ece:	a801      	add	r0, sp, #4
 8003ed0:	f7ff fd5a 	bl	8003988 <__lo0bits>
 8003ed4:	9b01      	ldr	r3, [sp, #4]
 8003ed6:	6163      	str	r3, [r4, #20]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	6122      	str	r2, [r4, #16]
 8003edc:	3020      	adds	r0, #32
 8003ede:	e7e3      	b.n	8003ea8 <__d2b+0x60>
 8003ee0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003ee4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003ee8:	f8c9 0000 	str.w	r0, [r9]
 8003eec:	6918      	ldr	r0, [r3, #16]
 8003eee:	f7ff fd2b 	bl	8003948 <__hi0bits>
 8003ef2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8003ef6:	e7df      	b.n	8003eb8 <__d2b+0x70>
 8003ef8:	08004d07 	.word	0x08004d07
 8003efc:	08004d18 	.word	0x08004d18

08003f00 <_calloc_r>:
 8003f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f02:	fba1 2402 	umull	r2, r4, r1, r2
 8003f06:	b94c      	cbnz	r4, 8003f1c <_calloc_r+0x1c>
 8003f08:	4611      	mov	r1, r2
 8003f0a:	9201      	str	r2, [sp, #4]
 8003f0c:	f000 f87a 	bl	8004004 <_malloc_r>
 8003f10:	9a01      	ldr	r2, [sp, #4]
 8003f12:	4605      	mov	r5, r0
 8003f14:	b930      	cbnz	r0, 8003f24 <_calloc_r+0x24>
 8003f16:	4628      	mov	r0, r5
 8003f18:	b003      	add	sp, #12
 8003f1a:	bd30      	pop	{r4, r5, pc}
 8003f1c:	220c      	movs	r2, #12
 8003f1e:	6002      	str	r2, [r0, #0]
 8003f20:	2500      	movs	r5, #0
 8003f22:	e7f8      	b.n	8003f16 <_calloc_r+0x16>
 8003f24:	4621      	mov	r1, r4
 8003f26:	f7fe fa07 	bl	8002338 <memset>
 8003f2a:	e7f4      	b.n	8003f16 <_calloc_r+0x16>

08003f2c <_free_r>:
 8003f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f2e:	2900      	cmp	r1, #0
 8003f30:	d044      	beq.n	8003fbc <_free_r+0x90>
 8003f32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f36:	9001      	str	r0, [sp, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f1a1 0404 	sub.w	r4, r1, #4
 8003f3e:	bfb8      	it	lt
 8003f40:	18e4      	addlt	r4, r4, r3
 8003f42:	f000 f925 	bl	8004190 <__malloc_lock>
 8003f46:	4a1e      	ldr	r2, [pc, #120]	; (8003fc0 <_free_r+0x94>)
 8003f48:	9801      	ldr	r0, [sp, #4]
 8003f4a:	6813      	ldr	r3, [r2, #0]
 8003f4c:	b933      	cbnz	r3, 8003f5c <_free_r+0x30>
 8003f4e:	6063      	str	r3, [r4, #4]
 8003f50:	6014      	str	r4, [r2, #0]
 8003f52:	b003      	add	sp, #12
 8003f54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f58:	f000 b920 	b.w	800419c <__malloc_unlock>
 8003f5c:	42a3      	cmp	r3, r4
 8003f5e:	d908      	bls.n	8003f72 <_free_r+0x46>
 8003f60:	6825      	ldr	r5, [r4, #0]
 8003f62:	1961      	adds	r1, r4, r5
 8003f64:	428b      	cmp	r3, r1
 8003f66:	bf01      	itttt	eq
 8003f68:	6819      	ldreq	r1, [r3, #0]
 8003f6a:	685b      	ldreq	r3, [r3, #4]
 8003f6c:	1949      	addeq	r1, r1, r5
 8003f6e:	6021      	streq	r1, [r4, #0]
 8003f70:	e7ed      	b.n	8003f4e <_free_r+0x22>
 8003f72:	461a      	mov	r2, r3
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	b10b      	cbz	r3, 8003f7c <_free_r+0x50>
 8003f78:	42a3      	cmp	r3, r4
 8003f7a:	d9fa      	bls.n	8003f72 <_free_r+0x46>
 8003f7c:	6811      	ldr	r1, [r2, #0]
 8003f7e:	1855      	adds	r5, r2, r1
 8003f80:	42a5      	cmp	r5, r4
 8003f82:	d10b      	bne.n	8003f9c <_free_r+0x70>
 8003f84:	6824      	ldr	r4, [r4, #0]
 8003f86:	4421      	add	r1, r4
 8003f88:	1854      	adds	r4, r2, r1
 8003f8a:	42a3      	cmp	r3, r4
 8003f8c:	6011      	str	r1, [r2, #0]
 8003f8e:	d1e0      	bne.n	8003f52 <_free_r+0x26>
 8003f90:	681c      	ldr	r4, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	6053      	str	r3, [r2, #4]
 8003f96:	4421      	add	r1, r4
 8003f98:	6011      	str	r1, [r2, #0]
 8003f9a:	e7da      	b.n	8003f52 <_free_r+0x26>
 8003f9c:	d902      	bls.n	8003fa4 <_free_r+0x78>
 8003f9e:	230c      	movs	r3, #12
 8003fa0:	6003      	str	r3, [r0, #0]
 8003fa2:	e7d6      	b.n	8003f52 <_free_r+0x26>
 8003fa4:	6825      	ldr	r5, [r4, #0]
 8003fa6:	1961      	adds	r1, r4, r5
 8003fa8:	428b      	cmp	r3, r1
 8003faa:	bf04      	itt	eq
 8003fac:	6819      	ldreq	r1, [r3, #0]
 8003fae:	685b      	ldreq	r3, [r3, #4]
 8003fb0:	6063      	str	r3, [r4, #4]
 8003fb2:	bf04      	itt	eq
 8003fb4:	1949      	addeq	r1, r1, r5
 8003fb6:	6021      	streq	r1, [r4, #0]
 8003fb8:	6054      	str	r4, [r2, #4]
 8003fba:	e7ca      	b.n	8003f52 <_free_r+0x26>
 8003fbc:	b003      	add	sp, #12
 8003fbe:	bd30      	pop	{r4, r5, pc}
 8003fc0:	20000250 	.word	0x20000250

08003fc4 <sbrk_aligned>:
 8003fc4:	b570      	push	{r4, r5, r6, lr}
 8003fc6:	4e0e      	ldr	r6, [pc, #56]	; (8004000 <sbrk_aligned+0x3c>)
 8003fc8:	460c      	mov	r4, r1
 8003fca:	6831      	ldr	r1, [r6, #0]
 8003fcc:	4605      	mov	r5, r0
 8003fce:	b911      	cbnz	r1, 8003fd6 <sbrk_aligned+0x12>
 8003fd0:	f000 f88c 	bl	80040ec <_sbrk_r>
 8003fd4:	6030      	str	r0, [r6, #0]
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	4628      	mov	r0, r5
 8003fda:	f000 f887 	bl	80040ec <_sbrk_r>
 8003fde:	1c43      	adds	r3, r0, #1
 8003fe0:	d00a      	beq.n	8003ff8 <sbrk_aligned+0x34>
 8003fe2:	1cc4      	adds	r4, r0, #3
 8003fe4:	f024 0403 	bic.w	r4, r4, #3
 8003fe8:	42a0      	cmp	r0, r4
 8003fea:	d007      	beq.n	8003ffc <sbrk_aligned+0x38>
 8003fec:	1a21      	subs	r1, r4, r0
 8003fee:	4628      	mov	r0, r5
 8003ff0:	f000 f87c 	bl	80040ec <_sbrk_r>
 8003ff4:	3001      	adds	r0, #1
 8003ff6:	d101      	bne.n	8003ffc <sbrk_aligned+0x38>
 8003ff8:	f04f 34ff 	mov.w	r4, #4294967295
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	bd70      	pop	{r4, r5, r6, pc}
 8004000:	20000254 	.word	0x20000254

08004004 <_malloc_r>:
 8004004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004008:	1ccd      	adds	r5, r1, #3
 800400a:	f025 0503 	bic.w	r5, r5, #3
 800400e:	3508      	adds	r5, #8
 8004010:	2d0c      	cmp	r5, #12
 8004012:	bf38      	it	cc
 8004014:	250c      	movcc	r5, #12
 8004016:	2d00      	cmp	r5, #0
 8004018:	4607      	mov	r7, r0
 800401a:	db01      	blt.n	8004020 <_malloc_r+0x1c>
 800401c:	42a9      	cmp	r1, r5
 800401e:	d905      	bls.n	800402c <_malloc_r+0x28>
 8004020:	230c      	movs	r3, #12
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	2600      	movs	r6, #0
 8004026:	4630      	mov	r0, r6
 8004028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800402c:	4e2e      	ldr	r6, [pc, #184]	; (80040e8 <_malloc_r+0xe4>)
 800402e:	f000 f8af 	bl	8004190 <__malloc_lock>
 8004032:	6833      	ldr	r3, [r6, #0]
 8004034:	461c      	mov	r4, r3
 8004036:	bb34      	cbnz	r4, 8004086 <_malloc_r+0x82>
 8004038:	4629      	mov	r1, r5
 800403a:	4638      	mov	r0, r7
 800403c:	f7ff ffc2 	bl	8003fc4 <sbrk_aligned>
 8004040:	1c43      	adds	r3, r0, #1
 8004042:	4604      	mov	r4, r0
 8004044:	d14d      	bne.n	80040e2 <_malloc_r+0xde>
 8004046:	6834      	ldr	r4, [r6, #0]
 8004048:	4626      	mov	r6, r4
 800404a:	2e00      	cmp	r6, #0
 800404c:	d140      	bne.n	80040d0 <_malloc_r+0xcc>
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	4631      	mov	r1, r6
 8004052:	4638      	mov	r0, r7
 8004054:	eb04 0803 	add.w	r8, r4, r3
 8004058:	f000 f848 	bl	80040ec <_sbrk_r>
 800405c:	4580      	cmp	r8, r0
 800405e:	d13a      	bne.n	80040d6 <_malloc_r+0xd2>
 8004060:	6821      	ldr	r1, [r4, #0]
 8004062:	3503      	adds	r5, #3
 8004064:	1a6d      	subs	r5, r5, r1
 8004066:	f025 0503 	bic.w	r5, r5, #3
 800406a:	3508      	adds	r5, #8
 800406c:	2d0c      	cmp	r5, #12
 800406e:	bf38      	it	cc
 8004070:	250c      	movcc	r5, #12
 8004072:	4629      	mov	r1, r5
 8004074:	4638      	mov	r0, r7
 8004076:	f7ff ffa5 	bl	8003fc4 <sbrk_aligned>
 800407a:	3001      	adds	r0, #1
 800407c:	d02b      	beq.n	80040d6 <_malloc_r+0xd2>
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	442b      	add	r3, r5
 8004082:	6023      	str	r3, [r4, #0]
 8004084:	e00e      	b.n	80040a4 <_malloc_r+0xa0>
 8004086:	6822      	ldr	r2, [r4, #0]
 8004088:	1b52      	subs	r2, r2, r5
 800408a:	d41e      	bmi.n	80040ca <_malloc_r+0xc6>
 800408c:	2a0b      	cmp	r2, #11
 800408e:	d916      	bls.n	80040be <_malloc_r+0xba>
 8004090:	1961      	adds	r1, r4, r5
 8004092:	42a3      	cmp	r3, r4
 8004094:	6025      	str	r5, [r4, #0]
 8004096:	bf18      	it	ne
 8004098:	6059      	strne	r1, [r3, #4]
 800409a:	6863      	ldr	r3, [r4, #4]
 800409c:	bf08      	it	eq
 800409e:	6031      	streq	r1, [r6, #0]
 80040a0:	5162      	str	r2, [r4, r5]
 80040a2:	604b      	str	r3, [r1, #4]
 80040a4:	4638      	mov	r0, r7
 80040a6:	f104 060b 	add.w	r6, r4, #11
 80040aa:	f000 f877 	bl	800419c <__malloc_unlock>
 80040ae:	f026 0607 	bic.w	r6, r6, #7
 80040b2:	1d23      	adds	r3, r4, #4
 80040b4:	1af2      	subs	r2, r6, r3
 80040b6:	d0b6      	beq.n	8004026 <_malloc_r+0x22>
 80040b8:	1b9b      	subs	r3, r3, r6
 80040ba:	50a3      	str	r3, [r4, r2]
 80040bc:	e7b3      	b.n	8004026 <_malloc_r+0x22>
 80040be:	6862      	ldr	r2, [r4, #4]
 80040c0:	42a3      	cmp	r3, r4
 80040c2:	bf0c      	ite	eq
 80040c4:	6032      	streq	r2, [r6, #0]
 80040c6:	605a      	strne	r2, [r3, #4]
 80040c8:	e7ec      	b.n	80040a4 <_malloc_r+0xa0>
 80040ca:	4623      	mov	r3, r4
 80040cc:	6864      	ldr	r4, [r4, #4]
 80040ce:	e7b2      	b.n	8004036 <_malloc_r+0x32>
 80040d0:	4634      	mov	r4, r6
 80040d2:	6876      	ldr	r6, [r6, #4]
 80040d4:	e7b9      	b.n	800404a <_malloc_r+0x46>
 80040d6:	230c      	movs	r3, #12
 80040d8:	603b      	str	r3, [r7, #0]
 80040da:	4638      	mov	r0, r7
 80040dc:	f000 f85e 	bl	800419c <__malloc_unlock>
 80040e0:	e7a1      	b.n	8004026 <_malloc_r+0x22>
 80040e2:	6025      	str	r5, [r4, #0]
 80040e4:	e7de      	b.n	80040a4 <_malloc_r+0xa0>
 80040e6:	bf00      	nop
 80040e8:	20000250 	.word	0x20000250

080040ec <_sbrk_r>:
 80040ec:	b538      	push	{r3, r4, r5, lr}
 80040ee:	4d06      	ldr	r5, [pc, #24]	; (8004108 <_sbrk_r+0x1c>)
 80040f0:	2300      	movs	r3, #0
 80040f2:	4604      	mov	r4, r0
 80040f4:	4608      	mov	r0, r1
 80040f6:	602b      	str	r3, [r5, #0]
 80040f8:	f7fc fca2 	bl	8000a40 <_sbrk>
 80040fc:	1c43      	adds	r3, r0, #1
 80040fe:	d102      	bne.n	8004106 <_sbrk_r+0x1a>
 8004100:	682b      	ldr	r3, [r5, #0]
 8004102:	b103      	cbz	r3, 8004106 <_sbrk_r+0x1a>
 8004104:	6023      	str	r3, [r4, #0]
 8004106:	bd38      	pop	{r3, r4, r5, pc}
 8004108:	20000258 	.word	0x20000258

0800410c <__assert_func>:
 800410c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800410e:	4614      	mov	r4, r2
 8004110:	461a      	mov	r2, r3
 8004112:	4b09      	ldr	r3, [pc, #36]	; (8004138 <__assert_func+0x2c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4605      	mov	r5, r0
 8004118:	68d8      	ldr	r0, [r3, #12]
 800411a:	b14c      	cbz	r4, 8004130 <__assert_func+0x24>
 800411c:	4b07      	ldr	r3, [pc, #28]	; (800413c <__assert_func+0x30>)
 800411e:	9100      	str	r1, [sp, #0]
 8004120:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004124:	4906      	ldr	r1, [pc, #24]	; (8004140 <__assert_func+0x34>)
 8004126:	462b      	mov	r3, r5
 8004128:	f000 f80e 	bl	8004148 <fiprintf>
 800412c:	f000 fa64 	bl	80045f8 <abort>
 8004130:	4b04      	ldr	r3, [pc, #16]	; (8004144 <__assert_func+0x38>)
 8004132:	461c      	mov	r4, r3
 8004134:	e7f3      	b.n	800411e <__assert_func+0x12>
 8004136:	bf00      	nop
 8004138:	2000000c 	.word	0x2000000c
 800413c:	08004e74 	.word	0x08004e74
 8004140:	08004e81 	.word	0x08004e81
 8004144:	08004eaf 	.word	0x08004eaf

08004148 <fiprintf>:
 8004148:	b40e      	push	{r1, r2, r3}
 800414a:	b503      	push	{r0, r1, lr}
 800414c:	4601      	mov	r1, r0
 800414e:	ab03      	add	r3, sp, #12
 8004150:	4805      	ldr	r0, [pc, #20]	; (8004168 <fiprintf+0x20>)
 8004152:	f853 2b04 	ldr.w	r2, [r3], #4
 8004156:	6800      	ldr	r0, [r0, #0]
 8004158:	9301      	str	r3, [sp, #4]
 800415a:	f000 f84f 	bl	80041fc <_vfiprintf_r>
 800415e:	b002      	add	sp, #8
 8004160:	f85d eb04 	ldr.w	lr, [sp], #4
 8004164:	b003      	add	sp, #12
 8004166:	4770      	bx	lr
 8004168:	2000000c 	.word	0x2000000c

0800416c <__ascii_mbtowc>:
 800416c:	b082      	sub	sp, #8
 800416e:	b901      	cbnz	r1, 8004172 <__ascii_mbtowc+0x6>
 8004170:	a901      	add	r1, sp, #4
 8004172:	b142      	cbz	r2, 8004186 <__ascii_mbtowc+0x1a>
 8004174:	b14b      	cbz	r3, 800418a <__ascii_mbtowc+0x1e>
 8004176:	7813      	ldrb	r3, [r2, #0]
 8004178:	600b      	str	r3, [r1, #0]
 800417a:	7812      	ldrb	r2, [r2, #0]
 800417c:	1e10      	subs	r0, r2, #0
 800417e:	bf18      	it	ne
 8004180:	2001      	movne	r0, #1
 8004182:	b002      	add	sp, #8
 8004184:	4770      	bx	lr
 8004186:	4610      	mov	r0, r2
 8004188:	e7fb      	b.n	8004182 <__ascii_mbtowc+0x16>
 800418a:	f06f 0001 	mvn.w	r0, #1
 800418e:	e7f8      	b.n	8004182 <__ascii_mbtowc+0x16>

08004190 <__malloc_lock>:
 8004190:	4801      	ldr	r0, [pc, #4]	; (8004198 <__malloc_lock+0x8>)
 8004192:	f000 bbf1 	b.w	8004978 <__retarget_lock_acquire_recursive>
 8004196:	bf00      	nop
 8004198:	2000025c 	.word	0x2000025c

0800419c <__malloc_unlock>:
 800419c:	4801      	ldr	r0, [pc, #4]	; (80041a4 <__malloc_unlock+0x8>)
 800419e:	f000 bbec 	b.w	800497a <__retarget_lock_release_recursive>
 80041a2:	bf00      	nop
 80041a4:	2000025c 	.word	0x2000025c

080041a8 <__sfputc_r>:
 80041a8:	6893      	ldr	r3, [r2, #8]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	b410      	push	{r4}
 80041b0:	6093      	str	r3, [r2, #8]
 80041b2:	da08      	bge.n	80041c6 <__sfputc_r+0x1e>
 80041b4:	6994      	ldr	r4, [r2, #24]
 80041b6:	42a3      	cmp	r3, r4
 80041b8:	db01      	blt.n	80041be <__sfputc_r+0x16>
 80041ba:	290a      	cmp	r1, #10
 80041bc:	d103      	bne.n	80041c6 <__sfputc_r+0x1e>
 80041be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041c2:	f000 b94b 	b.w	800445c <__swbuf_r>
 80041c6:	6813      	ldr	r3, [r2, #0]
 80041c8:	1c58      	adds	r0, r3, #1
 80041ca:	6010      	str	r0, [r2, #0]
 80041cc:	7019      	strb	r1, [r3, #0]
 80041ce:	4608      	mov	r0, r1
 80041d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <__sfputs_r>:
 80041d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d8:	4606      	mov	r6, r0
 80041da:	460f      	mov	r7, r1
 80041dc:	4614      	mov	r4, r2
 80041de:	18d5      	adds	r5, r2, r3
 80041e0:	42ac      	cmp	r4, r5
 80041e2:	d101      	bne.n	80041e8 <__sfputs_r+0x12>
 80041e4:	2000      	movs	r0, #0
 80041e6:	e007      	b.n	80041f8 <__sfputs_r+0x22>
 80041e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041ec:	463a      	mov	r2, r7
 80041ee:	4630      	mov	r0, r6
 80041f0:	f7ff ffda 	bl	80041a8 <__sfputc_r>
 80041f4:	1c43      	adds	r3, r0, #1
 80041f6:	d1f3      	bne.n	80041e0 <__sfputs_r+0xa>
 80041f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041fc <_vfiprintf_r>:
 80041fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004200:	460d      	mov	r5, r1
 8004202:	b09d      	sub	sp, #116	; 0x74
 8004204:	4614      	mov	r4, r2
 8004206:	4698      	mov	r8, r3
 8004208:	4606      	mov	r6, r0
 800420a:	b118      	cbz	r0, 8004214 <_vfiprintf_r+0x18>
 800420c:	6983      	ldr	r3, [r0, #24]
 800420e:	b90b      	cbnz	r3, 8004214 <_vfiprintf_r+0x18>
 8004210:	f000 fb14 	bl	800483c <__sinit>
 8004214:	4b89      	ldr	r3, [pc, #548]	; (800443c <_vfiprintf_r+0x240>)
 8004216:	429d      	cmp	r5, r3
 8004218:	d11b      	bne.n	8004252 <_vfiprintf_r+0x56>
 800421a:	6875      	ldr	r5, [r6, #4]
 800421c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800421e:	07d9      	lsls	r1, r3, #31
 8004220:	d405      	bmi.n	800422e <_vfiprintf_r+0x32>
 8004222:	89ab      	ldrh	r3, [r5, #12]
 8004224:	059a      	lsls	r2, r3, #22
 8004226:	d402      	bmi.n	800422e <_vfiprintf_r+0x32>
 8004228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800422a:	f000 fba5 	bl	8004978 <__retarget_lock_acquire_recursive>
 800422e:	89ab      	ldrh	r3, [r5, #12]
 8004230:	071b      	lsls	r3, r3, #28
 8004232:	d501      	bpl.n	8004238 <_vfiprintf_r+0x3c>
 8004234:	692b      	ldr	r3, [r5, #16]
 8004236:	b9eb      	cbnz	r3, 8004274 <_vfiprintf_r+0x78>
 8004238:	4629      	mov	r1, r5
 800423a:	4630      	mov	r0, r6
 800423c:	f000 f96e 	bl	800451c <__swsetup_r>
 8004240:	b1c0      	cbz	r0, 8004274 <_vfiprintf_r+0x78>
 8004242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004244:	07dc      	lsls	r4, r3, #31
 8004246:	d50e      	bpl.n	8004266 <_vfiprintf_r+0x6a>
 8004248:	f04f 30ff 	mov.w	r0, #4294967295
 800424c:	b01d      	add	sp, #116	; 0x74
 800424e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004252:	4b7b      	ldr	r3, [pc, #492]	; (8004440 <_vfiprintf_r+0x244>)
 8004254:	429d      	cmp	r5, r3
 8004256:	d101      	bne.n	800425c <_vfiprintf_r+0x60>
 8004258:	68b5      	ldr	r5, [r6, #8]
 800425a:	e7df      	b.n	800421c <_vfiprintf_r+0x20>
 800425c:	4b79      	ldr	r3, [pc, #484]	; (8004444 <_vfiprintf_r+0x248>)
 800425e:	429d      	cmp	r5, r3
 8004260:	bf08      	it	eq
 8004262:	68f5      	ldreq	r5, [r6, #12]
 8004264:	e7da      	b.n	800421c <_vfiprintf_r+0x20>
 8004266:	89ab      	ldrh	r3, [r5, #12]
 8004268:	0598      	lsls	r0, r3, #22
 800426a:	d4ed      	bmi.n	8004248 <_vfiprintf_r+0x4c>
 800426c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800426e:	f000 fb84 	bl	800497a <__retarget_lock_release_recursive>
 8004272:	e7e9      	b.n	8004248 <_vfiprintf_r+0x4c>
 8004274:	2300      	movs	r3, #0
 8004276:	9309      	str	r3, [sp, #36]	; 0x24
 8004278:	2320      	movs	r3, #32
 800427a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800427e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004282:	2330      	movs	r3, #48	; 0x30
 8004284:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004448 <_vfiprintf_r+0x24c>
 8004288:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800428c:	f04f 0901 	mov.w	r9, #1
 8004290:	4623      	mov	r3, r4
 8004292:	469a      	mov	sl, r3
 8004294:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004298:	b10a      	cbz	r2, 800429e <_vfiprintf_r+0xa2>
 800429a:	2a25      	cmp	r2, #37	; 0x25
 800429c:	d1f9      	bne.n	8004292 <_vfiprintf_r+0x96>
 800429e:	ebba 0b04 	subs.w	fp, sl, r4
 80042a2:	d00b      	beq.n	80042bc <_vfiprintf_r+0xc0>
 80042a4:	465b      	mov	r3, fp
 80042a6:	4622      	mov	r2, r4
 80042a8:	4629      	mov	r1, r5
 80042aa:	4630      	mov	r0, r6
 80042ac:	f7ff ff93 	bl	80041d6 <__sfputs_r>
 80042b0:	3001      	adds	r0, #1
 80042b2:	f000 80aa 	beq.w	800440a <_vfiprintf_r+0x20e>
 80042b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042b8:	445a      	add	r2, fp
 80042ba:	9209      	str	r2, [sp, #36]	; 0x24
 80042bc:	f89a 3000 	ldrb.w	r3, [sl]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 80a2 	beq.w	800440a <_vfiprintf_r+0x20e>
 80042c6:	2300      	movs	r3, #0
 80042c8:	f04f 32ff 	mov.w	r2, #4294967295
 80042cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042d0:	f10a 0a01 	add.w	sl, sl, #1
 80042d4:	9304      	str	r3, [sp, #16]
 80042d6:	9307      	str	r3, [sp, #28]
 80042d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042dc:	931a      	str	r3, [sp, #104]	; 0x68
 80042de:	4654      	mov	r4, sl
 80042e0:	2205      	movs	r2, #5
 80042e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042e6:	4858      	ldr	r0, [pc, #352]	; (8004448 <_vfiprintf_r+0x24c>)
 80042e8:	f7fb ffb2 	bl	8000250 <memchr>
 80042ec:	9a04      	ldr	r2, [sp, #16]
 80042ee:	b9d8      	cbnz	r0, 8004328 <_vfiprintf_r+0x12c>
 80042f0:	06d1      	lsls	r1, r2, #27
 80042f2:	bf44      	itt	mi
 80042f4:	2320      	movmi	r3, #32
 80042f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042fa:	0713      	lsls	r3, r2, #28
 80042fc:	bf44      	itt	mi
 80042fe:	232b      	movmi	r3, #43	; 0x2b
 8004300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004304:	f89a 3000 	ldrb.w	r3, [sl]
 8004308:	2b2a      	cmp	r3, #42	; 0x2a
 800430a:	d015      	beq.n	8004338 <_vfiprintf_r+0x13c>
 800430c:	9a07      	ldr	r2, [sp, #28]
 800430e:	4654      	mov	r4, sl
 8004310:	2000      	movs	r0, #0
 8004312:	f04f 0c0a 	mov.w	ip, #10
 8004316:	4621      	mov	r1, r4
 8004318:	f811 3b01 	ldrb.w	r3, [r1], #1
 800431c:	3b30      	subs	r3, #48	; 0x30
 800431e:	2b09      	cmp	r3, #9
 8004320:	d94e      	bls.n	80043c0 <_vfiprintf_r+0x1c4>
 8004322:	b1b0      	cbz	r0, 8004352 <_vfiprintf_r+0x156>
 8004324:	9207      	str	r2, [sp, #28]
 8004326:	e014      	b.n	8004352 <_vfiprintf_r+0x156>
 8004328:	eba0 0308 	sub.w	r3, r0, r8
 800432c:	fa09 f303 	lsl.w	r3, r9, r3
 8004330:	4313      	orrs	r3, r2
 8004332:	9304      	str	r3, [sp, #16]
 8004334:	46a2      	mov	sl, r4
 8004336:	e7d2      	b.n	80042de <_vfiprintf_r+0xe2>
 8004338:	9b03      	ldr	r3, [sp, #12]
 800433a:	1d19      	adds	r1, r3, #4
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	9103      	str	r1, [sp, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	bfbb      	ittet	lt
 8004344:	425b      	neglt	r3, r3
 8004346:	f042 0202 	orrlt.w	r2, r2, #2
 800434a:	9307      	strge	r3, [sp, #28]
 800434c:	9307      	strlt	r3, [sp, #28]
 800434e:	bfb8      	it	lt
 8004350:	9204      	strlt	r2, [sp, #16]
 8004352:	7823      	ldrb	r3, [r4, #0]
 8004354:	2b2e      	cmp	r3, #46	; 0x2e
 8004356:	d10c      	bne.n	8004372 <_vfiprintf_r+0x176>
 8004358:	7863      	ldrb	r3, [r4, #1]
 800435a:	2b2a      	cmp	r3, #42	; 0x2a
 800435c:	d135      	bne.n	80043ca <_vfiprintf_r+0x1ce>
 800435e:	9b03      	ldr	r3, [sp, #12]
 8004360:	1d1a      	adds	r2, r3, #4
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	9203      	str	r2, [sp, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	bfb8      	it	lt
 800436a:	f04f 33ff 	movlt.w	r3, #4294967295
 800436e:	3402      	adds	r4, #2
 8004370:	9305      	str	r3, [sp, #20]
 8004372:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004458 <_vfiprintf_r+0x25c>
 8004376:	7821      	ldrb	r1, [r4, #0]
 8004378:	2203      	movs	r2, #3
 800437a:	4650      	mov	r0, sl
 800437c:	f7fb ff68 	bl	8000250 <memchr>
 8004380:	b140      	cbz	r0, 8004394 <_vfiprintf_r+0x198>
 8004382:	2340      	movs	r3, #64	; 0x40
 8004384:	eba0 000a 	sub.w	r0, r0, sl
 8004388:	fa03 f000 	lsl.w	r0, r3, r0
 800438c:	9b04      	ldr	r3, [sp, #16]
 800438e:	4303      	orrs	r3, r0
 8004390:	3401      	adds	r4, #1
 8004392:	9304      	str	r3, [sp, #16]
 8004394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004398:	482c      	ldr	r0, [pc, #176]	; (800444c <_vfiprintf_r+0x250>)
 800439a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800439e:	2206      	movs	r2, #6
 80043a0:	f7fb ff56 	bl	8000250 <memchr>
 80043a4:	2800      	cmp	r0, #0
 80043a6:	d03f      	beq.n	8004428 <_vfiprintf_r+0x22c>
 80043a8:	4b29      	ldr	r3, [pc, #164]	; (8004450 <_vfiprintf_r+0x254>)
 80043aa:	bb1b      	cbnz	r3, 80043f4 <_vfiprintf_r+0x1f8>
 80043ac:	9b03      	ldr	r3, [sp, #12]
 80043ae:	3307      	adds	r3, #7
 80043b0:	f023 0307 	bic.w	r3, r3, #7
 80043b4:	3308      	adds	r3, #8
 80043b6:	9303      	str	r3, [sp, #12]
 80043b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043ba:	443b      	add	r3, r7
 80043bc:	9309      	str	r3, [sp, #36]	; 0x24
 80043be:	e767      	b.n	8004290 <_vfiprintf_r+0x94>
 80043c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80043c4:	460c      	mov	r4, r1
 80043c6:	2001      	movs	r0, #1
 80043c8:	e7a5      	b.n	8004316 <_vfiprintf_r+0x11a>
 80043ca:	2300      	movs	r3, #0
 80043cc:	3401      	adds	r4, #1
 80043ce:	9305      	str	r3, [sp, #20]
 80043d0:	4619      	mov	r1, r3
 80043d2:	f04f 0c0a 	mov.w	ip, #10
 80043d6:	4620      	mov	r0, r4
 80043d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043dc:	3a30      	subs	r2, #48	; 0x30
 80043de:	2a09      	cmp	r2, #9
 80043e0:	d903      	bls.n	80043ea <_vfiprintf_r+0x1ee>
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0c5      	beq.n	8004372 <_vfiprintf_r+0x176>
 80043e6:	9105      	str	r1, [sp, #20]
 80043e8:	e7c3      	b.n	8004372 <_vfiprintf_r+0x176>
 80043ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80043ee:	4604      	mov	r4, r0
 80043f0:	2301      	movs	r3, #1
 80043f2:	e7f0      	b.n	80043d6 <_vfiprintf_r+0x1da>
 80043f4:	ab03      	add	r3, sp, #12
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	462a      	mov	r2, r5
 80043fa:	4b16      	ldr	r3, [pc, #88]	; (8004454 <_vfiprintf_r+0x258>)
 80043fc:	a904      	add	r1, sp, #16
 80043fe:	4630      	mov	r0, r6
 8004400:	f7fe f832 	bl	8002468 <_printf_float>
 8004404:	4607      	mov	r7, r0
 8004406:	1c78      	adds	r0, r7, #1
 8004408:	d1d6      	bne.n	80043b8 <_vfiprintf_r+0x1bc>
 800440a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800440c:	07d9      	lsls	r1, r3, #31
 800440e:	d405      	bmi.n	800441c <_vfiprintf_r+0x220>
 8004410:	89ab      	ldrh	r3, [r5, #12]
 8004412:	059a      	lsls	r2, r3, #22
 8004414:	d402      	bmi.n	800441c <_vfiprintf_r+0x220>
 8004416:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004418:	f000 faaf 	bl	800497a <__retarget_lock_release_recursive>
 800441c:	89ab      	ldrh	r3, [r5, #12]
 800441e:	065b      	lsls	r3, r3, #25
 8004420:	f53f af12 	bmi.w	8004248 <_vfiprintf_r+0x4c>
 8004424:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004426:	e711      	b.n	800424c <_vfiprintf_r+0x50>
 8004428:	ab03      	add	r3, sp, #12
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	462a      	mov	r2, r5
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <_vfiprintf_r+0x258>)
 8004430:	a904      	add	r1, sp, #16
 8004432:	4630      	mov	r0, r6
 8004434:	f7fe faa4 	bl	8002980 <_printf_i>
 8004438:	e7e4      	b.n	8004404 <_vfiprintf_r+0x208>
 800443a:	bf00      	nop
 800443c:	08004fec 	.word	0x08004fec
 8004440:	0800500c 	.word	0x0800500c
 8004444:	08004fcc 	.word	0x08004fcc
 8004448:	08004eba 	.word	0x08004eba
 800444c:	08004ec4 	.word	0x08004ec4
 8004450:	08002469 	.word	0x08002469
 8004454:	080041d7 	.word	0x080041d7
 8004458:	08004ec0 	.word	0x08004ec0

0800445c <__swbuf_r>:
 800445c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445e:	460e      	mov	r6, r1
 8004460:	4614      	mov	r4, r2
 8004462:	4605      	mov	r5, r0
 8004464:	b118      	cbz	r0, 800446e <__swbuf_r+0x12>
 8004466:	6983      	ldr	r3, [r0, #24]
 8004468:	b90b      	cbnz	r3, 800446e <__swbuf_r+0x12>
 800446a:	f000 f9e7 	bl	800483c <__sinit>
 800446e:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <__swbuf_r+0x98>)
 8004470:	429c      	cmp	r4, r3
 8004472:	d12b      	bne.n	80044cc <__swbuf_r+0x70>
 8004474:	686c      	ldr	r4, [r5, #4]
 8004476:	69a3      	ldr	r3, [r4, #24]
 8004478:	60a3      	str	r3, [r4, #8]
 800447a:	89a3      	ldrh	r3, [r4, #12]
 800447c:	071a      	lsls	r2, r3, #28
 800447e:	d52f      	bpl.n	80044e0 <__swbuf_r+0x84>
 8004480:	6923      	ldr	r3, [r4, #16]
 8004482:	b36b      	cbz	r3, 80044e0 <__swbuf_r+0x84>
 8004484:	6923      	ldr	r3, [r4, #16]
 8004486:	6820      	ldr	r0, [r4, #0]
 8004488:	1ac0      	subs	r0, r0, r3
 800448a:	6963      	ldr	r3, [r4, #20]
 800448c:	b2f6      	uxtb	r6, r6
 800448e:	4283      	cmp	r3, r0
 8004490:	4637      	mov	r7, r6
 8004492:	dc04      	bgt.n	800449e <__swbuf_r+0x42>
 8004494:	4621      	mov	r1, r4
 8004496:	4628      	mov	r0, r5
 8004498:	f000 f93c 	bl	8004714 <_fflush_r>
 800449c:	bb30      	cbnz	r0, 80044ec <__swbuf_r+0x90>
 800449e:	68a3      	ldr	r3, [r4, #8]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	60a3      	str	r3, [r4, #8]
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	6022      	str	r2, [r4, #0]
 80044aa:	701e      	strb	r6, [r3, #0]
 80044ac:	6963      	ldr	r3, [r4, #20]
 80044ae:	3001      	adds	r0, #1
 80044b0:	4283      	cmp	r3, r0
 80044b2:	d004      	beq.n	80044be <__swbuf_r+0x62>
 80044b4:	89a3      	ldrh	r3, [r4, #12]
 80044b6:	07db      	lsls	r3, r3, #31
 80044b8:	d506      	bpl.n	80044c8 <__swbuf_r+0x6c>
 80044ba:	2e0a      	cmp	r6, #10
 80044bc:	d104      	bne.n	80044c8 <__swbuf_r+0x6c>
 80044be:	4621      	mov	r1, r4
 80044c0:	4628      	mov	r0, r5
 80044c2:	f000 f927 	bl	8004714 <_fflush_r>
 80044c6:	b988      	cbnz	r0, 80044ec <__swbuf_r+0x90>
 80044c8:	4638      	mov	r0, r7
 80044ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044cc:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <__swbuf_r+0x9c>)
 80044ce:	429c      	cmp	r4, r3
 80044d0:	d101      	bne.n	80044d6 <__swbuf_r+0x7a>
 80044d2:	68ac      	ldr	r4, [r5, #8]
 80044d4:	e7cf      	b.n	8004476 <__swbuf_r+0x1a>
 80044d6:	4b09      	ldr	r3, [pc, #36]	; (80044fc <__swbuf_r+0xa0>)
 80044d8:	429c      	cmp	r4, r3
 80044da:	bf08      	it	eq
 80044dc:	68ec      	ldreq	r4, [r5, #12]
 80044de:	e7ca      	b.n	8004476 <__swbuf_r+0x1a>
 80044e0:	4621      	mov	r1, r4
 80044e2:	4628      	mov	r0, r5
 80044e4:	f000 f81a 	bl	800451c <__swsetup_r>
 80044e8:	2800      	cmp	r0, #0
 80044ea:	d0cb      	beq.n	8004484 <__swbuf_r+0x28>
 80044ec:	f04f 37ff 	mov.w	r7, #4294967295
 80044f0:	e7ea      	b.n	80044c8 <__swbuf_r+0x6c>
 80044f2:	bf00      	nop
 80044f4:	08004fec 	.word	0x08004fec
 80044f8:	0800500c 	.word	0x0800500c
 80044fc:	08004fcc 	.word	0x08004fcc

08004500 <__ascii_wctomb>:
 8004500:	b149      	cbz	r1, 8004516 <__ascii_wctomb+0x16>
 8004502:	2aff      	cmp	r2, #255	; 0xff
 8004504:	bf85      	ittet	hi
 8004506:	238a      	movhi	r3, #138	; 0x8a
 8004508:	6003      	strhi	r3, [r0, #0]
 800450a:	700a      	strbls	r2, [r1, #0]
 800450c:	f04f 30ff 	movhi.w	r0, #4294967295
 8004510:	bf98      	it	ls
 8004512:	2001      	movls	r0, #1
 8004514:	4770      	bx	lr
 8004516:	4608      	mov	r0, r1
 8004518:	4770      	bx	lr
	...

0800451c <__swsetup_r>:
 800451c:	4b32      	ldr	r3, [pc, #200]	; (80045e8 <__swsetup_r+0xcc>)
 800451e:	b570      	push	{r4, r5, r6, lr}
 8004520:	681d      	ldr	r5, [r3, #0]
 8004522:	4606      	mov	r6, r0
 8004524:	460c      	mov	r4, r1
 8004526:	b125      	cbz	r5, 8004532 <__swsetup_r+0x16>
 8004528:	69ab      	ldr	r3, [r5, #24]
 800452a:	b913      	cbnz	r3, 8004532 <__swsetup_r+0x16>
 800452c:	4628      	mov	r0, r5
 800452e:	f000 f985 	bl	800483c <__sinit>
 8004532:	4b2e      	ldr	r3, [pc, #184]	; (80045ec <__swsetup_r+0xd0>)
 8004534:	429c      	cmp	r4, r3
 8004536:	d10f      	bne.n	8004558 <__swsetup_r+0x3c>
 8004538:	686c      	ldr	r4, [r5, #4]
 800453a:	89a3      	ldrh	r3, [r4, #12]
 800453c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004540:	0719      	lsls	r1, r3, #28
 8004542:	d42c      	bmi.n	800459e <__swsetup_r+0x82>
 8004544:	06dd      	lsls	r5, r3, #27
 8004546:	d411      	bmi.n	800456c <__swsetup_r+0x50>
 8004548:	2309      	movs	r3, #9
 800454a:	6033      	str	r3, [r6, #0]
 800454c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004550:	81a3      	strh	r3, [r4, #12]
 8004552:	f04f 30ff 	mov.w	r0, #4294967295
 8004556:	e03e      	b.n	80045d6 <__swsetup_r+0xba>
 8004558:	4b25      	ldr	r3, [pc, #148]	; (80045f0 <__swsetup_r+0xd4>)
 800455a:	429c      	cmp	r4, r3
 800455c:	d101      	bne.n	8004562 <__swsetup_r+0x46>
 800455e:	68ac      	ldr	r4, [r5, #8]
 8004560:	e7eb      	b.n	800453a <__swsetup_r+0x1e>
 8004562:	4b24      	ldr	r3, [pc, #144]	; (80045f4 <__swsetup_r+0xd8>)
 8004564:	429c      	cmp	r4, r3
 8004566:	bf08      	it	eq
 8004568:	68ec      	ldreq	r4, [r5, #12]
 800456a:	e7e6      	b.n	800453a <__swsetup_r+0x1e>
 800456c:	0758      	lsls	r0, r3, #29
 800456e:	d512      	bpl.n	8004596 <__swsetup_r+0x7a>
 8004570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004572:	b141      	cbz	r1, 8004586 <__swsetup_r+0x6a>
 8004574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004578:	4299      	cmp	r1, r3
 800457a:	d002      	beq.n	8004582 <__swsetup_r+0x66>
 800457c:	4630      	mov	r0, r6
 800457e:	f7ff fcd5 	bl	8003f2c <_free_r>
 8004582:	2300      	movs	r3, #0
 8004584:	6363      	str	r3, [r4, #52]	; 0x34
 8004586:	89a3      	ldrh	r3, [r4, #12]
 8004588:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800458c:	81a3      	strh	r3, [r4, #12]
 800458e:	2300      	movs	r3, #0
 8004590:	6063      	str	r3, [r4, #4]
 8004592:	6923      	ldr	r3, [r4, #16]
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	89a3      	ldrh	r3, [r4, #12]
 8004598:	f043 0308 	orr.w	r3, r3, #8
 800459c:	81a3      	strh	r3, [r4, #12]
 800459e:	6923      	ldr	r3, [r4, #16]
 80045a0:	b94b      	cbnz	r3, 80045b6 <__swsetup_r+0x9a>
 80045a2:	89a3      	ldrh	r3, [r4, #12]
 80045a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ac:	d003      	beq.n	80045b6 <__swsetup_r+0x9a>
 80045ae:	4621      	mov	r1, r4
 80045b0:	4630      	mov	r0, r6
 80045b2:	f000 fa09 	bl	80049c8 <__smakebuf_r>
 80045b6:	89a0      	ldrh	r0, [r4, #12]
 80045b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045bc:	f010 0301 	ands.w	r3, r0, #1
 80045c0:	d00a      	beq.n	80045d8 <__swsetup_r+0xbc>
 80045c2:	2300      	movs	r3, #0
 80045c4:	60a3      	str	r3, [r4, #8]
 80045c6:	6963      	ldr	r3, [r4, #20]
 80045c8:	425b      	negs	r3, r3
 80045ca:	61a3      	str	r3, [r4, #24]
 80045cc:	6923      	ldr	r3, [r4, #16]
 80045ce:	b943      	cbnz	r3, 80045e2 <__swsetup_r+0xc6>
 80045d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80045d4:	d1ba      	bne.n	800454c <__swsetup_r+0x30>
 80045d6:	bd70      	pop	{r4, r5, r6, pc}
 80045d8:	0781      	lsls	r1, r0, #30
 80045da:	bf58      	it	pl
 80045dc:	6963      	ldrpl	r3, [r4, #20]
 80045de:	60a3      	str	r3, [r4, #8]
 80045e0:	e7f4      	b.n	80045cc <__swsetup_r+0xb0>
 80045e2:	2000      	movs	r0, #0
 80045e4:	e7f7      	b.n	80045d6 <__swsetup_r+0xba>
 80045e6:	bf00      	nop
 80045e8:	2000000c 	.word	0x2000000c
 80045ec:	08004fec 	.word	0x08004fec
 80045f0:	0800500c 	.word	0x0800500c
 80045f4:	08004fcc 	.word	0x08004fcc

080045f8 <abort>:
 80045f8:	b508      	push	{r3, lr}
 80045fa:	2006      	movs	r0, #6
 80045fc:	f000 fa4c 	bl	8004a98 <raise>
 8004600:	2001      	movs	r0, #1
 8004602:	f7fc f9a5 	bl	8000950 <_exit>
	...

08004608 <__sflush_r>:
 8004608:	898a      	ldrh	r2, [r1, #12]
 800460a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800460e:	4605      	mov	r5, r0
 8004610:	0710      	lsls	r0, r2, #28
 8004612:	460c      	mov	r4, r1
 8004614:	d458      	bmi.n	80046c8 <__sflush_r+0xc0>
 8004616:	684b      	ldr	r3, [r1, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	dc05      	bgt.n	8004628 <__sflush_r+0x20>
 800461c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	dc02      	bgt.n	8004628 <__sflush_r+0x20>
 8004622:	2000      	movs	r0, #0
 8004624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004628:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800462a:	2e00      	cmp	r6, #0
 800462c:	d0f9      	beq.n	8004622 <__sflush_r+0x1a>
 800462e:	2300      	movs	r3, #0
 8004630:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004634:	682f      	ldr	r7, [r5, #0]
 8004636:	602b      	str	r3, [r5, #0]
 8004638:	d032      	beq.n	80046a0 <__sflush_r+0x98>
 800463a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800463c:	89a3      	ldrh	r3, [r4, #12]
 800463e:	075a      	lsls	r2, r3, #29
 8004640:	d505      	bpl.n	800464e <__sflush_r+0x46>
 8004642:	6863      	ldr	r3, [r4, #4]
 8004644:	1ac0      	subs	r0, r0, r3
 8004646:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004648:	b10b      	cbz	r3, 800464e <__sflush_r+0x46>
 800464a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800464c:	1ac0      	subs	r0, r0, r3
 800464e:	2300      	movs	r3, #0
 8004650:	4602      	mov	r2, r0
 8004652:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004654:	6a21      	ldr	r1, [r4, #32]
 8004656:	4628      	mov	r0, r5
 8004658:	47b0      	blx	r6
 800465a:	1c43      	adds	r3, r0, #1
 800465c:	89a3      	ldrh	r3, [r4, #12]
 800465e:	d106      	bne.n	800466e <__sflush_r+0x66>
 8004660:	6829      	ldr	r1, [r5, #0]
 8004662:	291d      	cmp	r1, #29
 8004664:	d82c      	bhi.n	80046c0 <__sflush_r+0xb8>
 8004666:	4a2a      	ldr	r2, [pc, #168]	; (8004710 <__sflush_r+0x108>)
 8004668:	40ca      	lsrs	r2, r1
 800466a:	07d6      	lsls	r6, r2, #31
 800466c:	d528      	bpl.n	80046c0 <__sflush_r+0xb8>
 800466e:	2200      	movs	r2, #0
 8004670:	6062      	str	r2, [r4, #4]
 8004672:	04d9      	lsls	r1, r3, #19
 8004674:	6922      	ldr	r2, [r4, #16]
 8004676:	6022      	str	r2, [r4, #0]
 8004678:	d504      	bpl.n	8004684 <__sflush_r+0x7c>
 800467a:	1c42      	adds	r2, r0, #1
 800467c:	d101      	bne.n	8004682 <__sflush_r+0x7a>
 800467e:	682b      	ldr	r3, [r5, #0]
 8004680:	b903      	cbnz	r3, 8004684 <__sflush_r+0x7c>
 8004682:	6560      	str	r0, [r4, #84]	; 0x54
 8004684:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004686:	602f      	str	r7, [r5, #0]
 8004688:	2900      	cmp	r1, #0
 800468a:	d0ca      	beq.n	8004622 <__sflush_r+0x1a>
 800468c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004690:	4299      	cmp	r1, r3
 8004692:	d002      	beq.n	800469a <__sflush_r+0x92>
 8004694:	4628      	mov	r0, r5
 8004696:	f7ff fc49 	bl	8003f2c <_free_r>
 800469a:	2000      	movs	r0, #0
 800469c:	6360      	str	r0, [r4, #52]	; 0x34
 800469e:	e7c1      	b.n	8004624 <__sflush_r+0x1c>
 80046a0:	6a21      	ldr	r1, [r4, #32]
 80046a2:	2301      	movs	r3, #1
 80046a4:	4628      	mov	r0, r5
 80046a6:	47b0      	blx	r6
 80046a8:	1c41      	adds	r1, r0, #1
 80046aa:	d1c7      	bne.n	800463c <__sflush_r+0x34>
 80046ac:	682b      	ldr	r3, [r5, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0c4      	beq.n	800463c <__sflush_r+0x34>
 80046b2:	2b1d      	cmp	r3, #29
 80046b4:	d001      	beq.n	80046ba <__sflush_r+0xb2>
 80046b6:	2b16      	cmp	r3, #22
 80046b8:	d101      	bne.n	80046be <__sflush_r+0xb6>
 80046ba:	602f      	str	r7, [r5, #0]
 80046bc:	e7b1      	b.n	8004622 <__sflush_r+0x1a>
 80046be:	89a3      	ldrh	r3, [r4, #12]
 80046c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046c4:	81a3      	strh	r3, [r4, #12]
 80046c6:	e7ad      	b.n	8004624 <__sflush_r+0x1c>
 80046c8:	690f      	ldr	r7, [r1, #16]
 80046ca:	2f00      	cmp	r7, #0
 80046cc:	d0a9      	beq.n	8004622 <__sflush_r+0x1a>
 80046ce:	0793      	lsls	r3, r2, #30
 80046d0:	680e      	ldr	r6, [r1, #0]
 80046d2:	bf08      	it	eq
 80046d4:	694b      	ldreq	r3, [r1, #20]
 80046d6:	600f      	str	r7, [r1, #0]
 80046d8:	bf18      	it	ne
 80046da:	2300      	movne	r3, #0
 80046dc:	eba6 0807 	sub.w	r8, r6, r7
 80046e0:	608b      	str	r3, [r1, #8]
 80046e2:	f1b8 0f00 	cmp.w	r8, #0
 80046e6:	dd9c      	ble.n	8004622 <__sflush_r+0x1a>
 80046e8:	6a21      	ldr	r1, [r4, #32]
 80046ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046ec:	4643      	mov	r3, r8
 80046ee:	463a      	mov	r2, r7
 80046f0:	4628      	mov	r0, r5
 80046f2:	47b0      	blx	r6
 80046f4:	2800      	cmp	r0, #0
 80046f6:	dc06      	bgt.n	8004706 <__sflush_r+0xfe>
 80046f8:	89a3      	ldrh	r3, [r4, #12]
 80046fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046fe:	81a3      	strh	r3, [r4, #12]
 8004700:	f04f 30ff 	mov.w	r0, #4294967295
 8004704:	e78e      	b.n	8004624 <__sflush_r+0x1c>
 8004706:	4407      	add	r7, r0
 8004708:	eba8 0800 	sub.w	r8, r8, r0
 800470c:	e7e9      	b.n	80046e2 <__sflush_r+0xda>
 800470e:	bf00      	nop
 8004710:	20400001 	.word	0x20400001

08004714 <_fflush_r>:
 8004714:	b538      	push	{r3, r4, r5, lr}
 8004716:	690b      	ldr	r3, [r1, #16]
 8004718:	4605      	mov	r5, r0
 800471a:	460c      	mov	r4, r1
 800471c:	b913      	cbnz	r3, 8004724 <_fflush_r+0x10>
 800471e:	2500      	movs	r5, #0
 8004720:	4628      	mov	r0, r5
 8004722:	bd38      	pop	{r3, r4, r5, pc}
 8004724:	b118      	cbz	r0, 800472e <_fflush_r+0x1a>
 8004726:	6983      	ldr	r3, [r0, #24]
 8004728:	b90b      	cbnz	r3, 800472e <_fflush_r+0x1a>
 800472a:	f000 f887 	bl	800483c <__sinit>
 800472e:	4b14      	ldr	r3, [pc, #80]	; (8004780 <_fflush_r+0x6c>)
 8004730:	429c      	cmp	r4, r3
 8004732:	d11b      	bne.n	800476c <_fflush_r+0x58>
 8004734:	686c      	ldr	r4, [r5, #4]
 8004736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0ef      	beq.n	800471e <_fflush_r+0xa>
 800473e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004740:	07d0      	lsls	r0, r2, #31
 8004742:	d404      	bmi.n	800474e <_fflush_r+0x3a>
 8004744:	0599      	lsls	r1, r3, #22
 8004746:	d402      	bmi.n	800474e <_fflush_r+0x3a>
 8004748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800474a:	f000 f915 	bl	8004978 <__retarget_lock_acquire_recursive>
 800474e:	4628      	mov	r0, r5
 8004750:	4621      	mov	r1, r4
 8004752:	f7ff ff59 	bl	8004608 <__sflush_r>
 8004756:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004758:	07da      	lsls	r2, r3, #31
 800475a:	4605      	mov	r5, r0
 800475c:	d4e0      	bmi.n	8004720 <_fflush_r+0xc>
 800475e:	89a3      	ldrh	r3, [r4, #12]
 8004760:	059b      	lsls	r3, r3, #22
 8004762:	d4dd      	bmi.n	8004720 <_fflush_r+0xc>
 8004764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004766:	f000 f908 	bl	800497a <__retarget_lock_release_recursive>
 800476a:	e7d9      	b.n	8004720 <_fflush_r+0xc>
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <_fflush_r+0x70>)
 800476e:	429c      	cmp	r4, r3
 8004770:	d101      	bne.n	8004776 <_fflush_r+0x62>
 8004772:	68ac      	ldr	r4, [r5, #8]
 8004774:	e7df      	b.n	8004736 <_fflush_r+0x22>
 8004776:	4b04      	ldr	r3, [pc, #16]	; (8004788 <_fflush_r+0x74>)
 8004778:	429c      	cmp	r4, r3
 800477a:	bf08      	it	eq
 800477c:	68ec      	ldreq	r4, [r5, #12]
 800477e:	e7da      	b.n	8004736 <_fflush_r+0x22>
 8004780:	08004fec 	.word	0x08004fec
 8004784:	0800500c 	.word	0x0800500c
 8004788:	08004fcc 	.word	0x08004fcc

0800478c <std>:
 800478c:	2300      	movs	r3, #0
 800478e:	b510      	push	{r4, lr}
 8004790:	4604      	mov	r4, r0
 8004792:	e9c0 3300 	strd	r3, r3, [r0]
 8004796:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800479a:	6083      	str	r3, [r0, #8]
 800479c:	8181      	strh	r1, [r0, #12]
 800479e:	6643      	str	r3, [r0, #100]	; 0x64
 80047a0:	81c2      	strh	r2, [r0, #14]
 80047a2:	6183      	str	r3, [r0, #24]
 80047a4:	4619      	mov	r1, r3
 80047a6:	2208      	movs	r2, #8
 80047a8:	305c      	adds	r0, #92	; 0x5c
 80047aa:	f7fd fdc5 	bl	8002338 <memset>
 80047ae:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <std+0x38>)
 80047b0:	6263      	str	r3, [r4, #36]	; 0x24
 80047b2:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <std+0x3c>)
 80047b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80047b6:	4b05      	ldr	r3, [pc, #20]	; (80047cc <std+0x40>)
 80047b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047ba:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <std+0x44>)
 80047bc:	6224      	str	r4, [r4, #32]
 80047be:	6323      	str	r3, [r4, #48]	; 0x30
 80047c0:	bd10      	pop	{r4, pc}
 80047c2:	bf00      	nop
 80047c4:	08004ad1 	.word	0x08004ad1
 80047c8:	08004af3 	.word	0x08004af3
 80047cc:	08004b2b 	.word	0x08004b2b
 80047d0:	08004b4f 	.word	0x08004b4f

080047d4 <_cleanup_r>:
 80047d4:	4901      	ldr	r1, [pc, #4]	; (80047dc <_cleanup_r+0x8>)
 80047d6:	f000 b8af 	b.w	8004938 <_fwalk_reent>
 80047da:	bf00      	nop
 80047dc:	08004715 	.word	0x08004715

080047e0 <__sfmoreglue>:
 80047e0:	b570      	push	{r4, r5, r6, lr}
 80047e2:	2268      	movs	r2, #104	; 0x68
 80047e4:	1e4d      	subs	r5, r1, #1
 80047e6:	4355      	muls	r5, r2
 80047e8:	460e      	mov	r6, r1
 80047ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047ee:	f7ff fc09 	bl	8004004 <_malloc_r>
 80047f2:	4604      	mov	r4, r0
 80047f4:	b140      	cbz	r0, 8004808 <__sfmoreglue+0x28>
 80047f6:	2100      	movs	r1, #0
 80047f8:	e9c0 1600 	strd	r1, r6, [r0]
 80047fc:	300c      	adds	r0, #12
 80047fe:	60a0      	str	r0, [r4, #8]
 8004800:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004804:	f7fd fd98 	bl	8002338 <memset>
 8004808:	4620      	mov	r0, r4
 800480a:	bd70      	pop	{r4, r5, r6, pc}

0800480c <__sfp_lock_acquire>:
 800480c:	4801      	ldr	r0, [pc, #4]	; (8004814 <__sfp_lock_acquire+0x8>)
 800480e:	f000 b8b3 	b.w	8004978 <__retarget_lock_acquire_recursive>
 8004812:	bf00      	nop
 8004814:	2000025d 	.word	0x2000025d

08004818 <__sfp_lock_release>:
 8004818:	4801      	ldr	r0, [pc, #4]	; (8004820 <__sfp_lock_release+0x8>)
 800481a:	f000 b8ae 	b.w	800497a <__retarget_lock_release_recursive>
 800481e:	bf00      	nop
 8004820:	2000025d 	.word	0x2000025d

08004824 <__sinit_lock_acquire>:
 8004824:	4801      	ldr	r0, [pc, #4]	; (800482c <__sinit_lock_acquire+0x8>)
 8004826:	f000 b8a7 	b.w	8004978 <__retarget_lock_acquire_recursive>
 800482a:	bf00      	nop
 800482c:	2000025e 	.word	0x2000025e

08004830 <__sinit_lock_release>:
 8004830:	4801      	ldr	r0, [pc, #4]	; (8004838 <__sinit_lock_release+0x8>)
 8004832:	f000 b8a2 	b.w	800497a <__retarget_lock_release_recursive>
 8004836:	bf00      	nop
 8004838:	2000025e 	.word	0x2000025e

0800483c <__sinit>:
 800483c:	b510      	push	{r4, lr}
 800483e:	4604      	mov	r4, r0
 8004840:	f7ff fff0 	bl	8004824 <__sinit_lock_acquire>
 8004844:	69a3      	ldr	r3, [r4, #24]
 8004846:	b11b      	cbz	r3, 8004850 <__sinit+0x14>
 8004848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800484c:	f7ff bff0 	b.w	8004830 <__sinit_lock_release>
 8004850:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004854:	6523      	str	r3, [r4, #80]	; 0x50
 8004856:	4b13      	ldr	r3, [pc, #76]	; (80048a4 <__sinit+0x68>)
 8004858:	4a13      	ldr	r2, [pc, #76]	; (80048a8 <__sinit+0x6c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	62a2      	str	r2, [r4, #40]	; 0x28
 800485e:	42a3      	cmp	r3, r4
 8004860:	bf04      	itt	eq
 8004862:	2301      	moveq	r3, #1
 8004864:	61a3      	streq	r3, [r4, #24]
 8004866:	4620      	mov	r0, r4
 8004868:	f000 f820 	bl	80048ac <__sfp>
 800486c:	6060      	str	r0, [r4, #4]
 800486e:	4620      	mov	r0, r4
 8004870:	f000 f81c 	bl	80048ac <__sfp>
 8004874:	60a0      	str	r0, [r4, #8]
 8004876:	4620      	mov	r0, r4
 8004878:	f000 f818 	bl	80048ac <__sfp>
 800487c:	2200      	movs	r2, #0
 800487e:	60e0      	str	r0, [r4, #12]
 8004880:	2104      	movs	r1, #4
 8004882:	6860      	ldr	r0, [r4, #4]
 8004884:	f7ff ff82 	bl	800478c <std>
 8004888:	68a0      	ldr	r0, [r4, #8]
 800488a:	2201      	movs	r2, #1
 800488c:	2109      	movs	r1, #9
 800488e:	f7ff ff7d 	bl	800478c <std>
 8004892:	68e0      	ldr	r0, [r4, #12]
 8004894:	2202      	movs	r2, #2
 8004896:	2112      	movs	r1, #18
 8004898:	f7ff ff78 	bl	800478c <std>
 800489c:	2301      	movs	r3, #1
 800489e:	61a3      	str	r3, [r4, #24]
 80048a0:	e7d2      	b.n	8004848 <__sinit+0xc>
 80048a2:	bf00      	nop
 80048a4:	08004c50 	.word	0x08004c50
 80048a8:	080047d5 	.word	0x080047d5

080048ac <__sfp>:
 80048ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ae:	4607      	mov	r7, r0
 80048b0:	f7ff ffac 	bl	800480c <__sfp_lock_acquire>
 80048b4:	4b1e      	ldr	r3, [pc, #120]	; (8004930 <__sfp+0x84>)
 80048b6:	681e      	ldr	r6, [r3, #0]
 80048b8:	69b3      	ldr	r3, [r6, #24]
 80048ba:	b913      	cbnz	r3, 80048c2 <__sfp+0x16>
 80048bc:	4630      	mov	r0, r6
 80048be:	f7ff ffbd 	bl	800483c <__sinit>
 80048c2:	3648      	adds	r6, #72	; 0x48
 80048c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80048c8:	3b01      	subs	r3, #1
 80048ca:	d503      	bpl.n	80048d4 <__sfp+0x28>
 80048cc:	6833      	ldr	r3, [r6, #0]
 80048ce:	b30b      	cbz	r3, 8004914 <__sfp+0x68>
 80048d0:	6836      	ldr	r6, [r6, #0]
 80048d2:	e7f7      	b.n	80048c4 <__sfp+0x18>
 80048d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80048d8:	b9d5      	cbnz	r5, 8004910 <__sfp+0x64>
 80048da:	4b16      	ldr	r3, [pc, #88]	; (8004934 <__sfp+0x88>)
 80048dc:	60e3      	str	r3, [r4, #12]
 80048de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048e2:	6665      	str	r5, [r4, #100]	; 0x64
 80048e4:	f000 f847 	bl	8004976 <__retarget_lock_init_recursive>
 80048e8:	f7ff ff96 	bl	8004818 <__sfp_lock_release>
 80048ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80048f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80048f4:	6025      	str	r5, [r4, #0]
 80048f6:	61a5      	str	r5, [r4, #24]
 80048f8:	2208      	movs	r2, #8
 80048fa:	4629      	mov	r1, r5
 80048fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004900:	f7fd fd1a 	bl	8002338 <memset>
 8004904:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004908:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800490c:	4620      	mov	r0, r4
 800490e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004910:	3468      	adds	r4, #104	; 0x68
 8004912:	e7d9      	b.n	80048c8 <__sfp+0x1c>
 8004914:	2104      	movs	r1, #4
 8004916:	4638      	mov	r0, r7
 8004918:	f7ff ff62 	bl	80047e0 <__sfmoreglue>
 800491c:	4604      	mov	r4, r0
 800491e:	6030      	str	r0, [r6, #0]
 8004920:	2800      	cmp	r0, #0
 8004922:	d1d5      	bne.n	80048d0 <__sfp+0x24>
 8004924:	f7ff ff78 	bl	8004818 <__sfp_lock_release>
 8004928:	230c      	movs	r3, #12
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	e7ee      	b.n	800490c <__sfp+0x60>
 800492e:	bf00      	nop
 8004930:	08004c50 	.word	0x08004c50
 8004934:	ffff0001 	.word	0xffff0001

08004938 <_fwalk_reent>:
 8004938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800493c:	4606      	mov	r6, r0
 800493e:	4688      	mov	r8, r1
 8004940:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004944:	2700      	movs	r7, #0
 8004946:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800494a:	f1b9 0901 	subs.w	r9, r9, #1
 800494e:	d505      	bpl.n	800495c <_fwalk_reent+0x24>
 8004950:	6824      	ldr	r4, [r4, #0]
 8004952:	2c00      	cmp	r4, #0
 8004954:	d1f7      	bne.n	8004946 <_fwalk_reent+0xe>
 8004956:	4638      	mov	r0, r7
 8004958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800495c:	89ab      	ldrh	r3, [r5, #12]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d907      	bls.n	8004972 <_fwalk_reent+0x3a>
 8004962:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004966:	3301      	adds	r3, #1
 8004968:	d003      	beq.n	8004972 <_fwalk_reent+0x3a>
 800496a:	4629      	mov	r1, r5
 800496c:	4630      	mov	r0, r6
 800496e:	47c0      	blx	r8
 8004970:	4307      	orrs	r7, r0
 8004972:	3568      	adds	r5, #104	; 0x68
 8004974:	e7e9      	b.n	800494a <_fwalk_reent+0x12>

08004976 <__retarget_lock_init_recursive>:
 8004976:	4770      	bx	lr

08004978 <__retarget_lock_acquire_recursive>:
 8004978:	4770      	bx	lr

0800497a <__retarget_lock_release_recursive>:
 800497a:	4770      	bx	lr

0800497c <__swhatbuf_r>:
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	460e      	mov	r6, r1
 8004980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004984:	2900      	cmp	r1, #0
 8004986:	b096      	sub	sp, #88	; 0x58
 8004988:	4614      	mov	r4, r2
 800498a:	461d      	mov	r5, r3
 800498c:	da08      	bge.n	80049a0 <__swhatbuf_r+0x24>
 800498e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	602a      	str	r2, [r5, #0]
 8004996:	061a      	lsls	r2, r3, #24
 8004998:	d410      	bmi.n	80049bc <__swhatbuf_r+0x40>
 800499a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800499e:	e00e      	b.n	80049be <__swhatbuf_r+0x42>
 80049a0:	466a      	mov	r2, sp
 80049a2:	f000 f8fb 	bl	8004b9c <_fstat_r>
 80049a6:	2800      	cmp	r0, #0
 80049a8:	dbf1      	blt.n	800498e <__swhatbuf_r+0x12>
 80049aa:	9a01      	ldr	r2, [sp, #4]
 80049ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80049b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80049b4:	425a      	negs	r2, r3
 80049b6:	415a      	adcs	r2, r3
 80049b8:	602a      	str	r2, [r5, #0]
 80049ba:	e7ee      	b.n	800499a <__swhatbuf_r+0x1e>
 80049bc:	2340      	movs	r3, #64	; 0x40
 80049be:	2000      	movs	r0, #0
 80049c0:	6023      	str	r3, [r4, #0]
 80049c2:	b016      	add	sp, #88	; 0x58
 80049c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080049c8 <__smakebuf_r>:
 80049c8:	898b      	ldrh	r3, [r1, #12]
 80049ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049cc:	079d      	lsls	r5, r3, #30
 80049ce:	4606      	mov	r6, r0
 80049d0:	460c      	mov	r4, r1
 80049d2:	d507      	bpl.n	80049e4 <__smakebuf_r+0x1c>
 80049d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	6123      	str	r3, [r4, #16]
 80049dc:	2301      	movs	r3, #1
 80049de:	6163      	str	r3, [r4, #20]
 80049e0:	b002      	add	sp, #8
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	ab01      	add	r3, sp, #4
 80049e6:	466a      	mov	r2, sp
 80049e8:	f7ff ffc8 	bl	800497c <__swhatbuf_r>
 80049ec:	9900      	ldr	r1, [sp, #0]
 80049ee:	4605      	mov	r5, r0
 80049f0:	4630      	mov	r0, r6
 80049f2:	f7ff fb07 	bl	8004004 <_malloc_r>
 80049f6:	b948      	cbnz	r0, 8004a0c <__smakebuf_r+0x44>
 80049f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049fc:	059a      	lsls	r2, r3, #22
 80049fe:	d4ef      	bmi.n	80049e0 <__smakebuf_r+0x18>
 8004a00:	f023 0303 	bic.w	r3, r3, #3
 8004a04:	f043 0302 	orr.w	r3, r3, #2
 8004a08:	81a3      	strh	r3, [r4, #12]
 8004a0a:	e7e3      	b.n	80049d4 <__smakebuf_r+0xc>
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <__smakebuf_r+0x7c>)
 8004a0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a10:	89a3      	ldrh	r3, [r4, #12]
 8004a12:	6020      	str	r0, [r4, #0]
 8004a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a18:	81a3      	strh	r3, [r4, #12]
 8004a1a:	9b00      	ldr	r3, [sp, #0]
 8004a1c:	6163      	str	r3, [r4, #20]
 8004a1e:	9b01      	ldr	r3, [sp, #4]
 8004a20:	6120      	str	r0, [r4, #16]
 8004a22:	b15b      	cbz	r3, 8004a3c <__smakebuf_r+0x74>
 8004a24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a28:	4630      	mov	r0, r6
 8004a2a:	f000 f8c9 	bl	8004bc0 <_isatty_r>
 8004a2e:	b128      	cbz	r0, 8004a3c <__smakebuf_r+0x74>
 8004a30:	89a3      	ldrh	r3, [r4, #12]
 8004a32:	f023 0303 	bic.w	r3, r3, #3
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	81a3      	strh	r3, [r4, #12]
 8004a3c:	89a0      	ldrh	r0, [r4, #12]
 8004a3e:	4305      	orrs	r5, r0
 8004a40:	81a5      	strh	r5, [r4, #12]
 8004a42:	e7cd      	b.n	80049e0 <__smakebuf_r+0x18>
 8004a44:	080047d5 	.word	0x080047d5

08004a48 <_raise_r>:
 8004a48:	291f      	cmp	r1, #31
 8004a4a:	b538      	push	{r3, r4, r5, lr}
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	460d      	mov	r5, r1
 8004a50:	d904      	bls.n	8004a5c <_raise_r+0x14>
 8004a52:	2316      	movs	r3, #22
 8004a54:	6003      	str	r3, [r0, #0]
 8004a56:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5a:	bd38      	pop	{r3, r4, r5, pc}
 8004a5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004a5e:	b112      	cbz	r2, 8004a66 <_raise_r+0x1e>
 8004a60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004a64:	b94b      	cbnz	r3, 8004a7a <_raise_r+0x32>
 8004a66:	4620      	mov	r0, r4
 8004a68:	f000 f830 	bl	8004acc <_getpid_r>
 8004a6c:	462a      	mov	r2, r5
 8004a6e:	4601      	mov	r1, r0
 8004a70:	4620      	mov	r0, r4
 8004a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a76:	f000 b817 	b.w	8004aa8 <_kill_r>
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d00a      	beq.n	8004a94 <_raise_r+0x4c>
 8004a7e:	1c59      	adds	r1, r3, #1
 8004a80:	d103      	bne.n	8004a8a <_raise_r+0x42>
 8004a82:	2316      	movs	r3, #22
 8004a84:	6003      	str	r3, [r0, #0]
 8004a86:	2001      	movs	r0, #1
 8004a88:	e7e7      	b.n	8004a5a <_raise_r+0x12>
 8004a8a:	2400      	movs	r4, #0
 8004a8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004a90:	4628      	mov	r0, r5
 8004a92:	4798      	blx	r3
 8004a94:	2000      	movs	r0, #0
 8004a96:	e7e0      	b.n	8004a5a <_raise_r+0x12>

08004a98 <raise>:
 8004a98:	4b02      	ldr	r3, [pc, #8]	; (8004aa4 <raise+0xc>)
 8004a9a:	4601      	mov	r1, r0
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	f7ff bfd3 	b.w	8004a48 <_raise_r>
 8004aa2:	bf00      	nop
 8004aa4:	2000000c 	.word	0x2000000c

08004aa8 <_kill_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	4d07      	ldr	r5, [pc, #28]	; (8004ac8 <_kill_r+0x20>)
 8004aac:	2300      	movs	r3, #0
 8004aae:	4604      	mov	r4, r0
 8004ab0:	4608      	mov	r0, r1
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	602b      	str	r3, [r5, #0]
 8004ab6:	f7fb ff3b 	bl	8000930 <_kill>
 8004aba:	1c43      	adds	r3, r0, #1
 8004abc:	d102      	bne.n	8004ac4 <_kill_r+0x1c>
 8004abe:	682b      	ldr	r3, [r5, #0]
 8004ac0:	b103      	cbz	r3, 8004ac4 <_kill_r+0x1c>
 8004ac2:	6023      	str	r3, [r4, #0]
 8004ac4:	bd38      	pop	{r3, r4, r5, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20000258 	.word	0x20000258

08004acc <_getpid_r>:
 8004acc:	f7fb bf28 	b.w	8000920 <_getpid>

08004ad0 <__sread>:
 8004ad0:	b510      	push	{r4, lr}
 8004ad2:	460c      	mov	r4, r1
 8004ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ad8:	f000 f894 	bl	8004c04 <_read_r>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	bfab      	itete	ge
 8004ae0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ae2:	89a3      	ldrhlt	r3, [r4, #12]
 8004ae4:	181b      	addge	r3, r3, r0
 8004ae6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004aea:	bfac      	ite	ge
 8004aec:	6563      	strge	r3, [r4, #84]	; 0x54
 8004aee:	81a3      	strhlt	r3, [r4, #12]
 8004af0:	bd10      	pop	{r4, pc}

08004af2 <__swrite>:
 8004af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004af6:	461f      	mov	r7, r3
 8004af8:	898b      	ldrh	r3, [r1, #12]
 8004afa:	05db      	lsls	r3, r3, #23
 8004afc:	4605      	mov	r5, r0
 8004afe:	460c      	mov	r4, r1
 8004b00:	4616      	mov	r6, r2
 8004b02:	d505      	bpl.n	8004b10 <__swrite+0x1e>
 8004b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b08:	2302      	movs	r3, #2
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f000 f868 	bl	8004be0 <_lseek_r>
 8004b10:	89a3      	ldrh	r3, [r4, #12]
 8004b12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b1a:	81a3      	strh	r3, [r4, #12]
 8004b1c:	4632      	mov	r2, r6
 8004b1e:	463b      	mov	r3, r7
 8004b20:	4628      	mov	r0, r5
 8004b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b26:	f000 b817 	b.w	8004b58 <_write_r>

08004b2a <__sseek>:
 8004b2a:	b510      	push	{r4, lr}
 8004b2c:	460c      	mov	r4, r1
 8004b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b32:	f000 f855 	bl	8004be0 <_lseek_r>
 8004b36:	1c43      	adds	r3, r0, #1
 8004b38:	89a3      	ldrh	r3, [r4, #12]
 8004b3a:	bf15      	itete	ne
 8004b3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b46:	81a3      	strheq	r3, [r4, #12]
 8004b48:	bf18      	it	ne
 8004b4a:	81a3      	strhne	r3, [r4, #12]
 8004b4c:	bd10      	pop	{r4, pc}

08004b4e <__sclose>:
 8004b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b52:	f000 b813 	b.w	8004b7c <_close_r>
	...

08004b58 <_write_r>:
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	4d07      	ldr	r5, [pc, #28]	; (8004b78 <_write_r+0x20>)
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	4608      	mov	r0, r1
 8004b60:	4611      	mov	r1, r2
 8004b62:	2200      	movs	r2, #0
 8004b64:	602a      	str	r2, [r5, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	f7fb ff19 	bl	800099e <_write>
 8004b6c:	1c43      	adds	r3, r0, #1
 8004b6e:	d102      	bne.n	8004b76 <_write_r+0x1e>
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	b103      	cbz	r3, 8004b76 <_write_r+0x1e>
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	bd38      	pop	{r3, r4, r5, pc}
 8004b78:	20000258 	.word	0x20000258

08004b7c <_close_r>:
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	4d06      	ldr	r5, [pc, #24]	; (8004b98 <_close_r+0x1c>)
 8004b80:	2300      	movs	r3, #0
 8004b82:	4604      	mov	r4, r0
 8004b84:	4608      	mov	r0, r1
 8004b86:	602b      	str	r3, [r5, #0]
 8004b88:	f7fb ff25 	bl	80009d6 <_close>
 8004b8c:	1c43      	adds	r3, r0, #1
 8004b8e:	d102      	bne.n	8004b96 <_close_r+0x1a>
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	b103      	cbz	r3, 8004b96 <_close_r+0x1a>
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	bd38      	pop	{r3, r4, r5, pc}
 8004b98:	20000258 	.word	0x20000258

08004b9c <_fstat_r>:
 8004b9c:	b538      	push	{r3, r4, r5, lr}
 8004b9e:	4d07      	ldr	r5, [pc, #28]	; (8004bbc <_fstat_r+0x20>)
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	4608      	mov	r0, r1
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	602b      	str	r3, [r5, #0]
 8004baa:	f7fb ff20 	bl	80009ee <_fstat>
 8004bae:	1c43      	adds	r3, r0, #1
 8004bb0:	d102      	bne.n	8004bb8 <_fstat_r+0x1c>
 8004bb2:	682b      	ldr	r3, [r5, #0]
 8004bb4:	b103      	cbz	r3, 8004bb8 <_fstat_r+0x1c>
 8004bb6:	6023      	str	r3, [r4, #0]
 8004bb8:	bd38      	pop	{r3, r4, r5, pc}
 8004bba:	bf00      	nop
 8004bbc:	20000258 	.word	0x20000258

08004bc0 <_isatty_r>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	4d06      	ldr	r5, [pc, #24]	; (8004bdc <_isatty_r+0x1c>)
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	4608      	mov	r0, r1
 8004bca:	602b      	str	r3, [r5, #0]
 8004bcc:	f7fb ff1f 	bl	8000a0e <_isatty>
 8004bd0:	1c43      	adds	r3, r0, #1
 8004bd2:	d102      	bne.n	8004bda <_isatty_r+0x1a>
 8004bd4:	682b      	ldr	r3, [r5, #0]
 8004bd6:	b103      	cbz	r3, 8004bda <_isatty_r+0x1a>
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	bd38      	pop	{r3, r4, r5, pc}
 8004bdc:	20000258 	.word	0x20000258

08004be0 <_lseek_r>:
 8004be0:	b538      	push	{r3, r4, r5, lr}
 8004be2:	4d07      	ldr	r5, [pc, #28]	; (8004c00 <_lseek_r+0x20>)
 8004be4:	4604      	mov	r4, r0
 8004be6:	4608      	mov	r0, r1
 8004be8:	4611      	mov	r1, r2
 8004bea:	2200      	movs	r2, #0
 8004bec:	602a      	str	r2, [r5, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f7fb ff18 	bl	8000a24 <_lseek>
 8004bf4:	1c43      	adds	r3, r0, #1
 8004bf6:	d102      	bne.n	8004bfe <_lseek_r+0x1e>
 8004bf8:	682b      	ldr	r3, [r5, #0]
 8004bfa:	b103      	cbz	r3, 8004bfe <_lseek_r+0x1e>
 8004bfc:	6023      	str	r3, [r4, #0]
 8004bfe:	bd38      	pop	{r3, r4, r5, pc}
 8004c00:	20000258 	.word	0x20000258

08004c04 <_read_r>:
 8004c04:	b538      	push	{r3, r4, r5, lr}
 8004c06:	4d07      	ldr	r5, [pc, #28]	; (8004c24 <_read_r+0x20>)
 8004c08:	4604      	mov	r4, r0
 8004c0a:	4608      	mov	r0, r1
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	2200      	movs	r2, #0
 8004c10:	602a      	str	r2, [r5, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	f7fb fea6 	bl	8000964 <_read>
 8004c18:	1c43      	adds	r3, r0, #1
 8004c1a:	d102      	bne.n	8004c22 <_read_r+0x1e>
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	b103      	cbz	r3, 8004c22 <_read_r+0x1e>
 8004c20:	6023      	str	r3, [r4, #0]
 8004c22:	bd38      	pop	{r3, r4, r5, pc}
 8004c24:	20000258 	.word	0x20000258

08004c28 <_init>:
 8004c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2a:	bf00      	nop
 8004c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2e:	bc08      	pop	{r3}
 8004c30:	469e      	mov	lr, r3
 8004c32:	4770      	bx	lr

08004c34 <_fini>:
 8004c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c36:	bf00      	nop
 8004c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3a:	bc08      	pop	{r3}
 8004c3c:	469e      	mov	lr, r3
 8004c3e:	4770      	bx	lr
