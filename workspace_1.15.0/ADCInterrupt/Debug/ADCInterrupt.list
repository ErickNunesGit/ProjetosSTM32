
ADCInterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b58  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08004d58  08004d58  00014d58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005144  08005144  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005144  08005144  00015144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800514c  0800514c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800514c  0800514c  0001514c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005150  08005150  00015150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  200001dc  08005330  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08005330  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007371  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001778  00000000  00000000  0002757b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000678  00000000  00000000  00028cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b0  00000000  00000000  00029370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027464  00000000  00000000  00029920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007aad  00000000  00000000  00050d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2388  00000000  00000000  00058831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014abb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026b0  00000000  00000000  0014ac0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08004d40 	.word	0x08004d40

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08004d40 	.word	0x08004d40

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	0000      	movs	r0, r0
	...

080005f8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  adc = (3.3/255)*HAL_ADC_GetValue(&hadc1);
 8000600:	480b      	ldr	r0, [pc, #44]	; (8000630 <HAL_ADC_ConvCpltCallback+0x38>)
 8000602:	f000 fd1f 	bl	8001044 <HAL_ADC_GetValue>
 8000606:	ee07 0a90 	vmov	s15, r0
 800060a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800060e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000628 <HAL_ADC_ConvCpltCallback+0x30>
 8000612:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000616:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_ADC_ConvCpltCallback+0x3c>)
 800061c:	edc3 7a00 	vstr	s15, [r3]
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	4db41a81 	.word	0x4db41a81
 800062c:	3f8a80e7 	.word	0x3f8a80e7
 8000630:	200001fc 	.word	0x200001fc
 8000634:	200001f8 	.word	0x200001f8

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063c:	f000 fa79 	bl	8000b32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000640:	f000 f80a 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000644:	f000 f8b6 	bl	80007b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000648:	f000 f862 	bl	8000710 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1); //Habilita o ADC em modo de interrupção
 800064c:	4801      	ldr	r0, [pc, #4]	; (8000654 <main+0x1c>)
 800064e:	f000 fb11 	bl	8000c74 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000652:	e7fe      	b.n	8000652 <main+0x1a>
 8000654:	200001fc 	.word	0x200001fc

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2234      	movs	r2, #52	; 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fef0 	bl	800244c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <SystemClock_Config+0xb0>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemClock_Config+0xb0>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SystemClock_Config+0xb0>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <SystemClock_Config+0xb4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800069c:	4a1b      	ldr	r2, [pc, #108]	; (800070c <SystemClock_Config+0xb4>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <SystemClock_Config+0xb4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006bc:	2300      	movs	r3, #0
 80006be:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 f9f7 	bl	8001ab8 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006d0:	f000 f888 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fc90 	bl	8002014 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006fa:	f000 f873 	bl	80007e4 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	; 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <MX_ADC1_Init+0x9c>)
 8000726:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_ADC1_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800072e:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000730:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000734:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000738:	2201      	movs	r2, #1
 800073a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_ADC1_Init+0x98>)
 800073e:	2201      	movs	r2, #1
 8000740:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_ADC1_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000752:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <MX_ADC1_Init+0xa0>)
 8000754:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_ADC1_Init+0x98>)
 800075e:	2201      	movs	r2, #1
 8000760:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_ADC1_Init+0x98>)
 800076c:	2201      	movs	r2, #1
 800076e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000772:	f000 fa3b 	bl	8000bec <HAL_ADC_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800077c:	f000 f832 	bl	80007e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000780:	2303      	movs	r3, #3
 8000782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000784:	2301      	movs	r3, #1
 8000786:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000788:	2307      	movs	r3, #7
 800078a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078c:	463b      	mov	r3, r7
 800078e:	4619      	mov	r1, r3
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000792:	f000 fc79 	bl	8001088 <HAL_ADC_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800079c:	f000 f822 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200001fc 	.word	0x200001fc
 80007ac:	40012000 	.word	0x40012000
 80007b0:	0f000001 	.word	0x0f000001

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_GPIO_Init+0x2c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <MX_GPIO_Init+0x2c>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_GPIO_Init+0x2c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <HAL_MspInit+0x44>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a0e      	ldr	r2, [pc, #56]	; (8000834 <HAL_MspInit+0x44>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <HAL_MspInit+0x44>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_MspInit+0x44>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_MspInit+0x44>)
 8000814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000818:	6453      	str	r3, [r2, #68]	; 0x44
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_MspInit+0x44>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a19      	ldr	r2, [pc, #100]	; (80008bc <HAL_ADC_MspInit+0x84>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d12b      	bne.n	80008b2 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <HAL_ADC_MspInit+0x88>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <HAL_ADC_MspInit+0x88>)
 8000860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000864:	6453      	str	r3, [r2, #68]	; 0x44
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <HAL_ADC_MspInit+0x88>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <HAL_ADC_MspInit+0x88>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <HAL_ADC_MspInit+0x88>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_ADC_MspInit+0x88>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800088a:	2308      	movs	r3, #8
 800088c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088e:	2303      	movs	r3, #3
 8000890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4809      	ldr	r0, [pc, #36]	; (80008c4 <HAL_ADC_MspInit+0x8c>)
 800089e:	f000 ff5f 	bl	8001760 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	2012      	movs	r0, #18
 80008a8:	f000 ff23 	bl	80016f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80008ac:	2012      	movs	r0, #18
 80008ae:	f000 ff3c 	bl	800172a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008b2:	bf00      	nop
 80008b4:	3728      	adds	r7, #40	; 0x28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40012000 	.word	0x40012000
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020000 	.word	0x40020000

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <NMI_Handler+0x4>

080008ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <MemManage_Handler+0x4>

080008da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000914:	f000 f94a 	bl	8000bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}

0800091c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <ADC_IRQHandler+0x10>)
 8000922:	f000 fa7f 	bl	8000e24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200001fc 	.word	0x200001fc

08000930 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
	return 1;
 8000934:	2301      	movs	r3, #1
}
 8000936:	4618      	mov	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <_kill>:

int _kill(int pid, int sig)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800094a:	f001 fd55 	bl	80023f8 <__errno>
 800094e:	4603      	mov	r3, r0
 8000950:	2216      	movs	r2, #22
 8000952:	601a      	str	r2, [r3, #0]
	return -1;
 8000954:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <_exit>:

void _exit (int status)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000968:	f04f 31ff 	mov.w	r1, #4294967295
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff ffe7 	bl	8000940 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000972:	e7fe      	b.n	8000972 <_exit+0x12>

08000974 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	e00a      	b.n	800099c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000986:	f3af 8000 	nop.w
 800098a:	4601      	mov	r1, r0
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	60ba      	str	r2, [r7, #8]
 8000992:	b2ca      	uxtb	r2, r1
 8000994:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	3301      	adds	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697a      	ldr	r2, [r7, #20]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	dbf0      	blt.n	8000986 <_read+0x12>
	}

return len;
 80009a4:	687b      	ldr	r3, [r7, #4]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	60f8      	str	r0, [r7, #12]
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	e009      	b.n	80009d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	60ba      	str	r2, [r7, #8]
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	3301      	adds	r3, #1
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697a      	ldr	r2, [r7, #20]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	429a      	cmp	r2, r3
 80009da:	dbf1      	blt.n	80009c0 <_write+0x12>
	}
	return len;
 80009dc:	687b      	ldr	r3, [r7, #4]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <_close>:

int _close(int file)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
	return -1;
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b083      	sub	sp, #12
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
 8000a06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a0e:	605a      	str	r2, [r3, #4]
	return 0;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <_isatty>:

int _isatty(int file)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
	return 1;
 8000a26:	2301      	movs	r3, #1
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
	return 0;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a58:	4a14      	ldr	r2, [pc, #80]	; (8000aac <_sbrk+0x5c>)
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <_sbrk+0x60>)
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <_sbrk+0x64>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <_sbrk+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d207      	bcs.n	8000a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a80:	f001 fcba 	bl	80023f8 <__errno>
 8000a84:	4603      	mov	r3, r0
 8000a86:	220c      	movs	r2, #12
 8000a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	e009      	b.n	8000aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <_sbrk+0x64>)
 8000aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20080000 	.word	0x20080000
 8000ab0:	00000400 	.word	0x00000400
 8000ab4:	20000244 	.word	0x20000244
 8000ab8:	20000260 	.word	0x20000260

08000abc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <SystemInit+0x20>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <SystemInit+0x20>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae4:	480d      	ldr	r0, [pc, #52]	; (8000b1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ae6:	490e      	ldr	r1, [pc, #56]	; (8000b20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aec:	e002      	b.n	8000af4 <LoopCopyDataInit>

08000aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af2:	3304      	adds	r3, #4

08000af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af8:	d3f9      	bcc.n	8000aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afa:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000afc:	4c0b      	ldr	r4, [pc, #44]	; (8000b2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b00:	e001      	b.n	8000b06 <LoopFillZerobss>

08000b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b04:	3204      	adds	r2, #4

08000b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b08:	d3fb      	bcc.n	8000b02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b0a:	f7ff ffd7 	bl	8000abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0e:	f001 fc79 	bl	8002404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b12:	f7ff fd91 	bl	8000638 <main>
  bx  lr    
 8000b16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b18:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b20:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000b24:	08005154 	.word	0x08005154
  ldr r2, =_sbss
 8000b28:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000b2c:	2000025c 	.word	0x2000025c

08000b30 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <CAN1_RX0_IRQHandler>

08000b32 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b36:	2003      	movs	r0, #3
 8000b38:	f000 fdd0 	bl	80016dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f000 f805 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b42:	f7ff fe55 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_InitTick+0x54>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_InitTick+0x58>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 fdeb 	bl	8001746 <HAL_SYSTICK_Config>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00e      	b.n	8000b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d80a      	bhi.n	8000b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f000 fdb3 	bl	80016f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b8c:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <HAL_InitTick+0x5c>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e000      	b.n	8000b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20000004 	.word	0x20000004

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000248 	.word	0x20000248

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000248 	.word	0x20000248

08000bec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d101      	bne.n	8000c02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e031      	b.n	8000c66 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d109      	bne.n	8000c1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff fe14 	bl	8000838 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f003 0310 	and.w	r3, r3, #16
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d116      	bne.n	8000c58 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <HAL_ADC_Init+0x84>)
 8000c30:	4013      	ands	r3, r2
 8000c32:	f043 0202 	orr.w	r2, r3, #2
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f000 fb7a 	bl	8001334 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f023 0303 	bic.w	r3, r3, #3
 8000c4e:	f043 0201 	orr.w	r2, r3, #1
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	641a      	str	r2, [r3, #64]	; 0x40
 8000c56:	e001      	b.n	8000c5c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	ffffeefd 	.word	0xffffeefd

08000c74 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d101      	bne.n	8000c8e <HAL_ADC_Start_IT+0x1a>
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	e0b5      	b.n	8000dfa <HAL_ADC_Start_IT+0x186>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2201      	movs	r2, #1
 8000c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d018      	beq.n	8000cd6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f042 0201 	orr.w	r2, r2, #1
 8000cb2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000cb4:	4b54      	ldr	r3, [pc, #336]	; (8000e08 <HAL_ADC_Start_IT+0x194>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a54      	ldr	r2, [pc, #336]	; (8000e0c <HAL_ADC_Start_IT+0x198>)
 8000cba:	fba2 2303 	umull	r2, r3, r2, r3
 8000cbe:	0c9a      	lsrs	r2, r3, #18
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000cc8:	e002      	b.n	8000cd0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1f9      	bne.n	8000cca <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d17d      	bne.n	8000de0 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce8:	4b49      	ldr	r3, [pc, #292]	; (8000e10 <HAL_ADC_Start_IT+0x19c>)
 8000cea:	4013      	ands	r3, r2
 8000cec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d007      	beq.n	8000d12 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d1e:	d106      	bne.n	8000d2e <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d24:	f023 0206 	bic.w	r2, r3, #6
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	645a      	str	r2, [r3, #68]	; 0x44
 8000d2c:	e002      	b.n	8000d34 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2200      	movs	r2, #0
 8000d32:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d44:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	6859      	ldr	r1, [r3, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b30      	ldr	r3, [pc, #192]	; (8000e14 <HAL_ADC_Start_IT+0x1a0>)
 8000d52:	430b      	orrs	r3, r1
 8000d54:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000d56:	4b30      	ldr	r3, [pc, #192]	; (8000e18 <HAL_ADC_Start_IT+0x1a4>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 031f 	and.w	r3, r3, #31
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d10f      	bne.n	8000d82 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d143      	bne.n	8000df8 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	e03a      	b.n	8000df8 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a25      	ldr	r2, [pc, #148]	; (8000e1c <HAL_ADC_Start_IT+0x1a8>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d10e      	bne.n	8000daa <HAL_ADC_Start_IT+0x136>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d107      	bne.n	8000daa <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000da8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8000daa:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <HAL_ADC_Start_IT+0x1a4>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 0310 	and.w	r3, r3, #16
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d120      	bne.n	8000df8 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <HAL_ADC_Start_IT+0x1ac>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d11b      	bne.n	8000df8 <HAL_ADC_Start_IT+0x184>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d114      	bne.n	8000df8 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	689a      	ldr	r2, [r3, #8]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	e00b      	b.n	8000df8 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	f043 0210 	orr.w	r2, r3, #16
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df0:	f043 0201 	orr.w	r2, r3, #1
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	431bde83 	.word	0x431bde83
 8000e10:	fffff8fe 	.word	0xfffff8fe
 8000e14:	04000020 	.word	0x04000020
 8000e18:	40012300 	.word	0x40012300
 8000e1c:	40012000 	.word	0x40012000
 8000e20:	40012200 	.word	0x40012200

08000e24 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	f003 0320 	and.w	r3, r3, #32
 8000e52:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d049      	beq.n	8000eee <HAL_ADC_IRQHandler+0xca>
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d046      	beq.n	8000eee <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	f003 0310 	and.w	r3, r3, #16
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d105      	bne.n	8000e78 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d12b      	bne.n	8000ede <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d127      	bne.n	8000ede <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e94:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d006      	beq.n	8000eaa <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d119      	bne.n	8000ede <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f022 0220 	bic.w	r2, r2, #32
 8000eb8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d105      	bne.n	8000ede <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f043 0201 	orr.w	r2, r3, #1
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff fb8a 	bl	80005f8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f06f 0212 	mvn.w	r2, #18
 8000eec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000efc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d057      	beq.n	8000fb4 <HAL_ADC_IRQHandler+0x190>
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d054      	beq.n	8000fb4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d105      	bne.n	8000f22 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d139      	bne.n	8000fa4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f36:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d006      	beq.n	8000f4c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d12b      	bne.n	8000fa4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d124      	bne.n	8000fa4 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d11d      	bne.n	8000fa4 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d119      	bne.n	8000fa4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f7e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d105      	bne.n	8000fa4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	f043 0201 	orr.w	r2, r3, #1
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 fabf 	bl	8001528 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f06f 020c 	mvn.w	r2, #12
 8000fb2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d017      	beq.n	8000ffa <HAL_ADC_IRQHandler+0x1d6>
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d014      	beq.n	8000ffa <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d10d      	bne.n	8000ffa <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 f837 	bl	800105e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f06f 0201 	mvn.w	r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f003 0320 	and.w	r3, r3, #32
 8001000:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001008:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d015      	beq.n	800103c <HAL_ADC_IRQHandler+0x218>
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d012      	beq.n	800103c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	f043 0202 	orr.w	r2, r3, #2
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f06f 0220 	mvn.w	r2, #32
 800102a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 f820 	bl	8001072 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f06f 0220 	mvn.w	r2, #32
 800103a:	601a      	str	r2, [r3, #0]
  }
}
 800103c:	bf00      	nop
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800109c:	2b01      	cmp	r3, #1
 800109e:	d101      	bne.n	80010a4 <HAL_ADC_ConfigChannel+0x1c>
 80010a0:	2302      	movs	r3, #2
 80010a2:	e136      	b.n	8001312 <HAL_ADC_ConfigChannel+0x28a>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b09      	cmp	r3, #9
 80010b2:	d93a      	bls.n	800112a <HAL_ADC_ConfigChannel+0xa2>
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80010bc:	d035      	beq.n	800112a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68d9      	ldr	r1, [r3, #12]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	461a      	mov	r2, r3
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	3b1e      	subs	r3, #30
 80010d4:	2207      	movs	r2, #7
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	400a      	ands	r2, r1
 80010e2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a8d      	ldr	r2, [pc, #564]	; (8001320 <HAL_ADC_ConfigChannel+0x298>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d10a      	bne.n	8001104 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68d9      	ldr	r1, [r3, #12]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	061a      	lsls	r2, r3, #24
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	430a      	orrs	r2, r1
 8001100:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001102:	e035      	b.n	8001170 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	68d9      	ldr	r1, [r3, #12]
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	b29b      	uxth	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	4603      	mov	r3, r0
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4403      	add	r3, r0
 800111c:	3b1e      	subs	r3, #30
 800111e:	409a      	lsls	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	430a      	orrs	r2, r1
 8001126:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001128:	e022      	b.n	8001170 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6919      	ldr	r1, [r3, #16]
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	b29b      	uxth	r3, r3
 8001136:	461a      	mov	r2, r3
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	2207      	movs	r2, #7
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43da      	mvns	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	400a      	ands	r2, r1
 800114c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6919      	ldr	r1, [r3, #16]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	b29b      	uxth	r3, r3
 800115e:	4618      	mov	r0, r3
 8001160:	4603      	mov	r3, r0
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4403      	add	r3, r0
 8001166:	409a      	lsls	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	430a      	orrs	r2, r1
 800116e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b06      	cmp	r3, #6
 8001176:	d824      	bhi.n	80011c2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	3b05      	subs	r3, #5
 800118a:	221f      	movs	r2, #31
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43da      	mvns	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	400a      	ands	r2, r1
 8001198:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	3b05      	subs	r3, #5
 80011b4:	fa00 f203 	lsl.w	r2, r0, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	430a      	orrs	r2, r1
 80011be:	635a      	str	r2, [r3, #52]	; 0x34
 80011c0:	e04c      	b.n	800125c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b0c      	cmp	r3, #12
 80011c8:	d824      	bhi.n	8001214 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	3b23      	subs	r3, #35	; 0x23
 80011dc:	221f      	movs	r2, #31
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	400a      	ands	r2, r1
 80011ea:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	4618      	mov	r0, r3
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	3b23      	subs	r3, #35	; 0x23
 8001206:	fa00 f203 	lsl.w	r2, r0, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	631a      	str	r2, [r3, #48]	; 0x30
 8001212:	e023      	b.n	800125c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	3b41      	subs	r3, #65	; 0x41
 8001226:	221f      	movs	r2, #31
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43da      	mvns	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	400a      	ands	r2, r1
 8001234:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	b29b      	uxth	r3, r3
 8001242:	4618      	mov	r0, r3
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	3b41      	subs	r3, #65	; 0x41
 8001250:	fa00 f203 	lsl.w	r2, r0, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a30      	ldr	r2, [pc, #192]	; (8001324 <HAL_ADC_ConfigChannel+0x29c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d10a      	bne.n	800127c <HAL_ADC_ConfigChannel+0x1f4>
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800126e:	d105      	bne.n	800127c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001270:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <HAL_ADC_ConfigChannel+0x2a0>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	4a2c      	ldr	r2, [pc, #176]	; (8001328 <HAL_ADC_ConfigChannel+0x2a0>)
 8001276:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800127a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a28      	ldr	r2, [pc, #160]	; (8001324 <HAL_ADC_ConfigChannel+0x29c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d10f      	bne.n	80012a6 <HAL_ADC_ConfigChannel+0x21e>
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b12      	cmp	r3, #18
 800128c:	d10b      	bne.n	80012a6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <HAL_ADC_ConfigChannel+0x2a0>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	4a25      	ldr	r2, [pc, #148]	; (8001328 <HAL_ADC_ConfigChannel+0x2a0>)
 8001294:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001298:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800129a:	4b23      	ldr	r3, [pc, #140]	; (8001328 <HAL_ADC_ConfigChannel+0x2a0>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	4a22      	ldr	r2, [pc, #136]	; (8001328 <HAL_ADC_ConfigChannel+0x2a0>)
 80012a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012a4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <HAL_ADC_ConfigChannel+0x29c>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d12b      	bne.n	8001308 <HAL_ADC_ConfigChannel+0x280>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a1a      	ldr	r2, [pc, #104]	; (8001320 <HAL_ADC_ConfigChannel+0x298>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d003      	beq.n	80012c2 <HAL_ADC_ConfigChannel+0x23a>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b11      	cmp	r3, #17
 80012c0:	d122      	bne.n	8001308 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <HAL_ADC_ConfigChannel+0x2a0>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	4a18      	ldr	r2, [pc, #96]	; (8001328 <HAL_ADC_ConfigChannel+0x2a0>)
 80012c8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80012cc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <HAL_ADC_ConfigChannel+0x2a0>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4a15      	ldr	r2, [pc, #84]	; (8001328 <HAL_ADC_ConfigChannel+0x2a0>)
 80012d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012d8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a10      	ldr	r2, [pc, #64]	; (8001320 <HAL_ADC_ConfigChannel+0x298>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d111      	bne.n	8001308 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_ADC_ConfigChannel+0x2a4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a11      	ldr	r2, [pc, #68]	; (8001330 <HAL_ADC_ConfigChannel+0x2a8>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	0c9a      	lsrs	r2, r3, #18
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80012fa:	e002      	b.n	8001302 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	3b01      	subs	r3, #1
 8001300:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f9      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	10000012 	.word	0x10000012
 8001324:	40012000 	.word	0x40012000
 8001328:	40012300 	.word	0x40012300
 800132c:	20000000 	.word	0x20000000
 8001330:	431bde83 	.word	0x431bde83

08001334 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800133c:	4b78      	ldr	r3, [pc, #480]	; (8001520 <ADC_Init+0x1ec>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	4a77      	ldr	r2, [pc, #476]	; (8001520 <ADC_Init+0x1ec>)
 8001342:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001346:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001348:	4b75      	ldr	r3, [pc, #468]	; (8001520 <ADC_Init+0x1ec>)
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	4973      	ldr	r1, [pc, #460]	; (8001520 <ADC_Init+0x1ec>)
 8001352:	4313      	orrs	r3, r2
 8001354:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001364:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6859      	ldr	r1, [r3, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	021a      	lsls	r2, r3, #8
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001388:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6859      	ldr	r1, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6899      	ldr	r1, [r3, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c2:	4a58      	ldr	r2, [pc, #352]	; (8001524 <ADC_Init+0x1f0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d022      	beq.n	800140e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6899      	ldr	r1, [r3, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6899      	ldr	r1, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	430a      	orrs	r2, r1
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	e00f      	b.n	800142e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800141c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800142c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0202 	bic.w	r2, r2, #2
 800143c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6899      	ldr	r1, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	005a      	lsls	r2, r3, #1
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d01b      	beq.n	8001494 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800146a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800147a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6859      	ldr	r1, [r3, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	3b01      	subs	r3, #1
 8001488:	035a      	lsls	r2, r3, #13
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	e007      	b.n	80014a4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	3b01      	subs	r3, #1
 80014c0:	051a      	lsls	r2, r3, #20
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6899      	ldr	r1, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014e6:	025a      	lsls	r2, r3, #9
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6899      	ldr	r1, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	029a      	lsls	r2, r3, #10
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	609a      	str	r2, [r3, #8]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	40012300 	.word	0x40012300
 8001524:	0f000001 	.word	0x0f000001

08001528 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <__NVIC_SetPriorityGrouping+0x40>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 8001566:	4313      	orrs	r3, r2
 8001568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156a:	4a04      	ldr	r2, [pc, #16]	; (800157c <__NVIC_SetPriorityGrouping+0x40>)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	60d3      	str	r3, [r2, #12]
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00
 8001580:	05fa0000 	.word	0x05fa0000

08001584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <__NVIC_GetPriorityGrouping+0x18>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0307 	and.w	r3, r3, #7
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db0b      	blt.n	80015ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	4907      	ldr	r1, [pc, #28]	; (80015d8 <__NVIC_EnableIRQ+0x38>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	2001      	movs	r0, #1
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000e100 	.word	0xe000e100

080015dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db0a      	blt.n	8001606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	490c      	ldr	r1, [pc, #48]	; (8001628 <__NVIC_SetPriority+0x4c>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	0112      	lsls	r2, r2, #4
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	440b      	add	r3, r1
 8001600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001604:	e00a      	b.n	800161c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4908      	ldr	r1, [pc, #32]	; (800162c <__NVIC_SetPriority+0x50>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	3b04      	subs	r3, #4
 8001614:	0112      	lsls	r2, r2, #4
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	440b      	add	r3, r1
 800161a:	761a      	strb	r2, [r3, #24]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000e100 	.word	0xe000e100
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f1c3 0307 	rsb	r3, r3, #7
 800164a:	2b04      	cmp	r3, #4
 800164c:	bf28      	it	cs
 800164e:	2304      	movcs	r3, #4
 8001650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3304      	adds	r3, #4
 8001656:	2b06      	cmp	r3, #6
 8001658:	d902      	bls.n	8001660 <NVIC_EncodePriority+0x30>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3b03      	subs	r3, #3
 800165e:	e000      	b.n	8001662 <NVIC_EncodePriority+0x32>
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	f04f 32ff 	mov.w	r2, #4294967295
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	401a      	ands	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001678:	f04f 31ff 	mov.w	r1, #4294967295
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	43d9      	mvns	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	4313      	orrs	r3, r2
         );
}
 800168a:	4618      	mov	r0, r3
 800168c:	3724      	adds	r7, #36	; 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a8:	d301      	bcc.n	80016ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00f      	b.n	80016ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <SysTick_Config+0x40>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b6:	210f      	movs	r1, #15
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f7ff ff8e 	bl	80015dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <SysTick_Config+0x40>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <SysTick_Config+0x40>)
 80016c8:	2207      	movs	r2, #7
 80016ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	e000e010 	.word	0xe000e010

080016dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff29 	bl	800153c <__NVIC_SetPriorityGrouping>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001704:	f7ff ff3e 	bl	8001584 <__NVIC_GetPriorityGrouping>
 8001708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	6978      	ldr	r0, [r7, #20]
 8001710:	f7ff ff8e 	bl	8001630 <NVIC_EncodePriority>
 8001714:	4602      	mov	r2, r0
 8001716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff5d 	bl	80015dc <__NVIC_SetPriority>
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff31 	bl	80015a0 <__NVIC_EnableIRQ>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffa2 	bl	8001698 <SysTick_Config>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	e175      	b.n	8001a6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001780:	2201      	movs	r2, #1
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	429a      	cmp	r2, r3
 800179a:	f040 8164 	bne.w	8001a66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d005      	beq.n	80017b6 <HAL_GPIO_Init+0x56>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d130      	bne.n	8001818 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	2203      	movs	r2, #3
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ec:	2201      	movs	r2, #1
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	f003 0201 	and.w	r2, r3, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b03      	cmp	r3, #3
 8001822:	d017      	beq.n	8001854 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d123      	bne.n	80018a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3208      	adds	r2, #8
 8001868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	220f      	movs	r2, #15
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	08da      	lsrs	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3208      	adds	r2, #8
 80018a2:	69b9      	ldr	r1, [r7, #24]
 80018a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0203 	and.w	r2, r3, #3
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80be 	beq.w	8001a66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	4b66      	ldr	r3, [pc, #408]	; (8001a84 <HAL_GPIO_Init+0x324>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	4a65      	ldr	r2, [pc, #404]	; (8001a84 <HAL_GPIO_Init+0x324>)
 80018f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f4:	6453      	str	r3, [r2, #68]	; 0x44
 80018f6:	4b63      	ldr	r3, [pc, #396]	; (8001a84 <HAL_GPIO_Init+0x324>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001902:	4a61      	ldr	r2, [pc, #388]	; (8001a88 <HAL_GPIO_Init+0x328>)
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	220f      	movs	r2, #15
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a58      	ldr	r2, [pc, #352]	; (8001a8c <HAL_GPIO_Init+0x32c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d037      	beq.n	800199e <HAL_GPIO_Init+0x23e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a57      	ldr	r2, [pc, #348]	; (8001a90 <HAL_GPIO_Init+0x330>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d031      	beq.n	800199a <HAL_GPIO_Init+0x23a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a56      	ldr	r2, [pc, #344]	; (8001a94 <HAL_GPIO_Init+0x334>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d02b      	beq.n	8001996 <HAL_GPIO_Init+0x236>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a55      	ldr	r2, [pc, #340]	; (8001a98 <HAL_GPIO_Init+0x338>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d025      	beq.n	8001992 <HAL_GPIO_Init+0x232>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a54      	ldr	r2, [pc, #336]	; (8001a9c <HAL_GPIO_Init+0x33c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d01f      	beq.n	800198e <HAL_GPIO_Init+0x22e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a53      	ldr	r2, [pc, #332]	; (8001aa0 <HAL_GPIO_Init+0x340>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d019      	beq.n	800198a <HAL_GPIO_Init+0x22a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a52      	ldr	r2, [pc, #328]	; (8001aa4 <HAL_GPIO_Init+0x344>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d013      	beq.n	8001986 <HAL_GPIO_Init+0x226>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a51      	ldr	r2, [pc, #324]	; (8001aa8 <HAL_GPIO_Init+0x348>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d00d      	beq.n	8001982 <HAL_GPIO_Init+0x222>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a50      	ldr	r2, [pc, #320]	; (8001aac <HAL_GPIO_Init+0x34c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d007      	beq.n	800197e <HAL_GPIO_Init+0x21e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4f      	ldr	r2, [pc, #316]	; (8001ab0 <HAL_GPIO_Init+0x350>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <HAL_GPIO_Init+0x21a>
 8001976:	2309      	movs	r3, #9
 8001978:	e012      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800197a:	230a      	movs	r3, #10
 800197c:	e010      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800197e:	2308      	movs	r3, #8
 8001980:	e00e      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001982:	2307      	movs	r3, #7
 8001984:	e00c      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001986:	2306      	movs	r3, #6
 8001988:	e00a      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800198a:	2305      	movs	r3, #5
 800198c:	e008      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800198e:	2304      	movs	r3, #4
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001992:	2303      	movs	r3, #3
 8001994:	e004      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001996:	2302      	movs	r3, #2
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800199e:	2300      	movs	r3, #0
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	f002 0203 	and.w	r2, r2, #3
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	4093      	lsls	r3, r2
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019b0:	4935      	ldr	r1, [pc, #212]	; (8001a88 <HAL_GPIO_Init+0x328>)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	089b      	lsrs	r3, r3, #2
 80019b6:	3302      	adds	r3, #2
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019be:	4b3d      	ldr	r3, [pc, #244]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019e2:	4a34      	ldr	r2, [pc, #208]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e8:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a0c:	4a29      	ldr	r2, [pc, #164]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a12:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a36:	4a1f      	ldr	r2, [pc, #124]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a60:	4a14      	ldr	r2, [pc, #80]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	61fb      	str	r3, [r7, #28]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	2b0f      	cmp	r3, #15
 8001a70:	f67f ae86 	bls.w	8001780 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3724      	adds	r7, #36	; 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40013800 	.word	0x40013800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40020800 	.word	0x40020800
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40021400 	.word	0x40021400
 8001aa4:	40021800 	.word	0x40021800
 8001aa8:	40021c00 	.word	0x40021c00
 8001aac:	40022000 	.word	0x40022000
 8001ab0:	40022400 	.word	0x40022400
 8001ab4:	40013c00 	.word	0x40013c00

08001ab8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e29b      	b.n	8002006 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 8087 	beq.w	8001bea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001adc:	4b96      	ldr	r3, [pc, #600]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d00c      	beq.n	8001b02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ae8:	4b93      	ldr	r3, [pc, #588]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d112      	bne.n	8001b1a <HAL_RCC_OscConfig+0x62>
 8001af4:	4b90      	ldr	r3, [pc, #576]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b00:	d10b      	bne.n	8001b1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b02:	4b8d      	ldr	r3, [pc, #564]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d06c      	beq.n	8001be8 <HAL_RCC_OscConfig+0x130>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d168      	bne.n	8001be8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e275      	b.n	8002006 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b22:	d106      	bne.n	8001b32 <HAL_RCC_OscConfig+0x7a>
 8001b24:	4b84      	ldr	r3, [pc, #528]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a83      	ldr	r2, [pc, #524]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	e02e      	b.n	8001b90 <HAL_RCC_OscConfig+0xd8>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x9c>
 8001b3a:	4b7f      	ldr	r3, [pc, #508]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a7e      	ldr	r2, [pc, #504]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b7c      	ldr	r3, [pc, #496]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a7b      	ldr	r2, [pc, #492]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e01d      	b.n	8001b90 <HAL_RCC_OscConfig+0xd8>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0xc0>
 8001b5e:	4b76      	ldr	r3, [pc, #472]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a75      	ldr	r2, [pc, #468]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b73      	ldr	r3, [pc, #460]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a72      	ldr	r2, [pc, #456]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e00b      	b.n	8001b90 <HAL_RCC_OscConfig+0xd8>
 8001b78:	4b6f      	ldr	r3, [pc, #444]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a6e      	ldr	r2, [pc, #440]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	4b6c      	ldr	r3, [pc, #432]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a6b      	ldr	r2, [pc, #428]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d013      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b98:	f7ff f81c 	bl	8000bd4 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff f818 	bl	8000bd4 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	; 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e229      	b.n	8002006 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	4b61      	ldr	r3, [pc, #388]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xe8>
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f808 	bl	8000bd4 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff f804 	bl	8000bd4 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	; 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e215      	b.n	8002006 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bda:	4b57      	ldr	r3, [pc, #348]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x110>
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d069      	beq.n	8001cca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bf6:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00b      	beq.n	8001c1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c02:	4b4d      	ldr	r3, [pc, #308]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d11c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x190>
 8001c0e:	4b4a      	ldr	r3, [pc, #296]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d116      	bne.n	8001c48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1a:	4b47      	ldr	r3, [pc, #284]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d005      	beq.n	8001c32 <HAL_RCC_OscConfig+0x17a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e1e9      	b.n	8002006 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c32:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	493d      	ldr	r1, [pc, #244]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c46:	e040      	b.n	8001cca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d023      	beq.n	8001c98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c50:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a38      	ldr	r2, [pc, #224]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7fe ffba 	bl	8000bd4 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c64:	f7fe ffb6 	bl	8000bd4 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e1c7      	b.n	8002006 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c76:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c82:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4929      	ldr	r1, [pc, #164]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]
 8001c96:	e018      	b.n	8001cca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c98:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a26      	ldr	r2, [pc, #152]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c9e:	f023 0301 	bic.w	r3, r3, #1
 8001ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7fe ff96 	bl	8000bd4 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cac:	f7fe ff92 	bl	8000bd4 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e1a3      	b.n	8002006 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d038      	beq.n	8001d48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d019      	beq.n	8001d12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cde:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce2:	4a15      	ldr	r2, [pc, #84]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cea:	f7fe ff73 	bl	8000bd4 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf2:	f7fe ff6f 	bl	8000bd4 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e180      	b.n	8002006 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x23a>
 8001d10:	e01a      	b.n	8001d48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d16:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001d18:	f023 0301 	bic.w	r3, r3, #1
 8001d1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1e:	f7fe ff59 	bl	8000bd4 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d24:	e00a      	b.n	8001d3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d26:	f7fe ff55 	bl	8000bd4 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d903      	bls.n	8001d3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e166      	b.n	8002006 <HAL_RCC_OscConfig+0x54e>
 8001d38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3c:	4b92      	ldr	r3, [pc, #584]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1ee      	bne.n	8001d26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 80a4 	beq.w	8001e9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d56:	4b8c      	ldr	r3, [pc, #560]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10d      	bne.n	8001d7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	4b89      	ldr	r3, [pc, #548]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	4a88      	ldr	r2, [pc, #544]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6e:	4b86      	ldr	r3, [pc, #536]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d7e:	4b83      	ldr	r3, [pc, #524]	; (8001f8c <HAL_RCC_OscConfig+0x4d4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d118      	bne.n	8001dbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d8a:	4b80      	ldr	r3, [pc, #512]	; (8001f8c <HAL_RCC_OscConfig+0x4d4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a7f      	ldr	r2, [pc, #508]	; (8001f8c <HAL_RCC_OscConfig+0x4d4>)
 8001d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d96:	f7fe ff1d 	bl	8000bd4 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9e:	f7fe ff19 	bl	8000bd4 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b64      	cmp	r3, #100	; 0x64
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e12a      	b.n	8002006 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db0:	4b76      	ldr	r3, [pc, #472]	; (8001f8c <HAL_RCC_OscConfig+0x4d4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x31a>
 8001dc4:	4b70      	ldr	r3, [pc, #448]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc8:	4a6f      	ldr	r2, [pc, #444]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd0:	e02d      	b.n	8001e2e <HAL_RCC_OscConfig+0x376>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x33c>
 8001dda:	4b6b      	ldr	r3, [pc, #428]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dde:	4a6a      	ldr	r2, [pc, #424]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001de0:	f023 0301 	bic.w	r3, r3, #1
 8001de4:	6713      	str	r3, [r2, #112]	; 0x70
 8001de6:	4b68      	ldr	r3, [pc, #416]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dea:	4a67      	ldr	r2, [pc, #412]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001dec:	f023 0304 	bic.w	r3, r3, #4
 8001df0:	6713      	str	r3, [r2, #112]	; 0x70
 8001df2:	e01c      	b.n	8001e2e <HAL_RCC_OscConfig+0x376>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b05      	cmp	r3, #5
 8001dfa:	d10c      	bne.n	8001e16 <HAL_RCC_OscConfig+0x35e>
 8001dfc:	4b62      	ldr	r3, [pc, #392]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e00:	4a61      	ldr	r2, [pc, #388]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001e02:	f043 0304 	orr.w	r3, r3, #4
 8001e06:	6713      	str	r3, [r2, #112]	; 0x70
 8001e08:	4b5f      	ldr	r3, [pc, #380]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0c:	4a5e      	ldr	r2, [pc, #376]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6713      	str	r3, [r2, #112]	; 0x70
 8001e14:	e00b      	b.n	8001e2e <HAL_RCC_OscConfig+0x376>
 8001e16:	4b5c      	ldr	r3, [pc, #368]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1a:	4a5b      	ldr	r2, [pc, #364]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	6713      	str	r3, [r2, #112]	; 0x70
 8001e22:	4b59      	ldr	r3, [pc, #356]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e26:	4a58      	ldr	r2, [pc, #352]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001e28:	f023 0304 	bic.w	r3, r3, #4
 8001e2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d015      	beq.n	8001e62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e36:	f7fe fecd 	bl	8000bd4 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7fe fec9 	bl	8000bd4 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e0d8      	b.n	8002006 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e54:	4b4c      	ldr	r3, [pc, #304]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0ee      	beq.n	8001e3e <HAL_RCC_OscConfig+0x386>
 8001e60:	e014      	b.n	8001e8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e62:	f7fe feb7 	bl	8000bd4 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e68:	e00a      	b.n	8001e80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6a:	f7fe feb3 	bl	8000bd4 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e0c2      	b.n	8002006 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e80:	4b41      	ldr	r3, [pc, #260]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1ee      	bne.n	8001e6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e8c:	7dfb      	ldrb	r3, [r7, #23]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d105      	bne.n	8001e9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e92:	4b3d      	ldr	r3, [pc, #244]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	4a3c      	ldr	r2, [pc, #240]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80ae 	beq.w	8002004 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ea8:	4b37      	ldr	r3, [pc, #220]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 030c 	and.w	r3, r3, #12
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d06d      	beq.n	8001f90 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d14b      	bne.n	8001f54 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ebc:	4b32      	ldr	r3, [pc, #200]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a31      	ldr	r2, [pc, #196]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7fe fe84 	bl	8000bd4 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7fe fe80 	bl	8000bd4 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e091      	b.n	8002006 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee2:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69da      	ldr	r2, [r3, #28]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	019b      	lsls	r3, r3, #6
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f04:	085b      	lsrs	r3, r3, #1
 8001f06:	3b01      	subs	r3, #1
 8001f08:	041b      	lsls	r3, r3, #16
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	061b      	lsls	r3, r3, #24
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	071b      	lsls	r3, r3, #28
 8001f1a:	491b      	ldr	r1, [pc, #108]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a18      	ldr	r2, [pc, #96]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7fe fe52 	bl	8000bd4 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f34:	f7fe fe4e 	bl	8000bd4 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e05f      	b.n	8002006 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x47c>
 8001f52:	e057      	b.n	8002004 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7fe fe38 	bl	8000bd4 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f68:	f7fe fe34 	bl	8000bd4 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e045      	b.n	8002006 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7a:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4b0>
 8001f86:	e03d      	b.n	8002004 <HAL_RCC_OscConfig+0x54c>
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f90:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <HAL_RCC_OscConfig+0x558>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d030      	beq.n	8002000 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d129      	bne.n	8002000 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d122      	bne.n	8002000 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fc6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d119      	bne.n	8002000 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	085b      	lsrs	r3, r3, #1
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d10f      	bne.n	8002000 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d107      	bne.n	8002000 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800

08002014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0d0      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800202c:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d910      	bls.n	800205c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b67      	ldr	r3, [pc, #412]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 020f 	bic.w	r2, r3, #15
 8002042:	4965      	ldr	r1, [pc, #404]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b63      	ldr	r3, [pc, #396]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0b8      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d020      	beq.n	80020aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002074:	4b59      	ldr	r3, [pc, #356]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	4a58      	ldr	r2, [pc, #352]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 800207a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800207e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800208c:	4b53      	ldr	r3, [pc, #332]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	4a52      	ldr	r2, [pc, #328]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 8002092:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002096:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002098:	4b50      	ldr	r3, [pc, #320]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	494d      	ldr	r1, [pc, #308]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d040      	beq.n	8002138 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d107      	bne.n	80020ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	4b47      	ldr	r3, [pc, #284]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d115      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e07f      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d6:	4b41      	ldr	r3, [pc, #260]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e073      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e6:	4b3d      	ldr	r3, [pc, #244]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e06b      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f6:	4b39      	ldr	r3, [pc, #228]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f023 0203 	bic.w	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4936      	ldr	r1, [pc, #216]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 8002104:	4313      	orrs	r3, r2
 8002106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002108:	f7fe fd64 	bl	8000bd4 <HAL_GetTick>
 800210c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	e00a      	b.n	8002126 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002110:	f7fe fd60 	bl	8000bd4 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	; 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e053      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002126:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 020c 	and.w	r2, r3, #12
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	429a      	cmp	r2, r3
 8002136:	d1eb      	bne.n	8002110 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002138:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d210      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 020f 	bic.w	r2, r3, #15
 800214e:	4922      	ldr	r1, [pc, #136]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e032      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4916      	ldr	r1, [pc, #88]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490e      	ldr	r1, [pc, #56]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021a6:	f000 f821 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490a      	ldr	r1, [pc, #40]	; (80021e0 <HAL_RCC_ClockConfig+0x1cc>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	fa22 f303 	lsr.w	r3, r2, r3
 80021be:	4a09      	ldr	r2, [pc, #36]	; (80021e4 <HAL_RCC_ClockConfig+0x1d0>)
 80021c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <HAL_RCC_ClockConfig+0x1d4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe fcc0 	bl	8000b4c <HAL_InitTick>

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40023c00 	.word	0x40023c00
 80021dc:	40023800 	.word	0x40023800
 80021e0:	08004d58 	.word	0x08004d58
 80021e4:	20000000 	.word	0x20000000
 80021e8:	20000004 	.word	0x20000004

080021ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021f0:	b094      	sub	sp, #80	; 0x50
 80021f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	647b      	str	r3, [r7, #68]	; 0x44
 80021f8:	2300      	movs	r3, #0
 80021fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021fc:	2300      	movs	r3, #0
 80021fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002204:	4b79      	ldr	r3, [pc, #484]	; (80023ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b08      	cmp	r3, #8
 800220e:	d00d      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0x40>
 8002210:	2b08      	cmp	r3, #8
 8002212:	f200 80e1 	bhi.w	80023d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x34>
 800221a:	2b04      	cmp	r3, #4
 800221c:	d003      	beq.n	8002226 <HAL_RCC_GetSysClockFreq+0x3a>
 800221e:	e0db      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002220:	4b73      	ldr	r3, [pc, #460]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002222:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002224:	e0db      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002226:	4b73      	ldr	r3, [pc, #460]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002228:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800222a:	e0d8      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800222c:	4b6f      	ldr	r3, [pc, #444]	; (80023ec <HAL_RCC_GetSysClockFreq+0x200>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002234:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002236:	4b6d      	ldr	r3, [pc, #436]	; (80023ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d063      	beq.n	800230a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002242:	4b6a      	ldr	r3, [pc, #424]	; (80023ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	099b      	lsrs	r3, r3, #6
 8002248:	2200      	movs	r2, #0
 800224a:	63bb      	str	r3, [r7, #56]	; 0x38
 800224c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800224e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002254:	633b      	str	r3, [r7, #48]	; 0x30
 8002256:	2300      	movs	r3, #0
 8002258:	637b      	str	r3, [r7, #52]	; 0x34
 800225a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800225e:	4622      	mov	r2, r4
 8002260:	462b      	mov	r3, r5
 8002262:	f04f 0000 	mov.w	r0, #0
 8002266:	f04f 0100 	mov.w	r1, #0
 800226a:	0159      	lsls	r1, r3, #5
 800226c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002270:	0150      	lsls	r0, r2, #5
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4621      	mov	r1, r4
 8002278:	1a51      	subs	r1, r2, r1
 800227a:	6139      	str	r1, [r7, #16]
 800227c:	4629      	mov	r1, r5
 800227e:	eb63 0301 	sbc.w	r3, r3, r1
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002290:	4659      	mov	r1, fp
 8002292:	018b      	lsls	r3, r1, #6
 8002294:	4651      	mov	r1, sl
 8002296:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800229a:	4651      	mov	r1, sl
 800229c:	018a      	lsls	r2, r1, #6
 800229e:	4651      	mov	r1, sl
 80022a0:	ebb2 0801 	subs.w	r8, r2, r1
 80022a4:	4659      	mov	r1, fp
 80022a6:	eb63 0901 	sbc.w	r9, r3, r1
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022be:	4690      	mov	r8, r2
 80022c0:	4699      	mov	r9, r3
 80022c2:	4623      	mov	r3, r4
 80022c4:	eb18 0303 	adds.w	r3, r8, r3
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	462b      	mov	r3, r5
 80022cc:	eb49 0303 	adc.w	r3, r9, r3
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022de:	4629      	mov	r1, r5
 80022e0:	024b      	lsls	r3, r1, #9
 80022e2:	4621      	mov	r1, r4
 80022e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022e8:	4621      	mov	r1, r4
 80022ea:	024a      	lsls	r2, r1, #9
 80022ec:	4610      	mov	r0, r2
 80022ee:	4619      	mov	r1, r3
 80022f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022f2:	2200      	movs	r2, #0
 80022f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022fc:	f7fd fff8 	bl	80002f0 <__aeabi_uldivmod>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4613      	mov	r3, r2
 8002306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002308:	e058      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800230a:	4b38      	ldr	r3, [pc, #224]	; (80023ec <HAL_RCC_GetSysClockFreq+0x200>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	099b      	lsrs	r3, r3, #6
 8002310:	2200      	movs	r2, #0
 8002312:	4618      	mov	r0, r3
 8002314:	4611      	mov	r1, r2
 8002316:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800231a:	623b      	str	r3, [r7, #32]
 800231c:	2300      	movs	r3, #0
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
 8002320:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002324:	4642      	mov	r2, r8
 8002326:	464b      	mov	r3, r9
 8002328:	f04f 0000 	mov.w	r0, #0
 800232c:	f04f 0100 	mov.w	r1, #0
 8002330:	0159      	lsls	r1, r3, #5
 8002332:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002336:	0150      	lsls	r0, r2, #5
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4641      	mov	r1, r8
 800233e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002342:	4649      	mov	r1, r9
 8002344:	eb63 0b01 	sbc.w	fp, r3, r1
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002354:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002358:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800235c:	ebb2 040a 	subs.w	r4, r2, sl
 8002360:	eb63 050b 	sbc.w	r5, r3, fp
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	00eb      	lsls	r3, r5, #3
 800236e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002372:	00e2      	lsls	r2, r4, #3
 8002374:	4614      	mov	r4, r2
 8002376:	461d      	mov	r5, r3
 8002378:	4643      	mov	r3, r8
 800237a:	18e3      	adds	r3, r4, r3
 800237c:	603b      	str	r3, [r7, #0]
 800237e:	464b      	mov	r3, r9
 8002380:	eb45 0303 	adc.w	r3, r5, r3
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002392:	4629      	mov	r1, r5
 8002394:	028b      	lsls	r3, r1, #10
 8002396:	4621      	mov	r1, r4
 8002398:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800239c:	4621      	mov	r1, r4
 800239e:	028a      	lsls	r2, r1, #10
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a6:	2200      	movs	r2, #0
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	61fa      	str	r2, [r7, #28]
 80023ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023b0:	f7fd ff9e 	bl	80002f0 <__aeabi_uldivmod>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4613      	mov	r3, r2
 80023ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_RCC_GetSysClockFreq+0x200>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	3301      	adds	r3, #1
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80023cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023d6:	e002      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80023da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3750      	adds	r7, #80	; 0x50
 80023e4:	46bd      	mov	sp, r7
 80023e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	00f42400 	.word	0x00f42400
 80023f4:	007a1200 	.word	0x007a1200

080023f8 <__errno>:
 80023f8:	4b01      	ldr	r3, [pc, #4]	; (8002400 <__errno+0x8>)
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	2000000c 	.word	0x2000000c

08002404 <__libc_init_array>:
 8002404:	b570      	push	{r4, r5, r6, lr}
 8002406:	4d0d      	ldr	r5, [pc, #52]	; (800243c <__libc_init_array+0x38>)
 8002408:	4c0d      	ldr	r4, [pc, #52]	; (8002440 <__libc_init_array+0x3c>)
 800240a:	1b64      	subs	r4, r4, r5
 800240c:	10a4      	asrs	r4, r4, #2
 800240e:	2600      	movs	r6, #0
 8002410:	42a6      	cmp	r6, r4
 8002412:	d109      	bne.n	8002428 <__libc_init_array+0x24>
 8002414:	4d0b      	ldr	r5, [pc, #44]	; (8002444 <__libc_init_array+0x40>)
 8002416:	4c0c      	ldr	r4, [pc, #48]	; (8002448 <__libc_init_array+0x44>)
 8002418:	f002 fc92 	bl	8004d40 <_init>
 800241c:	1b64      	subs	r4, r4, r5
 800241e:	10a4      	asrs	r4, r4, #2
 8002420:	2600      	movs	r6, #0
 8002422:	42a6      	cmp	r6, r4
 8002424:	d105      	bne.n	8002432 <__libc_init_array+0x2e>
 8002426:	bd70      	pop	{r4, r5, r6, pc}
 8002428:	f855 3b04 	ldr.w	r3, [r5], #4
 800242c:	4798      	blx	r3
 800242e:	3601      	adds	r6, #1
 8002430:	e7ee      	b.n	8002410 <__libc_init_array+0xc>
 8002432:	f855 3b04 	ldr.w	r3, [r5], #4
 8002436:	4798      	blx	r3
 8002438:	3601      	adds	r6, #1
 800243a:	e7f2      	b.n	8002422 <__libc_init_array+0x1e>
 800243c:	0800514c 	.word	0x0800514c
 8002440:	0800514c 	.word	0x0800514c
 8002444:	0800514c 	.word	0x0800514c
 8002448:	08005150 	.word	0x08005150

0800244c <memset>:
 800244c:	4402      	add	r2, r0
 800244e:	4603      	mov	r3, r0
 8002450:	4293      	cmp	r3, r2
 8002452:	d100      	bne.n	8002456 <memset+0xa>
 8002454:	4770      	bx	lr
 8002456:	f803 1b01 	strb.w	r1, [r3], #1
 800245a:	e7f9      	b.n	8002450 <memset+0x4>

0800245c <__cvt>:
 800245c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245e:	ed2d 8b02 	vpush	{d8}
 8002462:	eeb0 8b40 	vmov.f64	d8, d0
 8002466:	b085      	sub	sp, #20
 8002468:	4617      	mov	r7, r2
 800246a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800246c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800246e:	ee18 2a90 	vmov	r2, s17
 8002472:	f025 0520 	bic.w	r5, r5, #32
 8002476:	2a00      	cmp	r2, #0
 8002478:	bfb6      	itet	lt
 800247a:	222d      	movlt	r2, #45	; 0x2d
 800247c:	2200      	movge	r2, #0
 800247e:	eeb1 8b40 	vneglt.f64	d8, d0
 8002482:	2d46      	cmp	r5, #70	; 0x46
 8002484:	460c      	mov	r4, r1
 8002486:	701a      	strb	r2, [r3, #0]
 8002488:	d004      	beq.n	8002494 <__cvt+0x38>
 800248a:	2d45      	cmp	r5, #69	; 0x45
 800248c:	d100      	bne.n	8002490 <__cvt+0x34>
 800248e:	3401      	adds	r4, #1
 8002490:	2102      	movs	r1, #2
 8002492:	e000      	b.n	8002496 <__cvt+0x3a>
 8002494:	2103      	movs	r1, #3
 8002496:	ab03      	add	r3, sp, #12
 8002498:	9301      	str	r3, [sp, #4]
 800249a:	ab02      	add	r3, sp, #8
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	4622      	mov	r2, r4
 80024a0:	4633      	mov	r3, r6
 80024a2:	eeb0 0b48 	vmov.f64	d0, d8
 80024a6:	f000 fcab 	bl	8002e00 <_dtoa_r>
 80024aa:	2d47      	cmp	r5, #71	; 0x47
 80024ac:	d101      	bne.n	80024b2 <__cvt+0x56>
 80024ae:	07fb      	lsls	r3, r7, #31
 80024b0:	d51a      	bpl.n	80024e8 <__cvt+0x8c>
 80024b2:	2d46      	cmp	r5, #70	; 0x46
 80024b4:	eb00 0204 	add.w	r2, r0, r4
 80024b8:	d10c      	bne.n	80024d4 <__cvt+0x78>
 80024ba:	7803      	ldrb	r3, [r0, #0]
 80024bc:	2b30      	cmp	r3, #48	; 0x30
 80024be:	d107      	bne.n	80024d0 <__cvt+0x74>
 80024c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80024c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c8:	bf1c      	itt	ne
 80024ca:	f1c4 0401 	rsbne	r4, r4, #1
 80024ce:	6034      	strne	r4, [r6, #0]
 80024d0:	6833      	ldr	r3, [r6, #0]
 80024d2:	441a      	add	r2, r3
 80024d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80024d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024dc:	bf08      	it	eq
 80024de:	9203      	streq	r2, [sp, #12]
 80024e0:	2130      	movs	r1, #48	; 0x30
 80024e2:	9b03      	ldr	r3, [sp, #12]
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d307      	bcc.n	80024f8 <__cvt+0x9c>
 80024e8:	9b03      	ldr	r3, [sp, #12]
 80024ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80024ec:	1a1b      	subs	r3, r3, r0
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	b005      	add	sp, #20
 80024f2:	ecbd 8b02 	vpop	{d8}
 80024f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024f8:	1c5c      	adds	r4, r3, #1
 80024fa:	9403      	str	r4, [sp, #12]
 80024fc:	7019      	strb	r1, [r3, #0]
 80024fe:	e7f0      	b.n	80024e2 <__cvt+0x86>

08002500 <__exponent>:
 8002500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002502:	4603      	mov	r3, r0
 8002504:	2900      	cmp	r1, #0
 8002506:	bfb8      	it	lt
 8002508:	4249      	neglt	r1, r1
 800250a:	f803 2b02 	strb.w	r2, [r3], #2
 800250e:	bfb4      	ite	lt
 8002510:	222d      	movlt	r2, #45	; 0x2d
 8002512:	222b      	movge	r2, #43	; 0x2b
 8002514:	2909      	cmp	r1, #9
 8002516:	7042      	strb	r2, [r0, #1]
 8002518:	dd2a      	ble.n	8002570 <__exponent+0x70>
 800251a:	f10d 0407 	add.w	r4, sp, #7
 800251e:	46a4      	mov	ip, r4
 8002520:	270a      	movs	r7, #10
 8002522:	46a6      	mov	lr, r4
 8002524:	460a      	mov	r2, r1
 8002526:	fb91 f6f7 	sdiv	r6, r1, r7
 800252a:	fb07 1516 	mls	r5, r7, r6, r1
 800252e:	3530      	adds	r5, #48	; 0x30
 8002530:	2a63      	cmp	r2, #99	; 0x63
 8002532:	f104 34ff 	add.w	r4, r4, #4294967295
 8002536:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800253a:	4631      	mov	r1, r6
 800253c:	dcf1      	bgt.n	8002522 <__exponent+0x22>
 800253e:	3130      	adds	r1, #48	; 0x30
 8002540:	f1ae 0502 	sub.w	r5, lr, #2
 8002544:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002548:	1c44      	adds	r4, r0, #1
 800254a:	4629      	mov	r1, r5
 800254c:	4561      	cmp	r1, ip
 800254e:	d30a      	bcc.n	8002566 <__exponent+0x66>
 8002550:	f10d 0209 	add.w	r2, sp, #9
 8002554:	eba2 020e 	sub.w	r2, r2, lr
 8002558:	4565      	cmp	r5, ip
 800255a:	bf88      	it	hi
 800255c:	2200      	movhi	r2, #0
 800255e:	4413      	add	r3, r2
 8002560:	1a18      	subs	r0, r3, r0
 8002562:	b003      	add	sp, #12
 8002564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800256a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800256e:	e7ed      	b.n	800254c <__exponent+0x4c>
 8002570:	2330      	movs	r3, #48	; 0x30
 8002572:	3130      	adds	r1, #48	; 0x30
 8002574:	7083      	strb	r3, [r0, #2]
 8002576:	70c1      	strb	r1, [r0, #3]
 8002578:	1d03      	adds	r3, r0, #4
 800257a:	e7f1      	b.n	8002560 <__exponent+0x60>
 800257c:	0000      	movs	r0, r0
	...

08002580 <_printf_float>:
 8002580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002584:	b08b      	sub	sp, #44	; 0x2c
 8002586:	460c      	mov	r4, r1
 8002588:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800258c:	4616      	mov	r6, r2
 800258e:	461f      	mov	r7, r3
 8002590:	4605      	mov	r5, r0
 8002592:	f001 f9a3 	bl	80038dc <_localeconv_r>
 8002596:	f8d0 b000 	ldr.w	fp, [r0]
 800259a:	4658      	mov	r0, fp
 800259c:	f7fd fe50 	bl	8000240 <strlen>
 80025a0:	2300      	movs	r3, #0
 80025a2:	9308      	str	r3, [sp, #32]
 80025a4:	f8d8 3000 	ldr.w	r3, [r8]
 80025a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80025ac:	6822      	ldr	r2, [r4, #0]
 80025ae:	3307      	adds	r3, #7
 80025b0:	f023 0307 	bic.w	r3, r3, #7
 80025b4:	f103 0108 	add.w	r1, r3, #8
 80025b8:	f8c8 1000 	str.w	r1, [r8]
 80025bc:	4682      	mov	sl, r0
 80025be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025c2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80025c6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8002828 <_printf_float+0x2a8>
 80025ca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80025ce:	eeb0 6bc0 	vabs.f64	d6, d0
 80025d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80025d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025da:	dd24      	ble.n	8002626 <_printf_float+0xa6>
 80025dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80025e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e4:	d502      	bpl.n	80025ec <_printf_float+0x6c>
 80025e6:	232d      	movs	r3, #45	; 0x2d
 80025e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025ec:	4b90      	ldr	r3, [pc, #576]	; (8002830 <_printf_float+0x2b0>)
 80025ee:	4891      	ldr	r0, [pc, #580]	; (8002834 <_printf_float+0x2b4>)
 80025f0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80025f4:	bf94      	ite	ls
 80025f6:	4698      	movls	r8, r3
 80025f8:	4680      	movhi	r8, r0
 80025fa:	2303      	movs	r3, #3
 80025fc:	6123      	str	r3, [r4, #16]
 80025fe:	f022 0204 	bic.w	r2, r2, #4
 8002602:	2300      	movs	r3, #0
 8002604:	6022      	str	r2, [r4, #0]
 8002606:	9304      	str	r3, [sp, #16]
 8002608:	9700      	str	r7, [sp, #0]
 800260a:	4633      	mov	r3, r6
 800260c:	aa09      	add	r2, sp, #36	; 0x24
 800260e:	4621      	mov	r1, r4
 8002610:	4628      	mov	r0, r5
 8002612:	f000 f9d3 	bl	80029bc <_printf_common>
 8002616:	3001      	adds	r0, #1
 8002618:	f040 808a 	bne.w	8002730 <_printf_float+0x1b0>
 800261c:	f04f 30ff 	mov.w	r0, #4294967295
 8002620:	b00b      	add	sp, #44	; 0x2c
 8002622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002626:	eeb4 0b40 	vcmp.f64	d0, d0
 800262a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262e:	d709      	bvc.n	8002644 <_printf_float+0xc4>
 8002630:	ee10 3a90 	vmov	r3, s1
 8002634:	2b00      	cmp	r3, #0
 8002636:	bfbc      	itt	lt
 8002638:	232d      	movlt	r3, #45	; 0x2d
 800263a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800263e:	487e      	ldr	r0, [pc, #504]	; (8002838 <_printf_float+0x2b8>)
 8002640:	4b7e      	ldr	r3, [pc, #504]	; (800283c <_printf_float+0x2bc>)
 8002642:	e7d5      	b.n	80025f0 <_printf_float+0x70>
 8002644:	6863      	ldr	r3, [r4, #4]
 8002646:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800264a:	9104      	str	r1, [sp, #16]
 800264c:	1c59      	adds	r1, r3, #1
 800264e:	d13c      	bne.n	80026ca <_printf_float+0x14a>
 8002650:	2306      	movs	r3, #6
 8002652:	6063      	str	r3, [r4, #4]
 8002654:	2300      	movs	r3, #0
 8002656:	9303      	str	r3, [sp, #12]
 8002658:	ab08      	add	r3, sp, #32
 800265a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800265e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002662:	ab07      	add	r3, sp, #28
 8002664:	6861      	ldr	r1, [r4, #4]
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	6022      	str	r2, [r4, #0]
 800266a:	f10d 031b 	add.w	r3, sp, #27
 800266e:	4628      	mov	r0, r5
 8002670:	f7ff fef4 	bl	800245c <__cvt>
 8002674:	9b04      	ldr	r3, [sp, #16]
 8002676:	9907      	ldr	r1, [sp, #28]
 8002678:	2b47      	cmp	r3, #71	; 0x47
 800267a:	4680      	mov	r8, r0
 800267c:	d108      	bne.n	8002690 <_printf_float+0x110>
 800267e:	1cc8      	adds	r0, r1, #3
 8002680:	db02      	blt.n	8002688 <_printf_float+0x108>
 8002682:	6863      	ldr	r3, [r4, #4]
 8002684:	4299      	cmp	r1, r3
 8002686:	dd41      	ble.n	800270c <_printf_float+0x18c>
 8002688:	f1a9 0902 	sub.w	r9, r9, #2
 800268c:	fa5f f989 	uxtb.w	r9, r9
 8002690:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002694:	d820      	bhi.n	80026d8 <_printf_float+0x158>
 8002696:	3901      	subs	r1, #1
 8002698:	464a      	mov	r2, r9
 800269a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800269e:	9107      	str	r1, [sp, #28]
 80026a0:	f7ff ff2e 	bl	8002500 <__exponent>
 80026a4:	9a08      	ldr	r2, [sp, #32]
 80026a6:	9004      	str	r0, [sp, #16]
 80026a8:	1813      	adds	r3, r2, r0
 80026aa:	2a01      	cmp	r2, #1
 80026ac:	6123      	str	r3, [r4, #16]
 80026ae:	dc02      	bgt.n	80026b6 <_printf_float+0x136>
 80026b0:	6822      	ldr	r2, [r4, #0]
 80026b2:	07d2      	lsls	r2, r2, #31
 80026b4:	d501      	bpl.n	80026ba <_printf_float+0x13a>
 80026b6:	3301      	adds	r3, #1
 80026b8:	6123      	str	r3, [r4, #16]
 80026ba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0a2      	beq.n	8002608 <_printf_float+0x88>
 80026c2:	232d      	movs	r3, #45	; 0x2d
 80026c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026c8:	e79e      	b.n	8002608 <_printf_float+0x88>
 80026ca:	9904      	ldr	r1, [sp, #16]
 80026cc:	2947      	cmp	r1, #71	; 0x47
 80026ce:	d1c1      	bne.n	8002654 <_printf_float+0xd4>
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1bf      	bne.n	8002654 <_printf_float+0xd4>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e7bc      	b.n	8002652 <_printf_float+0xd2>
 80026d8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80026dc:	d118      	bne.n	8002710 <_printf_float+0x190>
 80026de:	2900      	cmp	r1, #0
 80026e0:	6863      	ldr	r3, [r4, #4]
 80026e2:	dd0b      	ble.n	80026fc <_printf_float+0x17c>
 80026e4:	6121      	str	r1, [r4, #16]
 80026e6:	b913      	cbnz	r3, 80026ee <_printf_float+0x16e>
 80026e8:	6822      	ldr	r2, [r4, #0]
 80026ea:	07d0      	lsls	r0, r2, #31
 80026ec:	d502      	bpl.n	80026f4 <_printf_float+0x174>
 80026ee:	3301      	adds	r3, #1
 80026f0:	440b      	add	r3, r1
 80026f2:	6123      	str	r3, [r4, #16]
 80026f4:	2300      	movs	r3, #0
 80026f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80026f8:	9304      	str	r3, [sp, #16]
 80026fa:	e7de      	b.n	80026ba <_printf_float+0x13a>
 80026fc:	b913      	cbnz	r3, 8002704 <_printf_float+0x184>
 80026fe:	6822      	ldr	r2, [r4, #0]
 8002700:	07d2      	lsls	r2, r2, #31
 8002702:	d501      	bpl.n	8002708 <_printf_float+0x188>
 8002704:	3302      	adds	r3, #2
 8002706:	e7f4      	b.n	80026f2 <_printf_float+0x172>
 8002708:	2301      	movs	r3, #1
 800270a:	e7f2      	b.n	80026f2 <_printf_float+0x172>
 800270c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002710:	9b08      	ldr	r3, [sp, #32]
 8002712:	4299      	cmp	r1, r3
 8002714:	db05      	blt.n	8002722 <_printf_float+0x1a2>
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	6121      	str	r1, [r4, #16]
 800271a:	07d8      	lsls	r0, r3, #31
 800271c:	d5ea      	bpl.n	80026f4 <_printf_float+0x174>
 800271e:	1c4b      	adds	r3, r1, #1
 8002720:	e7e7      	b.n	80026f2 <_printf_float+0x172>
 8002722:	2900      	cmp	r1, #0
 8002724:	bfd4      	ite	le
 8002726:	f1c1 0202 	rsble	r2, r1, #2
 800272a:	2201      	movgt	r2, #1
 800272c:	4413      	add	r3, r2
 800272e:	e7e0      	b.n	80026f2 <_printf_float+0x172>
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	055a      	lsls	r2, r3, #21
 8002734:	d407      	bmi.n	8002746 <_printf_float+0x1c6>
 8002736:	6923      	ldr	r3, [r4, #16]
 8002738:	4642      	mov	r2, r8
 800273a:	4631      	mov	r1, r6
 800273c:	4628      	mov	r0, r5
 800273e:	47b8      	blx	r7
 8002740:	3001      	adds	r0, #1
 8002742:	d12a      	bne.n	800279a <_printf_float+0x21a>
 8002744:	e76a      	b.n	800261c <_printf_float+0x9c>
 8002746:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800274a:	f240 80e2 	bls.w	8002912 <_printf_float+0x392>
 800274e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8002752:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275a:	d133      	bne.n	80027c4 <_printf_float+0x244>
 800275c:	4a38      	ldr	r2, [pc, #224]	; (8002840 <_printf_float+0x2c0>)
 800275e:	2301      	movs	r3, #1
 8002760:	4631      	mov	r1, r6
 8002762:	4628      	mov	r0, r5
 8002764:	47b8      	blx	r7
 8002766:	3001      	adds	r0, #1
 8002768:	f43f af58 	beq.w	800261c <_printf_float+0x9c>
 800276c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8002770:	429a      	cmp	r2, r3
 8002772:	db02      	blt.n	800277a <_printf_float+0x1fa>
 8002774:	6823      	ldr	r3, [r4, #0]
 8002776:	07d8      	lsls	r0, r3, #31
 8002778:	d50f      	bpl.n	800279a <_printf_float+0x21a>
 800277a:	4653      	mov	r3, sl
 800277c:	465a      	mov	r2, fp
 800277e:	4631      	mov	r1, r6
 8002780:	4628      	mov	r0, r5
 8002782:	47b8      	blx	r7
 8002784:	3001      	adds	r0, #1
 8002786:	f43f af49 	beq.w	800261c <_printf_float+0x9c>
 800278a:	f04f 0800 	mov.w	r8, #0
 800278e:	f104 091a 	add.w	r9, r4, #26
 8002792:	9b08      	ldr	r3, [sp, #32]
 8002794:	3b01      	subs	r3, #1
 8002796:	4543      	cmp	r3, r8
 8002798:	dc09      	bgt.n	80027ae <_printf_float+0x22e>
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	079b      	lsls	r3, r3, #30
 800279e:	f100 8108 	bmi.w	80029b2 <_printf_float+0x432>
 80027a2:	68e0      	ldr	r0, [r4, #12]
 80027a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027a6:	4298      	cmp	r0, r3
 80027a8:	bfb8      	it	lt
 80027aa:	4618      	movlt	r0, r3
 80027ac:	e738      	b.n	8002620 <_printf_float+0xa0>
 80027ae:	2301      	movs	r3, #1
 80027b0:	464a      	mov	r2, r9
 80027b2:	4631      	mov	r1, r6
 80027b4:	4628      	mov	r0, r5
 80027b6:	47b8      	blx	r7
 80027b8:	3001      	adds	r0, #1
 80027ba:	f43f af2f 	beq.w	800261c <_printf_float+0x9c>
 80027be:	f108 0801 	add.w	r8, r8, #1
 80027c2:	e7e6      	b.n	8002792 <_printf_float+0x212>
 80027c4:	9b07      	ldr	r3, [sp, #28]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	dc3c      	bgt.n	8002844 <_printf_float+0x2c4>
 80027ca:	4a1d      	ldr	r2, [pc, #116]	; (8002840 <_printf_float+0x2c0>)
 80027cc:	2301      	movs	r3, #1
 80027ce:	4631      	mov	r1, r6
 80027d0:	4628      	mov	r0, r5
 80027d2:	47b8      	blx	r7
 80027d4:	3001      	adds	r0, #1
 80027d6:	f43f af21 	beq.w	800261c <_printf_float+0x9c>
 80027da:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80027de:	4313      	orrs	r3, r2
 80027e0:	d102      	bne.n	80027e8 <_printf_float+0x268>
 80027e2:	6823      	ldr	r3, [r4, #0]
 80027e4:	07d9      	lsls	r1, r3, #31
 80027e6:	d5d8      	bpl.n	800279a <_printf_float+0x21a>
 80027e8:	4653      	mov	r3, sl
 80027ea:	465a      	mov	r2, fp
 80027ec:	4631      	mov	r1, r6
 80027ee:	4628      	mov	r0, r5
 80027f0:	47b8      	blx	r7
 80027f2:	3001      	adds	r0, #1
 80027f4:	f43f af12 	beq.w	800261c <_printf_float+0x9c>
 80027f8:	f04f 0900 	mov.w	r9, #0
 80027fc:	f104 0a1a 	add.w	sl, r4, #26
 8002800:	9b07      	ldr	r3, [sp, #28]
 8002802:	425b      	negs	r3, r3
 8002804:	454b      	cmp	r3, r9
 8002806:	dc01      	bgt.n	800280c <_printf_float+0x28c>
 8002808:	9b08      	ldr	r3, [sp, #32]
 800280a:	e795      	b.n	8002738 <_printf_float+0x1b8>
 800280c:	2301      	movs	r3, #1
 800280e:	4652      	mov	r2, sl
 8002810:	4631      	mov	r1, r6
 8002812:	4628      	mov	r0, r5
 8002814:	47b8      	blx	r7
 8002816:	3001      	adds	r0, #1
 8002818:	f43f af00 	beq.w	800261c <_printf_float+0x9c>
 800281c:	f109 0901 	add.w	r9, r9, #1
 8002820:	e7ee      	b.n	8002800 <_printf_float+0x280>
 8002822:	bf00      	nop
 8002824:	f3af 8000 	nop.w
 8002828:	ffffffff 	.word	0xffffffff
 800282c:	7fefffff 	.word	0x7fefffff
 8002830:	08004d6c 	.word	0x08004d6c
 8002834:	08004d70 	.word	0x08004d70
 8002838:	08004d78 	.word	0x08004d78
 800283c:	08004d74 	.word	0x08004d74
 8002840:	08004d7c 	.word	0x08004d7c
 8002844:	9a08      	ldr	r2, [sp, #32]
 8002846:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002848:	429a      	cmp	r2, r3
 800284a:	bfa8      	it	ge
 800284c:	461a      	movge	r2, r3
 800284e:	2a00      	cmp	r2, #0
 8002850:	4691      	mov	r9, r2
 8002852:	dc38      	bgt.n	80028c6 <_printf_float+0x346>
 8002854:	2300      	movs	r3, #0
 8002856:	9305      	str	r3, [sp, #20]
 8002858:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800285c:	f104 021a 	add.w	r2, r4, #26
 8002860:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002862:	9905      	ldr	r1, [sp, #20]
 8002864:	9304      	str	r3, [sp, #16]
 8002866:	eba3 0309 	sub.w	r3, r3, r9
 800286a:	428b      	cmp	r3, r1
 800286c:	dc33      	bgt.n	80028d6 <_printf_float+0x356>
 800286e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8002872:	429a      	cmp	r2, r3
 8002874:	db3c      	blt.n	80028f0 <_printf_float+0x370>
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	07da      	lsls	r2, r3, #31
 800287a:	d439      	bmi.n	80028f0 <_printf_float+0x370>
 800287c:	9b08      	ldr	r3, [sp, #32]
 800287e:	9a04      	ldr	r2, [sp, #16]
 8002880:	9907      	ldr	r1, [sp, #28]
 8002882:	1a9a      	subs	r2, r3, r2
 8002884:	eba3 0901 	sub.w	r9, r3, r1
 8002888:	4591      	cmp	r9, r2
 800288a:	bfa8      	it	ge
 800288c:	4691      	movge	r9, r2
 800288e:	f1b9 0f00 	cmp.w	r9, #0
 8002892:	dc35      	bgt.n	8002900 <_printf_float+0x380>
 8002894:	f04f 0800 	mov.w	r8, #0
 8002898:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800289c:	f104 0a1a 	add.w	sl, r4, #26
 80028a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	eba3 0309 	sub.w	r3, r3, r9
 80028aa:	4543      	cmp	r3, r8
 80028ac:	f77f af75 	ble.w	800279a <_printf_float+0x21a>
 80028b0:	2301      	movs	r3, #1
 80028b2:	4652      	mov	r2, sl
 80028b4:	4631      	mov	r1, r6
 80028b6:	4628      	mov	r0, r5
 80028b8:	47b8      	blx	r7
 80028ba:	3001      	adds	r0, #1
 80028bc:	f43f aeae 	beq.w	800261c <_printf_float+0x9c>
 80028c0:	f108 0801 	add.w	r8, r8, #1
 80028c4:	e7ec      	b.n	80028a0 <_printf_float+0x320>
 80028c6:	4613      	mov	r3, r2
 80028c8:	4631      	mov	r1, r6
 80028ca:	4642      	mov	r2, r8
 80028cc:	4628      	mov	r0, r5
 80028ce:	47b8      	blx	r7
 80028d0:	3001      	adds	r0, #1
 80028d2:	d1bf      	bne.n	8002854 <_printf_float+0x2d4>
 80028d4:	e6a2      	b.n	800261c <_printf_float+0x9c>
 80028d6:	2301      	movs	r3, #1
 80028d8:	4631      	mov	r1, r6
 80028da:	4628      	mov	r0, r5
 80028dc:	9204      	str	r2, [sp, #16]
 80028de:	47b8      	blx	r7
 80028e0:	3001      	adds	r0, #1
 80028e2:	f43f ae9b 	beq.w	800261c <_printf_float+0x9c>
 80028e6:	9b05      	ldr	r3, [sp, #20]
 80028e8:	9a04      	ldr	r2, [sp, #16]
 80028ea:	3301      	adds	r3, #1
 80028ec:	9305      	str	r3, [sp, #20]
 80028ee:	e7b7      	b.n	8002860 <_printf_float+0x2e0>
 80028f0:	4653      	mov	r3, sl
 80028f2:	465a      	mov	r2, fp
 80028f4:	4631      	mov	r1, r6
 80028f6:	4628      	mov	r0, r5
 80028f8:	47b8      	blx	r7
 80028fa:	3001      	adds	r0, #1
 80028fc:	d1be      	bne.n	800287c <_printf_float+0x2fc>
 80028fe:	e68d      	b.n	800261c <_printf_float+0x9c>
 8002900:	9a04      	ldr	r2, [sp, #16]
 8002902:	464b      	mov	r3, r9
 8002904:	4442      	add	r2, r8
 8002906:	4631      	mov	r1, r6
 8002908:	4628      	mov	r0, r5
 800290a:	47b8      	blx	r7
 800290c:	3001      	adds	r0, #1
 800290e:	d1c1      	bne.n	8002894 <_printf_float+0x314>
 8002910:	e684      	b.n	800261c <_printf_float+0x9c>
 8002912:	9a08      	ldr	r2, [sp, #32]
 8002914:	2a01      	cmp	r2, #1
 8002916:	dc01      	bgt.n	800291c <_printf_float+0x39c>
 8002918:	07db      	lsls	r3, r3, #31
 800291a:	d537      	bpl.n	800298c <_printf_float+0x40c>
 800291c:	2301      	movs	r3, #1
 800291e:	4642      	mov	r2, r8
 8002920:	4631      	mov	r1, r6
 8002922:	4628      	mov	r0, r5
 8002924:	47b8      	blx	r7
 8002926:	3001      	adds	r0, #1
 8002928:	f43f ae78 	beq.w	800261c <_printf_float+0x9c>
 800292c:	4653      	mov	r3, sl
 800292e:	465a      	mov	r2, fp
 8002930:	4631      	mov	r1, r6
 8002932:	4628      	mov	r0, r5
 8002934:	47b8      	blx	r7
 8002936:	3001      	adds	r0, #1
 8002938:	f43f ae70 	beq.w	800261c <_printf_float+0x9c>
 800293c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8002940:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002948:	d01b      	beq.n	8002982 <_printf_float+0x402>
 800294a:	9b08      	ldr	r3, [sp, #32]
 800294c:	f108 0201 	add.w	r2, r8, #1
 8002950:	3b01      	subs	r3, #1
 8002952:	4631      	mov	r1, r6
 8002954:	4628      	mov	r0, r5
 8002956:	47b8      	blx	r7
 8002958:	3001      	adds	r0, #1
 800295a:	d10e      	bne.n	800297a <_printf_float+0x3fa>
 800295c:	e65e      	b.n	800261c <_printf_float+0x9c>
 800295e:	2301      	movs	r3, #1
 8002960:	464a      	mov	r2, r9
 8002962:	4631      	mov	r1, r6
 8002964:	4628      	mov	r0, r5
 8002966:	47b8      	blx	r7
 8002968:	3001      	adds	r0, #1
 800296a:	f43f ae57 	beq.w	800261c <_printf_float+0x9c>
 800296e:	f108 0801 	add.w	r8, r8, #1
 8002972:	9b08      	ldr	r3, [sp, #32]
 8002974:	3b01      	subs	r3, #1
 8002976:	4543      	cmp	r3, r8
 8002978:	dcf1      	bgt.n	800295e <_printf_float+0x3de>
 800297a:	9b04      	ldr	r3, [sp, #16]
 800297c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002980:	e6db      	b.n	800273a <_printf_float+0x1ba>
 8002982:	f04f 0800 	mov.w	r8, #0
 8002986:	f104 091a 	add.w	r9, r4, #26
 800298a:	e7f2      	b.n	8002972 <_printf_float+0x3f2>
 800298c:	2301      	movs	r3, #1
 800298e:	4642      	mov	r2, r8
 8002990:	e7df      	b.n	8002952 <_printf_float+0x3d2>
 8002992:	2301      	movs	r3, #1
 8002994:	464a      	mov	r2, r9
 8002996:	4631      	mov	r1, r6
 8002998:	4628      	mov	r0, r5
 800299a:	47b8      	blx	r7
 800299c:	3001      	adds	r0, #1
 800299e:	f43f ae3d 	beq.w	800261c <_printf_float+0x9c>
 80029a2:	f108 0801 	add.w	r8, r8, #1
 80029a6:	68e3      	ldr	r3, [r4, #12]
 80029a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80029aa:	1a5b      	subs	r3, r3, r1
 80029ac:	4543      	cmp	r3, r8
 80029ae:	dcf0      	bgt.n	8002992 <_printf_float+0x412>
 80029b0:	e6f7      	b.n	80027a2 <_printf_float+0x222>
 80029b2:	f04f 0800 	mov.w	r8, #0
 80029b6:	f104 0919 	add.w	r9, r4, #25
 80029ba:	e7f4      	b.n	80029a6 <_printf_float+0x426>

080029bc <_printf_common>:
 80029bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029c0:	4616      	mov	r6, r2
 80029c2:	4699      	mov	r9, r3
 80029c4:	688a      	ldr	r2, [r1, #8]
 80029c6:	690b      	ldr	r3, [r1, #16]
 80029c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029cc:	4293      	cmp	r3, r2
 80029ce:	bfb8      	it	lt
 80029d0:	4613      	movlt	r3, r2
 80029d2:	6033      	str	r3, [r6, #0]
 80029d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029d8:	4607      	mov	r7, r0
 80029da:	460c      	mov	r4, r1
 80029dc:	b10a      	cbz	r2, 80029e2 <_printf_common+0x26>
 80029de:	3301      	adds	r3, #1
 80029e0:	6033      	str	r3, [r6, #0]
 80029e2:	6823      	ldr	r3, [r4, #0]
 80029e4:	0699      	lsls	r1, r3, #26
 80029e6:	bf42      	ittt	mi
 80029e8:	6833      	ldrmi	r3, [r6, #0]
 80029ea:	3302      	addmi	r3, #2
 80029ec:	6033      	strmi	r3, [r6, #0]
 80029ee:	6825      	ldr	r5, [r4, #0]
 80029f0:	f015 0506 	ands.w	r5, r5, #6
 80029f4:	d106      	bne.n	8002a04 <_printf_common+0x48>
 80029f6:	f104 0a19 	add.w	sl, r4, #25
 80029fa:	68e3      	ldr	r3, [r4, #12]
 80029fc:	6832      	ldr	r2, [r6, #0]
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	42ab      	cmp	r3, r5
 8002a02:	dc26      	bgt.n	8002a52 <_printf_common+0x96>
 8002a04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a08:	1e13      	subs	r3, r2, #0
 8002a0a:	6822      	ldr	r2, [r4, #0]
 8002a0c:	bf18      	it	ne
 8002a0e:	2301      	movne	r3, #1
 8002a10:	0692      	lsls	r2, r2, #26
 8002a12:	d42b      	bmi.n	8002a6c <_printf_common+0xb0>
 8002a14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a18:	4649      	mov	r1, r9
 8002a1a:	4638      	mov	r0, r7
 8002a1c:	47c0      	blx	r8
 8002a1e:	3001      	adds	r0, #1
 8002a20:	d01e      	beq.n	8002a60 <_printf_common+0xa4>
 8002a22:	6823      	ldr	r3, [r4, #0]
 8002a24:	68e5      	ldr	r5, [r4, #12]
 8002a26:	6832      	ldr	r2, [r6, #0]
 8002a28:	f003 0306 	and.w	r3, r3, #6
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	bf08      	it	eq
 8002a30:	1aad      	subeq	r5, r5, r2
 8002a32:	68a3      	ldr	r3, [r4, #8]
 8002a34:	6922      	ldr	r2, [r4, #16]
 8002a36:	bf0c      	ite	eq
 8002a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a3c:	2500      	movne	r5, #0
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	bfc4      	itt	gt
 8002a42:	1a9b      	subgt	r3, r3, r2
 8002a44:	18ed      	addgt	r5, r5, r3
 8002a46:	2600      	movs	r6, #0
 8002a48:	341a      	adds	r4, #26
 8002a4a:	42b5      	cmp	r5, r6
 8002a4c:	d11a      	bne.n	8002a84 <_printf_common+0xc8>
 8002a4e:	2000      	movs	r0, #0
 8002a50:	e008      	b.n	8002a64 <_printf_common+0xa8>
 8002a52:	2301      	movs	r3, #1
 8002a54:	4652      	mov	r2, sl
 8002a56:	4649      	mov	r1, r9
 8002a58:	4638      	mov	r0, r7
 8002a5a:	47c0      	blx	r8
 8002a5c:	3001      	adds	r0, #1
 8002a5e:	d103      	bne.n	8002a68 <_printf_common+0xac>
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295
 8002a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a68:	3501      	adds	r5, #1
 8002a6a:	e7c6      	b.n	80029fa <_printf_common+0x3e>
 8002a6c:	18e1      	adds	r1, r4, r3
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	2030      	movs	r0, #48	; 0x30
 8002a72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a76:	4422      	add	r2, r4
 8002a78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a80:	3302      	adds	r3, #2
 8002a82:	e7c7      	b.n	8002a14 <_printf_common+0x58>
 8002a84:	2301      	movs	r3, #1
 8002a86:	4622      	mov	r2, r4
 8002a88:	4649      	mov	r1, r9
 8002a8a:	4638      	mov	r0, r7
 8002a8c:	47c0      	blx	r8
 8002a8e:	3001      	adds	r0, #1
 8002a90:	d0e6      	beq.n	8002a60 <_printf_common+0xa4>
 8002a92:	3601      	adds	r6, #1
 8002a94:	e7d9      	b.n	8002a4a <_printf_common+0x8e>
	...

08002a98 <_printf_i>:
 8002a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a9c:	7e0f      	ldrb	r7, [r1, #24]
 8002a9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002aa0:	2f78      	cmp	r7, #120	; 0x78
 8002aa2:	4691      	mov	r9, r2
 8002aa4:	4680      	mov	r8, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	469a      	mov	sl, r3
 8002aaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002aae:	d807      	bhi.n	8002ac0 <_printf_i+0x28>
 8002ab0:	2f62      	cmp	r7, #98	; 0x62
 8002ab2:	d80a      	bhi.n	8002aca <_printf_i+0x32>
 8002ab4:	2f00      	cmp	r7, #0
 8002ab6:	f000 80d8 	beq.w	8002c6a <_printf_i+0x1d2>
 8002aba:	2f58      	cmp	r7, #88	; 0x58
 8002abc:	f000 80a3 	beq.w	8002c06 <_printf_i+0x16e>
 8002ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ac4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ac8:	e03a      	b.n	8002b40 <_printf_i+0xa8>
 8002aca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ace:	2b15      	cmp	r3, #21
 8002ad0:	d8f6      	bhi.n	8002ac0 <_printf_i+0x28>
 8002ad2:	a101      	add	r1, pc, #4	; (adr r1, 8002ad8 <_printf_i+0x40>)
 8002ad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ad8:	08002b31 	.word	0x08002b31
 8002adc:	08002b45 	.word	0x08002b45
 8002ae0:	08002ac1 	.word	0x08002ac1
 8002ae4:	08002ac1 	.word	0x08002ac1
 8002ae8:	08002ac1 	.word	0x08002ac1
 8002aec:	08002ac1 	.word	0x08002ac1
 8002af0:	08002b45 	.word	0x08002b45
 8002af4:	08002ac1 	.word	0x08002ac1
 8002af8:	08002ac1 	.word	0x08002ac1
 8002afc:	08002ac1 	.word	0x08002ac1
 8002b00:	08002ac1 	.word	0x08002ac1
 8002b04:	08002c51 	.word	0x08002c51
 8002b08:	08002b75 	.word	0x08002b75
 8002b0c:	08002c33 	.word	0x08002c33
 8002b10:	08002ac1 	.word	0x08002ac1
 8002b14:	08002ac1 	.word	0x08002ac1
 8002b18:	08002c73 	.word	0x08002c73
 8002b1c:	08002ac1 	.word	0x08002ac1
 8002b20:	08002b75 	.word	0x08002b75
 8002b24:	08002ac1 	.word	0x08002ac1
 8002b28:	08002ac1 	.word	0x08002ac1
 8002b2c:	08002c3b 	.word	0x08002c3b
 8002b30:	682b      	ldr	r3, [r5, #0]
 8002b32:	1d1a      	adds	r2, r3, #4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	602a      	str	r2, [r5, #0]
 8002b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0a3      	b.n	8002c8c <_printf_i+0x1f4>
 8002b44:	6820      	ldr	r0, [r4, #0]
 8002b46:	6829      	ldr	r1, [r5, #0]
 8002b48:	0606      	lsls	r6, r0, #24
 8002b4a:	f101 0304 	add.w	r3, r1, #4
 8002b4e:	d50a      	bpl.n	8002b66 <_printf_i+0xce>
 8002b50:	680e      	ldr	r6, [r1, #0]
 8002b52:	602b      	str	r3, [r5, #0]
 8002b54:	2e00      	cmp	r6, #0
 8002b56:	da03      	bge.n	8002b60 <_printf_i+0xc8>
 8002b58:	232d      	movs	r3, #45	; 0x2d
 8002b5a:	4276      	negs	r6, r6
 8002b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b60:	485e      	ldr	r0, [pc, #376]	; (8002cdc <_printf_i+0x244>)
 8002b62:	230a      	movs	r3, #10
 8002b64:	e019      	b.n	8002b9a <_printf_i+0x102>
 8002b66:	680e      	ldr	r6, [r1, #0]
 8002b68:	602b      	str	r3, [r5, #0]
 8002b6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b6e:	bf18      	it	ne
 8002b70:	b236      	sxthne	r6, r6
 8002b72:	e7ef      	b.n	8002b54 <_printf_i+0xbc>
 8002b74:	682b      	ldr	r3, [r5, #0]
 8002b76:	6820      	ldr	r0, [r4, #0]
 8002b78:	1d19      	adds	r1, r3, #4
 8002b7a:	6029      	str	r1, [r5, #0]
 8002b7c:	0601      	lsls	r1, r0, #24
 8002b7e:	d501      	bpl.n	8002b84 <_printf_i+0xec>
 8002b80:	681e      	ldr	r6, [r3, #0]
 8002b82:	e002      	b.n	8002b8a <_printf_i+0xf2>
 8002b84:	0646      	lsls	r6, r0, #25
 8002b86:	d5fb      	bpl.n	8002b80 <_printf_i+0xe8>
 8002b88:	881e      	ldrh	r6, [r3, #0]
 8002b8a:	4854      	ldr	r0, [pc, #336]	; (8002cdc <_printf_i+0x244>)
 8002b8c:	2f6f      	cmp	r7, #111	; 0x6f
 8002b8e:	bf0c      	ite	eq
 8002b90:	2308      	moveq	r3, #8
 8002b92:	230a      	movne	r3, #10
 8002b94:	2100      	movs	r1, #0
 8002b96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b9a:	6865      	ldr	r5, [r4, #4]
 8002b9c:	60a5      	str	r5, [r4, #8]
 8002b9e:	2d00      	cmp	r5, #0
 8002ba0:	bfa2      	ittt	ge
 8002ba2:	6821      	ldrge	r1, [r4, #0]
 8002ba4:	f021 0104 	bicge.w	r1, r1, #4
 8002ba8:	6021      	strge	r1, [r4, #0]
 8002baa:	b90e      	cbnz	r6, 8002bb0 <_printf_i+0x118>
 8002bac:	2d00      	cmp	r5, #0
 8002bae:	d04d      	beq.n	8002c4c <_printf_i+0x1b4>
 8002bb0:	4615      	mov	r5, r2
 8002bb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8002bb6:	fb03 6711 	mls	r7, r3, r1, r6
 8002bba:	5dc7      	ldrb	r7, [r0, r7]
 8002bbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002bc0:	4637      	mov	r7, r6
 8002bc2:	42bb      	cmp	r3, r7
 8002bc4:	460e      	mov	r6, r1
 8002bc6:	d9f4      	bls.n	8002bb2 <_printf_i+0x11a>
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d10b      	bne.n	8002be4 <_printf_i+0x14c>
 8002bcc:	6823      	ldr	r3, [r4, #0]
 8002bce:	07de      	lsls	r6, r3, #31
 8002bd0:	d508      	bpl.n	8002be4 <_printf_i+0x14c>
 8002bd2:	6923      	ldr	r3, [r4, #16]
 8002bd4:	6861      	ldr	r1, [r4, #4]
 8002bd6:	4299      	cmp	r1, r3
 8002bd8:	bfde      	ittt	le
 8002bda:	2330      	movle	r3, #48	; 0x30
 8002bdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002be0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002be4:	1b52      	subs	r2, r2, r5
 8002be6:	6122      	str	r2, [r4, #16]
 8002be8:	f8cd a000 	str.w	sl, [sp]
 8002bec:	464b      	mov	r3, r9
 8002bee:	aa03      	add	r2, sp, #12
 8002bf0:	4621      	mov	r1, r4
 8002bf2:	4640      	mov	r0, r8
 8002bf4:	f7ff fee2 	bl	80029bc <_printf_common>
 8002bf8:	3001      	adds	r0, #1
 8002bfa:	d14c      	bne.n	8002c96 <_printf_i+0x1fe>
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	b004      	add	sp, #16
 8002c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c06:	4835      	ldr	r0, [pc, #212]	; (8002cdc <_printf_i+0x244>)
 8002c08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002c0c:	6829      	ldr	r1, [r5, #0]
 8002c0e:	6823      	ldr	r3, [r4, #0]
 8002c10:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c14:	6029      	str	r1, [r5, #0]
 8002c16:	061d      	lsls	r5, r3, #24
 8002c18:	d514      	bpl.n	8002c44 <_printf_i+0x1ac>
 8002c1a:	07df      	lsls	r7, r3, #31
 8002c1c:	bf44      	itt	mi
 8002c1e:	f043 0320 	orrmi.w	r3, r3, #32
 8002c22:	6023      	strmi	r3, [r4, #0]
 8002c24:	b91e      	cbnz	r6, 8002c2e <_printf_i+0x196>
 8002c26:	6823      	ldr	r3, [r4, #0]
 8002c28:	f023 0320 	bic.w	r3, r3, #32
 8002c2c:	6023      	str	r3, [r4, #0]
 8002c2e:	2310      	movs	r3, #16
 8002c30:	e7b0      	b.n	8002b94 <_printf_i+0xfc>
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	f043 0320 	orr.w	r3, r3, #32
 8002c38:	6023      	str	r3, [r4, #0]
 8002c3a:	2378      	movs	r3, #120	; 0x78
 8002c3c:	4828      	ldr	r0, [pc, #160]	; (8002ce0 <_printf_i+0x248>)
 8002c3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c42:	e7e3      	b.n	8002c0c <_printf_i+0x174>
 8002c44:	0659      	lsls	r1, r3, #25
 8002c46:	bf48      	it	mi
 8002c48:	b2b6      	uxthmi	r6, r6
 8002c4a:	e7e6      	b.n	8002c1a <_printf_i+0x182>
 8002c4c:	4615      	mov	r5, r2
 8002c4e:	e7bb      	b.n	8002bc8 <_printf_i+0x130>
 8002c50:	682b      	ldr	r3, [r5, #0]
 8002c52:	6826      	ldr	r6, [r4, #0]
 8002c54:	6961      	ldr	r1, [r4, #20]
 8002c56:	1d18      	adds	r0, r3, #4
 8002c58:	6028      	str	r0, [r5, #0]
 8002c5a:	0635      	lsls	r5, r6, #24
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	d501      	bpl.n	8002c64 <_printf_i+0x1cc>
 8002c60:	6019      	str	r1, [r3, #0]
 8002c62:	e002      	b.n	8002c6a <_printf_i+0x1d2>
 8002c64:	0670      	lsls	r0, r6, #25
 8002c66:	d5fb      	bpl.n	8002c60 <_printf_i+0x1c8>
 8002c68:	8019      	strh	r1, [r3, #0]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	6123      	str	r3, [r4, #16]
 8002c6e:	4615      	mov	r5, r2
 8002c70:	e7ba      	b.n	8002be8 <_printf_i+0x150>
 8002c72:	682b      	ldr	r3, [r5, #0]
 8002c74:	1d1a      	adds	r2, r3, #4
 8002c76:	602a      	str	r2, [r5, #0]
 8002c78:	681d      	ldr	r5, [r3, #0]
 8002c7a:	6862      	ldr	r2, [r4, #4]
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4628      	mov	r0, r5
 8002c80:	f7fd fae6 	bl	8000250 <memchr>
 8002c84:	b108      	cbz	r0, 8002c8a <_printf_i+0x1f2>
 8002c86:	1b40      	subs	r0, r0, r5
 8002c88:	6060      	str	r0, [r4, #4]
 8002c8a:	6863      	ldr	r3, [r4, #4]
 8002c8c:	6123      	str	r3, [r4, #16]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c94:	e7a8      	b.n	8002be8 <_printf_i+0x150>
 8002c96:	6923      	ldr	r3, [r4, #16]
 8002c98:	462a      	mov	r2, r5
 8002c9a:	4649      	mov	r1, r9
 8002c9c:	4640      	mov	r0, r8
 8002c9e:	47d0      	blx	sl
 8002ca0:	3001      	adds	r0, #1
 8002ca2:	d0ab      	beq.n	8002bfc <_printf_i+0x164>
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	079b      	lsls	r3, r3, #30
 8002ca8:	d413      	bmi.n	8002cd2 <_printf_i+0x23a>
 8002caa:	68e0      	ldr	r0, [r4, #12]
 8002cac:	9b03      	ldr	r3, [sp, #12]
 8002cae:	4298      	cmp	r0, r3
 8002cb0:	bfb8      	it	lt
 8002cb2:	4618      	movlt	r0, r3
 8002cb4:	e7a4      	b.n	8002c00 <_printf_i+0x168>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	4632      	mov	r2, r6
 8002cba:	4649      	mov	r1, r9
 8002cbc:	4640      	mov	r0, r8
 8002cbe:	47d0      	blx	sl
 8002cc0:	3001      	adds	r0, #1
 8002cc2:	d09b      	beq.n	8002bfc <_printf_i+0x164>
 8002cc4:	3501      	adds	r5, #1
 8002cc6:	68e3      	ldr	r3, [r4, #12]
 8002cc8:	9903      	ldr	r1, [sp, #12]
 8002cca:	1a5b      	subs	r3, r3, r1
 8002ccc:	42ab      	cmp	r3, r5
 8002cce:	dcf2      	bgt.n	8002cb6 <_printf_i+0x21e>
 8002cd0:	e7eb      	b.n	8002caa <_printf_i+0x212>
 8002cd2:	2500      	movs	r5, #0
 8002cd4:	f104 0619 	add.w	r6, r4, #25
 8002cd8:	e7f5      	b.n	8002cc6 <_printf_i+0x22e>
 8002cda:	bf00      	nop
 8002cdc:	08004d7e 	.word	0x08004d7e
 8002ce0:	08004d8f 	.word	0x08004d8f

08002ce4 <quorem>:
 8002ce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ce8:	6903      	ldr	r3, [r0, #16]
 8002cea:	690c      	ldr	r4, [r1, #16]
 8002cec:	42a3      	cmp	r3, r4
 8002cee:	4607      	mov	r7, r0
 8002cf0:	f2c0 8081 	blt.w	8002df6 <quorem+0x112>
 8002cf4:	3c01      	subs	r4, #1
 8002cf6:	f101 0814 	add.w	r8, r1, #20
 8002cfa:	f100 0514 	add.w	r5, r0, #20
 8002cfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002d02:	9301      	str	r3, [sp, #4]
 8002d04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002d08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002d14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002d18:	fbb2 f6f3 	udiv	r6, r2, r3
 8002d1c:	d331      	bcc.n	8002d82 <quorem+0x9e>
 8002d1e:	f04f 0e00 	mov.w	lr, #0
 8002d22:	4640      	mov	r0, r8
 8002d24:	46ac      	mov	ip, r5
 8002d26:	46f2      	mov	sl, lr
 8002d28:	f850 2b04 	ldr.w	r2, [r0], #4
 8002d2c:	b293      	uxth	r3, r2
 8002d2e:	fb06 e303 	mla	r3, r6, r3, lr
 8002d32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	ebaa 0303 	sub.w	r3, sl, r3
 8002d3c:	f8dc a000 	ldr.w	sl, [ip]
 8002d40:	0c12      	lsrs	r2, r2, #16
 8002d42:	fa13 f38a 	uxtah	r3, r3, sl
 8002d46:	fb06 e202 	mla	r2, r6, r2, lr
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	9b00      	ldr	r3, [sp, #0]
 8002d4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002d52:	b292      	uxth	r2, r2
 8002d54:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002d58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002d5c:	f8bd 3000 	ldrh.w	r3, [sp]
 8002d60:	4581      	cmp	r9, r0
 8002d62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d66:	f84c 3b04 	str.w	r3, [ip], #4
 8002d6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002d6e:	d2db      	bcs.n	8002d28 <quorem+0x44>
 8002d70:	f855 300b 	ldr.w	r3, [r5, fp]
 8002d74:	b92b      	cbnz	r3, 8002d82 <quorem+0x9e>
 8002d76:	9b01      	ldr	r3, [sp, #4]
 8002d78:	3b04      	subs	r3, #4
 8002d7a:	429d      	cmp	r5, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	d32e      	bcc.n	8002dde <quorem+0xfa>
 8002d80:	613c      	str	r4, [r7, #16]
 8002d82:	4638      	mov	r0, r7
 8002d84:	f001 f846 	bl	8003e14 <__mcmp>
 8002d88:	2800      	cmp	r0, #0
 8002d8a:	db24      	blt.n	8002dd6 <quorem+0xf2>
 8002d8c:	3601      	adds	r6, #1
 8002d8e:	4628      	mov	r0, r5
 8002d90:	f04f 0c00 	mov.w	ip, #0
 8002d94:	f858 2b04 	ldr.w	r2, [r8], #4
 8002d98:	f8d0 e000 	ldr.w	lr, [r0]
 8002d9c:	b293      	uxth	r3, r2
 8002d9e:	ebac 0303 	sub.w	r3, ip, r3
 8002da2:	0c12      	lsrs	r2, r2, #16
 8002da4:	fa13 f38e 	uxtah	r3, r3, lr
 8002da8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002dac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002db6:	45c1      	cmp	r9, r8
 8002db8:	f840 3b04 	str.w	r3, [r0], #4
 8002dbc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002dc0:	d2e8      	bcs.n	8002d94 <quorem+0xb0>
 8002dc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002dc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002dca:	b922      	cbnz	r2, 8002dd6 <quorem+0xf2>
 8002dcc:	3b04      	subs	r3, #4
 8002dce:	429d      	cmp	r5, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	d30a      	bcc.n	8002dea <quorem+0x106>
 8002dd4:	613c      	str	r4, [r7, #16]
 8002dd6:	4630      	mov	r0, r6
 8002dd8:	b003      	add	sp, #12
 8002dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	3b04      	subs	r3, #4
 8002de2:	2a00      	cmp	r2, #0
 8002de4:	d1cc      	bne.n	8002d80 <quorem+0x9c>
 8002de6:	3c01      	subs	r4, #1
 8002de8:	e7c7      	b.n	8002d7a <quorem+0x96>
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	3b04      	subs	r3, #4
 8002dee:	2a00      	cmp	r2, #0
 8002df0:	d1f0      	bne.n	8002dd4 <quorem+0xf0>
 8002df2:	3c01      	subs	r4, #1
 8002df4:	e7eb      	b.n	8002dce <quorem+0xea>
 8002df6:	2000      	movs	r0, #0
 8002df8:	e7ee      	b.n	8002dd8 <quorem+0xf4>
 8002dfa:	0000      	movs	r0, r0
 8002dfc:	0000      	movs	r0, r0
	...

08002e00 <_dtoa_r>:
 8002e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e04:	ed2d 8b02 	vpush	{d8}
 8002e08:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002e0a:	b091      	sub	sp, #68	; 0x44
 8002e0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002e10:	ec59 8b10 	vmov	r8, r9, d0
 8002e14:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8002e16:	9106      	str	r1, [sp, #24]
 8002e18:	4606      	mov	r6, r0
 8002e1a:	9208      	str	r2, [sp, #32]
 8002e1c:	930c      	str	r3, [sp, #48]	; 0x30
 8002e1e:	b975      	cbnz	r5, 8002e3e <_dtoa_r+0x3e>
 8002e20:	2010      	movs	r0, #16
 8002e22:	f000 fd5f 	bl	80038e4 <malloc>
 8002e26:	4602      	mov	r2, r0
 8002e28:	6270      	str	r0, [r6, #36]	; 0x24
 8002e2a:	b920      	cbnz	r0, 8002e36 <_dtoa_r+0x36>
 8002e2c:	4baa      	ldr	r3, [pc, #680]	; (80030d8 <_dtoa_r+0x2d8>)
 8002e2e:	21ea      	movs	r1, #234	; 0xea
 8002e30:	48aa      	ldr	r0, [pc, #680]	; (80030dc <_dtoa_r+0x2dc>)
 8002e32:	f001 f9f7 	bl	8004224 <__assert_func>
 8002e36:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002e3a:	6005      	str	r5, [r0, #0]
 8002e3c:	60c5      	str	r5, [r0, #12]
 8002e3e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002e40:	6819      	ldr	r1, [r3, #0]
 8002e42:	b151      	cbz	r1, 8002e5a <_dtoa_r+0x5a>
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	604a      	str	r2, [r1, #4]
 8002e48:	2301      	movs	r3, #1
 8002e4a:	4093      	lsls	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
 8002e4e:	4630      	mov	r0, r6
 8002e50:	f000 fd9e 	bl	8003990 <_Bfree>
 8002e54:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	f1b9 0300 	subs.w	r3, r9, #0
 8002e5e:	bfbb      	ittet	lt
 8002e60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002e64:	9303      	strlt	r3, [sp, #12]
 8002e66:	2300      	movge	r3, #0
 8002e68:	2201      	movlt	r2, #1
 8002e6a:	bfac      	ite	ge
 8002e6c:	6023      	strge	r3, [r4, #0]
 8002e6e:	6022      	strlt	r2, [r4, #0]
 8002e70:	4b9b      	ldr	r3, [pc, #620]	; (80030e0 <_dtoa_r+0x2e0>)
 8002e72:	9c03      	ldr	r4, [sp, #12]
 8002e74:	43a3      	bics	r3, r4
 8002e76:	d11c      	bne.n	8002eb2 <_dtoa_r+0xb2>
 8002e78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002e7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8002e84:	ea53 0308 	orrs.w	r3, r3, r8
 8002e88:	f000 84fd 	beq.w	8003886 <_dtoa_r+0xa86>
 8002e8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002e8e:	b963      	cbnz	r3, 8002eaa <_dtoa_r+0xaa>
 8002e90:	4b94      	ldr	r3, [pc, #592]	; (80030e4 <_dtoa_r+0x2e4>)
 8002e92:	e01f      	b.n	8002ed4 <_dtoa_r+0xd4>
 8002e94:	4b94      	ldr	r3, [pc, #592]	; (80030e8 <_dtoa_r+0x2e8>)
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	3308      	adds	r3, #8
 8002e9a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	9801      	ldr	r0, [sp, #4]
 8002ea0:	b011      	add	sp, #68	; 0x44
 8002ea2:	ecbd 8b02 	vpop	{d8}
 8002ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eaa:	4b8e      	ldr	r3, [pc, #568]	; (80030e4 <_dtoa_r+0x2e4>)
 8002eac:	9301      	str	r3, [sp, #4]
 8002eae:	3303      	adds	r3, #3
 8002eb0:	e7f3      	b.n	8002e9a <_dtoa_r+0x9a>
 8002eb2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8002eb6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8002eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ebe:	d10b      	bne.n	8002ed8 <_dtoa_r+0xd8>
 8002ec0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 84d9 	beq.w	8003880 <_dtoa_r+0xa80>
 8002ece:	4887      	ldr	r0, [pc, #540]	; (80030ec <_dtoa_r+0x2ec>)
 8002ed0:	6018      	str	r0, [r3, #0]
 8002ed2:	1e43      	subs	r3, r0, #1
 8002ed4:	9301      	str	r3, [sp, #4]
 8002ed6:	e7e2      	b.n	8002e9e <_dtoa_r+0x9e>
 8002ed8:	a90f      	add	r1, sp, #60	; 0x3c
 8002eda:	aa0e      	add	r2, sp, #56	; 0x38
 8002edc:	4630      	mov	r0, r6
 8002ede:	eeb0 0b48 	vmov.f64	d0, d8
 8002ee2:	f001 f83d 	bl	8003f60 <__d2b>
 8002ee6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8002eea:	4605      	mov	r5, r0
 8002eec:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002eee:	2900      	cmp	r1, #0
 8002ef0:	d046      	beq.n	8002f80 <_dtoa_r+0x180>
 8002ef2:	ee18 4a90 	vmov	r4, s17
 8002ef6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002efa:	ec53 2b18 	vmov	r2, r3, d8
 8002efe:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8002f02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002f06:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8002f0a:	2400      	movs	r4, #0
 8002f0c:	ec43 2b16 	vmov	d6, r2, r3
 8002f10:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8002f14:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80030c0 <_dtoa_r+0x2c0>
 8002f18:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002f1c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80030c8 <_dtoa_r+0x2c8>
 8002f20:	eea7 6b05 	vfma.f64	d6, d7, d5
 8002f24:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80030d0 <_dtoa_r+0x2d0>
 8002f28:	ee07 1a90 	vmov	s15, r1
 8002f2c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8002f30:	eeb0 7b46 	vmov.f64	d7, d6
 8002f34:	eea4 7b05 	vfma.f64	d7, d4, d5
 8002f38:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8002f3c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f44:	ee16 ba90 	vmov	fp, s13
 8002f48:	940a      	str	r4, [sp, #40]	; 0x28
 8002f4a:	d508      	bpl.n	8002f5e <_dtoa_r+0x15e>
 8002f4c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8002f50:	eeb4 6b47 	vcmp.f64	d6, d7
 8002f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f58:	bf18      	it	ne
 8002f5a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8002f5e:	f1bb 0f16 	cmp.w	fp, #22
 8002f62:	d82f      	bhi.n	8002fc4 <_dtoa_r+0x1c4>
 8002f64:	4b62      	ldr	r3, [pc, #392]	; (80030f0 <_dtoa_r+0x2f0>)
 8002f66:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002f6a:	ed93 7b00 	vldr	d7, [r3]
 8002f6e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8002f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f76:	d501      	bpl.n	8002f7c <_dtoa_r+0x17c>
 8002f78:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	e022      	b.n	8002fc6 <_dtoa_r+0x1c6>
 8002f80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002f82:	4401      	add	r1, r0
 8002f84:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	bfc1      	itttt	gt
 8002f8c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002f90:	fa04 f303 	lslgt.w	r3, r4, r3
 8002f94:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8002f98:	fa28 f804 	lsrgt.w	r8, r8, r4
 8002f9c:	bfd6      	itet	le
 8002f9e:	f1c3 0320 	rsble	r3, r3, #32
 8002fa2:	ea43 0808 	orrgt.w	r8, r3, r8
 8002fa6:	fa08 f803 	lslle.w	r8, r8, r3
 8002faa:	ee07 8a90 	vmov	s15, r8
 8002fae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002fb2:	3901      	subs	r1, #1
 8002fb4:	ee17 4a90 	vmov	r4, s15
 8002fb8:	ec53 2b17 	vmov	r2, r3, d7
 8002fbc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8002fc0:	2401      	movs	r4, #1
 8002fc2:	e7a3      	b.n	8002f0c <_dtoa_r+0x10c>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8002fc8:	1a43      	subs	r3, r0, r1
 8002fca:	1e5a      	subs	r2, r3, #1
 8002fcc:	bf45      	ittet	mi
 8002fce:	f1c3 0301 	rsbmi	r3, r3, #1
 8002fd2:	9304      	strmi	r3, [sp, #16]
 8002fd4:	2300      	movpl	r3, #0
 8002fd6:	2300      	movmi	r3, #0
 8002fd8:	9205      	str	r2, [sp, #20]
 8002fda:	bf54      	ite	pl
 8002fdc:	9304      	strpl	r3, [sp, #16]
 8002fde:	9305      	strmi	r3, [sp, #20]
 8002fe0:	f1bb 0f00 	cmp.w	fp, #0
 8002fe4:	db18      	blt.n	8003018 <_dtoa_r+0x218>
 8002fe6:	9b05      	ldr	r3, [sp, #20]
 8002fe8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8002fec:	445b      	add	r3, fp
 8002fee:	9305      	str	r3, [sp, #20]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	9a06      	ldr	r2, [sp, #24]
 8002ff4:	2a09      	cmp	r2, #9
 8002ff6:	d849      	bhi.n	800308c <_dtoa_r+0x28c>
 8002ff8:	2a05      	cmp	r2, #5
 8002ffa:	bfc4      	itt	gt
 8002ffc:	3a04      	subgt	r2, #4
 8002ffe:	9206      	strgt	r2, [sp, #24]
 8003000:	9a06      	ldr	r2, [sp, #24]
 8003002:	f1a2 0202 	sub.w	r2, r2, #2
 8003006:	bfcc      	ite	gt
 8003008:	2400      	movgt	r4, #0
 800300a:	2401      	movle	r4, #1
 800300c:	2a03      	cmp	r2, #3
 800300e:	d848      	bhi.n	80030a2 <_dtoa_r+0x2a2>
 8003010:	e8df f002 	tbb	[pc, r2]
 8003014:	3a2c2e0b 	.word	0x3a2c2e0b
 8003018:	9b04      	ldr	r3, [sp, #16]
 800301a:	2200      	movs	r2, #0
 800301c:	eba3 030b 	sub.w	r3, r3, fp
 8003020:	9304      	str	r3, [sp, #16]
 8003022:	9209      	str	r2, [sp, #36]	; 0x24
 8003024:	f1cb 0300 	rsb	r3, fp, #0
 8003028:	e7e3      	b.n	8002ff2 <_dtoa_r+0x1f2>
 800302a:	2200      	movs	r2, #0
 800302c:	9207      	str	r2, [sp, #28]
 800302e:	9a08      	ldr	r2, [sp, #32]
 8003030:	2a00      	cmp	r2, #0
 8003032:	dc39      	bgt.n	80030a8 <_dtoa_r+0x2a8>
 8003034:	f04f 0a01 	mov.w	sl, #1
 8003038:	46d1      	mov	r9, sl
 800303a:	4652      	mov	r2, sl
 800303c:	f8cd a020 	str.w	sl, [sp, #32]
 8003040:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8003042:	2100      	movs	r1, #0
 8003044:	6079      	str	r1, [r7, #4]
 8003046:	2004      	movs	r0, #4
 8003048:	f100 0c14 	add.w	ip, r0, #20
 800304c:	4594      	cmp	ip, r2
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	d92f      	bls.n	80030b2 <_dtoa_r+0x2b2>
 8003052:	4630      	mov	r0, r6
 8003054:	930d      	str	r3, [sp, #52]	; 0x34
 8003056:	f000 fc5b 	bl	8003910 <_Balloc>
 800305a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800305c:	9001      	str	r0, [sp, #4]
 800305e:	4602      	mov	r2, r0
 8003060:	2800      	cmp	r0, #0
 8003062:	d149      	bne.n	80030f8 <_dtoa_r+0x2f8>
 8003064:	4b23      	ldr	r3, [pc, #140]	; (80030f4 <_dtoa_r+0x2f4>)
 8003066:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800306a:	e6e1      	b.n	8002e30 <_dtoa_r+0x30>
 800306c:	2201      	movs	r2, #1
 800306e:	e7dd      	b.n	800302c <_dtoa_r+0x22c>
 8003070:	2200      	movs	r2, #0
 8003072:	9207      	str	r2, [sp, #28]
 8003074:	9a08      	ldr	r2, [sp, #32]
 8003076:	eb0b 0a02 	add.w	sl, fp, r2
 800307a:	f10a 0901 	add.w	r9, sl, #1
 800307e:	464a      	mov	r2, r9
 8003080:	2a01      	cmp	r2, #1
 8003082:	bfb8      	it	lt
 8003084:	2201      	movlt	r2, #1
 8003086:	e7db      	b.n	8003040 <_dtoa_r+0x240>
 8003088:	2201      	movs	r2, #1
 800308a:	e7f2      	b.n	8003072 <_dtoa_r+0x272>
 800308c:	2401      	movs	r4, #1
 800308e:	2200      	movs	r2, #0
 8003090:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8003094:	f04f 3aff 	mov.w	sl, #4294967295
 8003098:	2100      	movs	r1, #0
 800309a:	46d1      	mov	r9, sl
 800309c:	2212      	movs	r2, #18
 800309e:	9108      	str	r1, [sp, #32]
 80030a0:	e7ce      	b.n	8003040 <_dtoa_r+0x240>
 80030a2:	2201      	movs	r2, #1
 80030a4:	9207      	str	r2, [sp, #28]
 80030a6:	e7f5      	b.n	8003094 <_dtoa_r+0x294>
 80030a8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80030ac:	46d1      	mov	r9, sl
 80030ae:	4652      	mov	r2, sl
 80030b0:	e7c6      	b.n	8003040 <_dtoa_r+0x240>
 80030b2:	3101      	adds	r1, #1
 80030b4:	6079      	str	r1, [r7, #4]
 80030b6:	0040      	lsls	r0, r0, #1
 80030b8:	e7c6      	b.n	8003048 <_dtoa_r+0x248>
 80030ba:	bf00      	nop
 80030bc:	f3af 8000 	nop.w
 80030c0:	636f4361 	.word	0x636f4361
 80030c4:	3fd287a7 	.word	0x3fd287a7
 80030c8:	8b60c8b3 	.word	0x8b60c8b3
 80030cc:	3fc68a28 	.word	0x3fc68a28
 80030d0:	509f79fb 	.word	0x509f79fb
 80030d4:	3fd34413 	.word	0x3fd34413
 80030d8:	08004dad 	.word	0x08004dad
 80030dc:	08004dc4 	.word	0x08004dc4
 80030e0:	7ff00000 	.word	0x7ff00000
 80030e4:	08004da9 	.word	0x08004da9
 80030e8:	08004da0 	.word	0x08004da0
 80030ec:	08004d7d 	.word	0x08004d7d
 80030f0:	08004eb8 	.word	0x08004eb8
 80030f4:	08004e1f 	.word	0x08004e1f
 80030f8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80030fa:	9901      	ldr	r1, [sp, #4]
 80030fc:	6011      	str	r1, [r2, #0]
 80030fe:	f1b9 0f0e 	cmp.w	r9, #14
 8003102:	d86c      	bhi.n	80031de <_dtoa_r+0x3de>
 8003104:	2c00      	cmp	r4, #0
 8003106:	d06a      	beq.n	80031de <_dtoa_r+0x3de>
 8003108:	f1bb 0f00 	cmp.w	fp, #0
 800310c:	f340 80a0 	ble.w	8003250 <_dtoa_r+0x450>
 8003110:	49c1      	ldr	r1, [pc, #772]	; (8003418 <_dtoa_r+0x618>)
 8003112:	f00b 020f 	and.w	r2, fp, #15
 8003116:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800311a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800311e:	ed92 7b00 	vldr	d7, [r2]
 8003122:	ea4f 112b 	mov.w	r1, fp, asr #4
 8003126:	f000 8087 	beq.w	8003238 <_dtoa_r+0x438>
 800312a:	4abc      	ldr	r2, [pc, #752]	; (800341c <_dtoa_r+0x61c>)
 800312c:	ed92 6b08 	vldr	d6, [r2, #32]
 8003130:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8003134:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003138:	f001 010f 	and.w	r1, r1, #15
 800313c:	2203      	movs	r2, #3
 800313e:	48b7      	ldr	r0, [pc, #732]	; (800341c <_dtoa_r+0x61c>)
 8003140:	2900      	cmp	r1, #0
 8003142:	d17b      	bne.n	800323c <_dtoa_r+0x43c>
 8003144:	ed9d 6b02 	vldr	d6, [sp, #8]
 8003148:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800314c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003150:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003152:	2900      	cmp	r1, #0
 8003154:	f000 80a2 	beq.w	800329c <_dtoa_r+0x49c>
 8003158:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800315c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003160:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003168:	f140 8098 	bpl.w	800329c <_dtoa_r+0x49c>
 800316c:	f1b9 0f00 	cmp.w	r9, #0
 8003170:	f000 8094 	beq.w	800329c <_dtoa_r+0x49c>
 8003174:	f1ba 0f00 	cmp.w	sl, #0
 8003178:	dd2f      	ble.n	80031da <_dtoa_r+0x3da>
 800317a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800317e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003182:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003186:	f10b 37ff 	add.w	r7, fp, #4294967295
 800318a:	3201      	adds	r2, #1
 800318c:	4650      	mov	r0, sl
 800318e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8003192:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8003196:	ee07 2a90 	vmov	s15, r2
 800319a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800319e:	eea7 5b06 	vfma.f64	d5, d7, d6
 80031a2:	ee15 4a90 	vmov	r4, s11
 80031a6:	ec52 1b15 	vmov	r1, r2, d5
 80031aa:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80031ae:	2800      	cmp	r0, #0
 80031b0:	d177      	bne.n	80032a2 <_dtoa_r+0x4a2>
 80031b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80031b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80031ba:	ec42 1b17 	vmov	d7, r1, r2
 80031be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80031c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c6:	f300 8263 	bgt.w	8003690 <_dtoa_r+0x890>
 80031ca:	eeb1 7b47 	vneg.f64	d7, d7
 80031ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80031d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d6:	f100 8258 	bmi.w	800368a <_dtoa_r+0x88a>
 80031da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80031de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80031e0:	2a00      	cmp	r2, #0
 80031e2:	f2c0 811d 	blt.w	8003420 <_dtoa_r+0x620>
 80031e6:	f1bb 0f0e 	cmp.w	fp, #14
 80031ea:	f300 8119 	bgt.w	8003420 <_dtoa_r+0x620>
 80031ee:	4b8a      	ldr	r3, [pc, #552]	; (8003418 <_dtoa_r+0x618>)
 80031f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80031f4:	ed93 6b00 	vldr	d6, [r3]
 80031f8:	9b08      	ldr	r3, [sp, #32]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f280 80b7 	bge.w	800336e <_dtoa_r+0x56e>
 8003200:	f1b9 0f00 	cmp.w	r9, #0
 8003204:	f300 80b3 	bgt.w	800336e <_dtoa_r+0x56e>
 8003208:	f040 823f 	bne.w	800368a <_dtoa_r+0x88a>
 800320c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8003210:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003214:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003218:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003220:	464c      	mov	r4, r9
 8003222:	464f      	mov	r7, r9
 8003224:	f280 8215 	bge.w	8003652 <_dtoa_r+0x852>
 8003228:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800322c:	2331      	movs	r3, #49	; 0x31
 800322e:	f808 3b01 	strb.w	r3, [r8], #1
 8003232:	f10b 0b01 	add.w	fp, fp, #1
 8003236:	e211      	b.n	800365c <_dtoa_r+0x85c>
 8003238:	2202      	movs	r2, #2
 800323a:	e780      	b.n	800313e <_dtoa_r+0x33e>
 800323c:	07cc      	lsls	r4, r1, #31
 800323e:	d504      	bpl.n	800324a <_dtoa_r+0x44a>
 8003240:	ed90 6b00 	vldr	d6, [r0]
 8003244:	3201      	adds	r2, #1
 8003246:	ee27 7b06 	vmul.f64	d7, d7, d6
 800324a:	1049      	asrs	r1, r1, #1
 800324c:	3008      	adds	r0, #8
 800324e:	e777      	b.n	8003140 <_dtoa_r+0x340>
 8003250:	d022      	beq.n	8003298 <_dtoa_r+0x498>
 8003252:	f1cb 0100 	rsb	r1, fp, #0
 8003256:	4a70      	ldr	r2, [pc, #448]	; (8003418 <_dtoa_r+0x618>)
 8003258:	f001 000f 	and.w	r0, r1, #15
 800325c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8003260:	ed92 7b00 	vldr	d7, [r2]
 8003264:	ee28 7b07 	vmul.f64	d7, d8, d7
 8003268:	ed8d 7b02 	vstr	d7, [sp, #8]
 800326c:	486b      	ldr	r0, [pc, #428]	; (800341c <_dtoa_r+0x61c>)
 800326e:	1109      	asrs	r1, r1, #4
 8003270:	2400      	movs	r4, #0
 8003272:	2202      	movs	r2, #2
 8003274:	b929      	cbnz	r1, 8003282 <_dtoa_r+0x482>
 8003276:	2c00      	cmp	r4, #0
 8003278:	f43f af6a 	beq.w	8003150 <_dtoa_r+0x350>
 800327c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003280:	e766      	b.n	8003150 <_dtoa_r+0x350>
 8003282:	07cf      	lsls	r7, r1, #31
 8003284:	d505      	bpl.n	8003292 <_dtoa_r+0x492>
 8003286:	ed90 6b00 	vldr	d6, [r0]
 800328a:	3201      	adds	r2, #1
 800328c:	2401      	movs	r4, #1
 800328e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003292:	1049      	asrs	r1, r1, #1
 8003294:	3008      	adds	r0, #8
 8003296:	e7ed      	b.n	8003274 <_dtoa_r+0x474>
 8003298:	2202      	movs	r2, #2
 800329a:	e759      	b.n	8003150 <_dtoa_r+0x350>
 800329c:	465f      	mov	r7, fp
 800329e:	4648      	mov	r0, r9
 80032a0:	e775      	b.n	800318e <_dtoa_r+0x38e>
 80032a2:	ec42 1b17 	vmov	d7, r1, r2
 80032a6:	4a5c      	ldr	r2, [pc, #368]	; (8003418 <_dtoa_r+0x618>)
 80032a8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80032ac:	ed12 4b02 	vldr	d4, [r2, #-8]
 80032b0:	9a01      	ldr	r2, [sp, #4]
 80032b2:	1814      	adds	r4, r2, r0
 80032b4:	9a07      	ldr	r2, [sp, #28]
 80032b6:	b352      	cbz	r2, 800330e <_dtoa_r+0x50e>
 80032b8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80032bc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80032c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80032c4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80032c8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80032cc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80032d0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80032d4:	ee14 2a90 	vmov	r2, s9
 80032d8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80032dc:	3230      	adds	r2, #48	; 0x30
 80032de:	ee36 6b45 	vsub.f64	d6, d6, d5
 80032e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80032e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ea:	f808 2b01 	strb.w	r2, [r8], #1
 80032ee:	d439      	bmi.n	8003364 <_dtoa_r+0x564>
 80032f0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80032f4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80032f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fc:	d472      	bmi.n	80033e4 <_dtoa_r+0x5e4>
 80032fe:	45a0      	cmp	r8, r4
 8003300:	f43f af6b 	beq.w	80031da <_dtoa_r+0x3da>
 8003304:	ee27 7b03 	vmul.f64	d7, d7, d3
 8003308:	ee26 6b03 	vmul.f64	d6, d6, d3
 800330c:	e7e0      	b.n	80032d0 <_dtoa_r+0x4d0>
 800330e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003312:	ee27 7b04 	vmul.f64	d7, d7, d4
 8003316:	4621      	mov	r1, r4
 8003318:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800331c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8003320:	ee14 2a90 	vmov	r2, s9
 8003324:	3230      	adds	r2, #48	; 0x30
 8003326:	f808 2b01 	strb.w	r2, [r8], #1
 800332a:	45a0      	cmp	r8, r4
 800332c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8003330:	ee36 6b45 	vsub.f64	d6, d6, d5
 8003334:	d118      	bne.n	8003368 <_dtoa_r+0x568>
 8003336:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800333a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800333e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8003342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003346:	dc4d      	bgt.n	80033e4 <_dtoa_r+0x5e4>
 8003348:	ee35 7b47 	vsub.f64	d7, d5, d7
 800334c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003354:	f57f af41 	bpl.w	80031da <_dtoa_r+0x3da>
 8003358:	4688      	mov	r8, r1
 800335a:	3901      	subs	r1, #1
 800335c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8003360:	2b30      	cmp	r3, #48	; 0x30
 8003362:	d0f9      	beq.n	8003358 <_dtoa_r+0x558>
 8003364:	46bb      	mov	fp, r7
 8003366:	e02a      	b.n	80033be <_dtoa_r+0x5be>
 8003368:	ee26 6b03 	vmul.f64	d6, d6, d3
 800336c:	e7d6      	b.n	800331c <_dtoa_r+0x51c>
 800336e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003372:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8003376:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800337a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800337e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8003382:	ee15 3a10 	vmov	r3, s10
 8003386:	3330      	adds	r3, #48	; 0x30
 8003388:	f808 3b01 	strb.w	r3, [r8], #1
 800338c:	9b01      	ldr	r3, [sp, #4]
 800338e:	eba8 0303 	sub.w	r3, r8, r3
 8003392:	4599      	cmp	r9, r3
 8003394:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8003398:	eea3 7b46 	vfms.f64	d7, d3, d6
 800339c:	d133      	bne.n	8003406 <_dtoa_r+0x606>
 800339e:	ee37 7b07 	vadd.f64	d7, d7, d7
 80033a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80033a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033aa:	dc1a      	bgt.n	80033e2 <_dtoa_r+0x5e2>
 80033ac:	eeb4 7b46 	vcmp.f64	d7, d6
 80033b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b4:	d103      	bne.n	80033be <_dtoa_r+0x5be>
 80033b6:	ee15 3a10 	vmov	r3, s10
 80033ba:	07d9      	lsls	r1, r3, #31
 80033bc:	d411      	bmi.n	80033e2 <_dtoa_r+0x5e2>
 80033be:	4629      	mov	r1, r5
 80033c0:	4630      	mov	r0, r6
 80033c2:	f000 fae5 	bl	8003990 <_Bfree>
 80033c6:	2300      	movs	r3, #0
 80033c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80033ca:	f888 3000 	strb.w	r3, [r8]
 80033ce:	f10b 0301 	add.w	r3, fp, #1
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f43f ad61 	beq.w	8002e9e <_dtoa_r+0x9e>
 80033dc:	f8c3 8000 	str.w	r8, [r3]
 80033e0:	e55d      	b.n	8002e9e <_dtoa_r+0x9e>
 80033e2:	465f      	mov	r7, fp
 80033e4:	4643      	mov	r3, r8
 80033e6:	4698      	mov	r8, r3
 80033e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80033ec:	2a39      	cmp	r2, #57	; 0x39
 80033ee:	d106      	bne.n	80033fe <_dtoa_r+0x5fe>
 80033f0:	9a01      	ldr	r2, [sp, #4]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d1f7      	bne.n	80033e6 <_dtoa_r+0x5e6>
 80033f6:	9901      	ldr	r1, [sp, #4]
 80033f8:	2230      	movs	r2, #48	; 0x30
 80033fa:	3701      	adds	r7, #1
 80033fc:	700a      	strb	r2, [r1, #0]
 80033fe:	781a      	ldrb	r2, [r3, #0]
 8003400:	3201      	adds	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	e7ae      	b.n	8003364 <_dtoa_r+0x564>
 8003406:	ee27 7b04 	vmul.f64	d7, d7, d4
 800340a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800340e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003412:	d1b2      	bne.n	800337a <_dtoa_r+0x57a>
 8003414:	e7d3      	b.n	80033be <_dtoa_r+0x5be>
 8003416:	bf00      	nop
 8003418:	08004eb8 	.word	0x08004eb8
 800341c:	08004e90 	.word	0x08004e90
 8003420:	9907      	ldr	r1, [sp, #28]
 8003422:	2900      	cmp	r1, #0
 8003424:	f000 80d0 	beq.w	80035c8 <_dtoa_r+0x7c8>
 8003428:	9906      	ldr	r1, [sp, #24]
 800342a:	2901      	cmp	r1, #1
 800342c:	f300 80b4 	bgt.w	8003598 <_dtoa_r+0x798>
 8003430:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003432:	2900      	cmp	r1, #0
 8003434:	f000 80ac 	beq.w	8003590 <_dtoa_r+0x790>
 8003438:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800343c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8003440:	461c      	mov	r4, r3
 8003442:	930a      	str	r3, [sp, #40]	; 0x28
 8003444:	9b04      	ldr	r3, [sp, #16]
 8003446:	4413      	add	r3, r2
 8003448:	9304      	str	r3, [sp, #16]
 800344a:	9b05      	ldr	r3, [sp, #20]
 800344c:	2101      	movs	r1, #1
 800344e:	4413      	add	r3, r2
 8003450:	4630      	mov	r0, r6
 8003452:	9305      	str	r3, [sp, #20]
 8003454:	f000 fb54 	bl	8003b00 <__i2b>
 8003458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800345a:	4607      	mov	r7, r0
 800345c:	f1b8 0f00 	cmp.w	r8, #0
 8003460:	dd0d      	ble.n	800347e <_dtoa_r+0x67e>
 8003462:	9a05      	ldr	r2, [sp, #20]
 8003464:	2a00      	cmp	r2, #0
 8003466:	dd0a      	ble.n	800347e <_dtoa_r+0x67e>
 8003468:	4542      	cmp	r2, r8
 800346a:	9904      	ldr	r1, [sp, #16]
 800346c:	bfa8      	it	ge
 800346e:	4642      	movge	r2, r8
 8003470:	1a89      	subs	r1, r1, r2
 8003472:	9104      	str	r1, [sp, #16]
 8003474:	9905      	ldr	r1, [sp, #20]
 8003476:	eba8 0802 	sub.w	r8, r8, r2
 800347a:	1a8a      	subs	r2, r1, r2
 800347c:	9205      	str	r2, [sp, #20]
 800347e:	b303      	cbz	r3, 80034c2 <_dtoa_r+0x6c2>
 8003480:	9a07      	ldr	r2, [sp, #28]
 8003482:	2a00      	cmp	r2, #0
 8003484:	f000 80a5 	beq.w	80035d2 <_dtoa_r+0x7d2>
 8003488:	2c00      	cmp	r4, #0
 800348a:	dd13      	ble.n	80034b4 <_dtoa_r+0x6b4>
 800348c:	4639      	mov	r1, r7
 800348e:	4622      	mov	r2, r4
 8003490:	4630      	mov	r0, r6
 8003492:	930d      	str	r3, [sp, #52]	; 0x34
 8003494:	f000 fbf4 	bl	8003c80 <__pow5mult>
 8003498:	462a      	mov	r2, r5
 800349a:	4601      	mov	r1, r0
 800349c:	4607      	mov	r7, r0
 800349e:	4630      	mov	r0, r6
 80034a0:	f000 fb44 	bl	8003b2c <__multiply>
 80034a4:	4629      	mov	r1, r5
 80034a6:	900a      	str	r0, [sp, #40]	; 0x28
 80034a8:	4630      	mov	r0, r6
 80034aa:	f000 fa71 	bl	8003990 <_Bfree>
 80034ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034b2:	4615      	mov	r5, r2
 80034b4:	1b1a      	subs	r2, r3, r4
 80034b6:	d004      	beq.n	80034c2 <_dtoa_r+0x6c2>
 80034b8:	4629      	mov	r1, r5
 80034ba:	4630      	mov	r0, r6
 80034bc:	f000 fbe0 	bl	8003c80 <__pow5mult>
 80034c0:	4605      	mov	r5, r0
 80034c2:	2101      	movs	r1, #1
 80034c4:	4630      	mov	r0, r6
 80034c6:	f000 fb1b 	bl	8003b00 <__i2b>
 80034ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	4604      	mov	r4, r0
 80034d0:	f340 8081 	ble.w	80035d6 <_dtoa_r+0x7d6>
 80034d4:	461a      	mov	r2, r3
 80034d6:	4601      	mov	r1, r0
 80034d8:	4630      	mov	r0, r6
 80034da:	f000 fbd1 	bl	8003c80 <__pow5mult>
 80034de:	9b06      	ldr	r3, [sp, #24]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	4604      	mov	r4, r0
 80034e4:	dd7a      	ble.n	80035dc <_dtoa_r+0x7dc>
 80034e6:	2300      	movs	r3, #0
 80034e8:	930a      	str	r3, [sp, #40]	; 0x28
 80034ea:	6922      	ldr	r2, [r4, #16]
 80034ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80034f0:	6910      	ldr	r0, [r2, #16]
 80034f2:	f000 fab5 	bl	8003a60 <__hi0bits>
 80034f6:	f1c0 0020 	rsb	r0, r0, #32
 80034fa:	9b05      	ldr	r3, [sp, #20]
 80034fc:	4418      	add	r0, r3
 80034fe:	f010 001f 	ands.w	r0, r0, #31
 8003502:	f000 808c 	beq.w	800361e <_dtoa_r+0x81e>
 8003506:	f1c0 0220 	rsb	r2, r0, #32
 800350a:	2a04      	cmp	r2, #4
 800350c:	f340 8085 	ble.w	800361a <_dtoa_r+0x81a>
 8003510:	f1c0 001c 	rsb	r0, r0, #28
 8003514:	9b04      	ldr	r3, [sp, #16]
 8003516:	4403      	add	r3, r0
 8003518:	9304      	str	r3, [sp, #16]
 800351a:	9b05      	ldr	r3, [sp, #20]
 800351c:	4403      	add	r3, r0
 800351e:	4480      	add	r8, r0
 8003520:	9305      	str	r3, [sp, #20]
 8003522:	9b04      	ldr	r3, [sp, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	dd05      	ble.n	8003534 <_dtoa_r+0x734>
 8003528:	4629      	mov	r1, r5
 800352a:	461a      	mov	r2, r3
 800352c:	4630      	mov	r0, r6
 800352e:	f000 fc01 	bl	8003d34 <__lshift>
 8003532:	4605      	mov	r5, r0
 8003534:	9b05      	ldr	r3, [sp, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	dd05      	ble.n	8003546 <_dtoa_r+0x746>
 800353a:	4621      	mov	r1, r4
 800353c:	461a      	mov	r2, r3
 800353e:	4630      	mov	r0, r6
 8003540:	f000 fbf8 	bl	8003d34 <__lshift>
 8003544:	4604      	mov	r4, r0
 8003546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d06a      	beq.n	8003622 <_dtoa_r+0x822>
 800354c:	4621      	mov	r1, r4
 800354e:	4628      	mov	r0, r5
 8003550:	f000 fc60 	bl	8003e14 <__mcmp>
 8003554:	2800      	cmp	r0, #0
 8003556:	da64      	bge.n	8003622 <_dtoa_r+0x822>
 8003558:	2300      	movs	r3, #0
 800355a:	4629      	mov	r1, r5
 800355c:	220a      	movs	r2, #10
 800355e:	4630      	mov	r0, r6
 8003560:	f000 fa38 	bl	80039d4 <__multadd>
 8003564:	9b07      	ldr	r3, [sp, #28]
 8003566:	f10b 3bff 	add.w	fp, fp, #4294967295
 800356a:	4605      	mov	r5, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8191 	beq.w	8003894 <_dtoa_r+0xa94>
 8003572:	4639      	mov	r1, r7
 8003574:	2300      	movs	r3, #0
 8003576:	220a      	movs	r2, #10
 8003578:	4630      	mov	r0, r6
 800357a:	f000 fa2b 	bl	80039d4 <__multadd>
 800357e:	f1ba 0f00 	cmp.w	sl, #0
 8003582:	4607      	mov	r7, r0
 8003584:	f300 808d 	bgt.w	80036a2 <_dtoa_r+0x8a2>
 8003588:	9b06      	ldr	r3, [sp, #24]
 800358a:	2b02      	cmp	r3, #2
 800358c:	dc50      	bgt.n	8003630 <_dtoa_r+0x830>
 800358e:	e088      	b.n	80036a2 <_dtoa_r+0x8a2>
 8003590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003592:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003596:	e751      	b.n	800343c <_dtoa_r+0x63c>
 8003598:	f109 34ff 	add.w	r4, r9, #4294967295
 800359c:	42a3      	cmp	r3, r4
 800359e:	bfbf      	itttt	lt
 80035a0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80035a2:	1ae3      	sublt	r3, r4, r3
 80035a4:	18d2      	addlt	r2, r2, r3
 80035a6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80035a8:	bfb6      	itet	lt
 80035aa:	4623      	movlt	r3, r4
 80035ac:	1b1c      	subge	r4, r3, r4
 80035ae:	2400      	movlt	r4, #0
 80035b0:	f1b9 0f00 	cmp.w	r9, #0
 80035b4:	bfb5      	itete	lt
 80035b6:	9a04      	ldrlt	r2, [sp, #16]
 80035b8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80035bc:	eba2 0809 	sublt.w	r8, r2, r9
 80035c0:	464a      	movge	r2, r9
 80035c2:	bfb8      	it	lt
 80035c4:	2200      	movlt	r2, #0
 80035c6:	e73c      	b.n	8003442 <_dtoa_r+0x642>
 80035c8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80035cc:	9f07      	ldr	r7, [sp, #28]
 80035ce:	461c      	mov	r4, r3
 80035d0:	e744      	b.n	800345c <_dtoa_r+0x65c>
 80035d2:	461a      	mov	r2, r3
 80035d4:	e770      	b.n	80034b8 <_dtoa_r+0x6b8>
 80035d6:	9b06      	ldr	r3, [sp, #24]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	dc18      	bgt.n	800360e <_dtoa_r+0x80e>
 80035dc:	9b02      	ldr	r3, [sp, #8]
 80035de:	b9b3      	cbnz	r3, 800360e <_dtoa_r+0x80e>
 80035e0:	9b03      	ldr	r3, [sp, #12]
 80035e2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80035e6:	b9a2      	cbnz	r2, 8003612 <_dtoa_r+0x812>
 80035e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035ec:	0d12      	lsrs	r2, r2, #20
 80035ee:	0512      	lsls	r2, r2, #20
 80035f0:	b18a      	cbz	r2, 8003616 <_dtoa_r+0x816>
 80035f2:	9b04      	ldr	r3, [sp, #16]
 80035f4:	3301      	adds	r3, #1
 80035f6:	9304      	str	r3, [sp, #16]
 80035f8:	9b05      	ldr	r3, [sp, #20]
 80035fa:	3301      	adds	r3, #1
 80035fc:	9305      	str	r3, [sp, #20]
 80035fe:	2301      	movs	r3, #1
 8003600:	930a      	str	r3, [sp, #40]	; 0x28
 8003602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003604:	2b00      	cmp	r3, #0
 8003606:	f47f af70 	bne.w	80034ea <_dtoa_r+0x6ea>
 800360a:	2001      	movs	r0, #1
 800360c:	e775      	b.n	80034fa <_dtoa_r+0x6fa>
 800360e:	2300      	movs	r3, #0
 8003610:	e7f6      	b.n	8003600 <_dtoa_r+0x800>
 8003612:	9b02      	ldr	r3, [sp, #8]
 8003614:	e7f4      	b.n	8003600 <_dtoa_r+0x800>
 8003616:	920a      	str	r2, [sp, #40]	; 0x28
 8003618:	e7f3      	b.n	8003602 <_dtoa_r+0x802>
 800361a:	d082      	beq.n	8003522 <_dtoa_r+0x722>
 800361c:	4610      	mov	r0, r2
 800361e:	301c      	adds	r0, #28
 8003620:	e778      	b.n	8003514 <_dtoa_r+0x714>
 8003622:	f1b9 0f00 	cmp.w	r9, #0
 8003626:	dc37      	bgt.n	8003698 <_dtoa_r+0x898>
 8003628:	9b06      	ldr	r3, [sp, #24]
 800362a:	2b02      	cmp	r3, #2
 800362c:	dd34      	ble.n	8003698 <_dtoa_r+0x898>
 800362e:	46ca      	mov	sl, r9
 8003630:	f1ba 0f00 	cmp.w	sl, #0
 8003634:	d10d      	bne.n	8003652 <_dtoa_r+0x852>
 8003636:	4621      	mov	r1, r4
 8003638:	4653      	mov	r3, sl
 800363a:	2205      	movs	r2, #5
 800363c:	4630      	mov	r0, r6
 800363e:	f000 f9c9 	bl	80039d4 <__multadd>
 8003642:	4601      	mov	r1, r0
 8003644:	4604      	mov	r4, r0
 8003646:	4628      	mov	r0, r5
 8003648:	f000 fbe4 	bl	8003e14 <__mcmp>
 800364c:	2800      	cmp	r0, #0
 800364e:	f73f adeb 	bgt.w	8003228 <_dtoa_r+0x428>
 8003652:	9b08      	ldr	r3, [sp, #32]
 8003654:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003658:	ea6f 0b03 	mvn.w	fp, r3
 800365c:	f04f 0900 	mov.w	r9, #0
 8003660:	4621      	mov	r1, r4
 8003662:	4630      	mov	r0, r6
 8003664:	f000 f994 	bl	8003990 <_Bfree>
 8003668:	2f00      	cmp	r7, #0
 800366a:	f43f aea8 	beq.w	80033be <_dtoa_r+0x5be>
 800366e:	f1b9 0f00 	cmp.w	r9, #0
 8003672:	d005      	beq.n	8003680 <_dtoa_r+0x880>
 8003674:	45b9      	cmp	r9, r7
 8003676:	d003      	beq.n	8003680 <_dtoa_r+0x880>
 8003678:	4649      	mov	r1, r9
 800367a:	4630      	mov	r0, r6
 800367c:	f000 f988 	bl	8003990 <_Bfree>
 8003680:	4639      	mov	r1, r7
 8003682:	4630      	mov	r0, r6
 8003684:	f000 f984 	bl	8003990 <_Bfree>
 8003688:	e699      	b.n	80033be <_dtoa_r+0x5be>
 800368a:	2400      	movs	r4, #0
 800368c:	4627      	mov	r7, r4
 800368e:	e7e0      	b.n	8003652 <_dtoa_r+0x852>
 8003690:	46bb      	mov	fp, r7
 8003692:	4604      	mov	r4, r0
 8003694:	4607      	mov	r7, r0
 8003696:	e5c7      	b.n	8003228 <_dtoa_r+0x428>
 8003698:	9b07      	ldr	r3, [sp, #28]
 800369a:	46ca      	mov	sl, r9
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 8100 	beq.w	80038a2 <_dtoa_r+0xaa2>
 80036a2:	f1b8 0f00 	cmp.w	r8, #0
 80036a6:	dd05      	ble.n	80036b4 <_dtoa_r+0x8b4>
 80036a8:	4639      	mov	r1, r7
 80036aa:	4642      	mov	r2, r8
 80036ac:	4630      	mov	r0, r6
 80036ae:	f000 fb41 	bl	8003d34 <__lshift>
 80036b2:	4607      	mov	r7, r0
 80036b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d05d      	beq.n	8003776 <_dtoa_r+0x976>
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4630      	mov	r0, r6
 80036be:	f000 f927 	bl	8003910 <_Balloc>
 80036c2:	4680      	mov	r8, r0
 80036c4:	b928      	cbnz	r0, 80036d2 <_dtoa_r+0x8d2>
 80036c6:	4b82      	ldr	r3, [pc, #520]	; (80038d0 <_dtoa_r+0xad0>)
 80036c8:	4602      	mov	r2, r0
 80036ca:	f240 21ea 	movw	r1, #746	; 0x2ea
 80036ce:	f7ff bbaf 	b.w	8002e30 <_dtoa_r+0x30>
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	3202      	adds	r2, #2
 80036d6:	0092      	lsls	r2, r2, #2
 80036d8:	f107 010c 	add.w	r1, r7, #12
 80036dc:	300c      	adds	r0, #12
 80036de:	f000 f909 	bl	80038f4 <memcpy>
 80036e2:	2201      	movs	r2, #1
 80036e4:	4641      	mov	r1, r8
 80036e6:	4630      	mov	r0, r6
 80036e8:	f000 fb24 	bl	8003d34 <__lshift>
 80036ec:	9b01      	ldr	r3, [sp, #4]
 80036ee:	3301      	adds	r3, #1
 80036f0:	9304      	str	r3, [sp, #16]
 80036f2:	9b01      	ldr	r3, [sp, #4]
 80036f4:	4453      	add	r3, sl
 80036f6:	9308      	str	r3, [sp, #32]
 80036f8:	9b02      	ldr	r3, [sp, #8]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	46b9      	mov	r9, r7
 8003700:	9307      	str	r3, [sp, #28]
 8003702:	4607      	mov	r7, r0
 8003704:	9b04      	ldr	r3, [sp, #16]
 8003706:	4621      	mov	r1, r4
 8003708:	3b01      	subs	r3, #1
 800370a:	4628      	mov	r0, r5
 800370c:	9302      	str	r3, [sp, #8]
 800370e:	f7ff fae9 	bl	8002ce4 <quorem>
 8003712:	4603      	mov	r3, r0
 8003714:	3330      	adds	r3, #48	; 0x30
 8003716:	9005      	str	r0, [sp, #20]
 8003718:	4649      	mov	r1, r9
 800371a:	4628      	mov	r0, r5
 800371c:	9309      	str	r3, [sp, #36]	; 0x24
 800371e:	f000 fb79 	bl	8003e14 <__mcmp>
 8003722:	463a      	mov	r2, r7
 8003724:	4682      	mov	sl, r0
 8003726:	4621      	mov	r1, r4
 8003728:	4630      	mov	r0, r6
 800372a:	f000 fb8f 	bl	8003e4c <__mdiff>
 800372e:	68c2      	ldr	r2, [r0, #12]
 8003730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003732:	4680      	mov	r8, r0
 8003734:	bb0a      	cbnz	r2, 800377a <_dtoa_r+0x97a>
 8003736:	4601      	mov	r1, r0
 8003738:	4628      	mov	r0, r5
 800373a:	f000 fb6b 	bl	8003e14 <__mcmp>
 800373e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003740:	4602      	mov	r2, r0
 8003742:	4641      	mov	r1, r8
 8003744:	4630      	mov	r0, r6
 8003746:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800374a:	f000 f921 	bl	8003990 <_Bfree>
 800374e:	9b06      	ldr	r3, [sp, #24]
 8003750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003752:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8003756:	ea43 0102 	orr.w	r1, r3, r2
 800375a:	9b07      	ldr	r3, [sp, #28]
 800375c:	430b      	orrs	r3, r1
 800375e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003760:	d10d      	bne.n	800377e <_dtoa_r+0x97e>
 8003762:	2b39      	cmp	r3, #57	; 0x39
 8003764:	d029      	beq.n	80037ba <_dtoa_r+0x9ba>
 8003766:	f1ba 0f00 	cmp.w	sl, #0
 800376a:	dd01      	ble.n	8003770 <_dtoa_r+0x970>
 800376c:	9b05      	ldr	r3, [sp, #20]
 800376e:	3331      	adds	r3, #49	; 0x31
 8003770:	9a02      	ldr	r2, [sp, #8]
 8003772:	7013      	strb	r3, [r2, #0]
 8003774:	e774      	b.n	8003660 <_dtoa_r+0x860>
 8003776:	4638      	mov	r0, r7
 8003778:	e7b8      	b.n	80036ec <_dtoa_r+0x8ec>
 800377a:	2201      	movs	r2, #1
 800377c:	e7e1      	b.n	8003742 <_dtoa_r+0x942>
 800377e:	f1ba 0f00 	cmp.w	sl, #0
 8003782:	db06      	blt.n	8003792 <_dtoa_r+0x992>
 8003784:	9906      	ldr	r1, [sp, #24]
 8003786:	ea41 0a0a 	orr.w	sl, r1, sl
 800378a:	9907      	ldr	r1, [sp, #28]
 800378c:	ea5a 0101 	orrs.w	r1, sl, r1
 8003790:	d120      	bne.n	80037d4 <_dtoa_r+0x9d4>
 8003792:	2a00      	cmp	r2, #0
 8003794:	ddec      	ble.n	8003770 <_dtoa_r+0x970>
 8003796:	4629      	mov	r1, r5
 8003798:	2201      	movs	r2, #1
 800379a:	4630      	mov	r0, r6
 800379c:	9304      	str	r3, [sp, #16]
 800379e:	f000 fac9 	bl	8003d34 <__lshift>
 80037a2:	4621      	mov	r1, r4
 80037a4:	4605      	mov	r5, r0
 80037a6:	f000 fb35 	bl	8003e14 <__mcmp>
 80037aa:	2800      	cmp	r0, #0
 80037ac:	9b04      	ldr	r3, [sp, #16]
 80037ae:	dc02      	bgt.n	80037b6 <_dtoa_r+0x9b6>
 80037b0:	d1de      	bne.n	8003770 <_dtoa_r+0x970>
 80037b2:	07da      	lsls	r2, r3, #31
 80037b4:	d5dc      	bpl.n	8003770 <_dtoa_r+0x970>
 80037b6:	2b39      	cmp	r3, #57	; 0x39
 80037b8:	d1d8      	bne.n	800376c <_dtoa_r+0x96c>
 80037ba:	9a02      	ldr	r2, [sp, #8]
 80037bc:	2339      	movs	r3, #57	; 0x39
 80037be:	7013      	strb	r3, [r2, #0]
 80037c0:	4643      	mov	r3, r8
 80037c2:	4698      	mov	r8, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80037ca:	2a39      	cmp	r2, #57	; 0x39
 80037cc:	d051      	beq.n	8003872 <_dtoa_r+0xa72>
 80037ce:	3201      	adds	r2, #1
 80037d0:	701a      	strb	r2, [r3, #0]
 80037d2:	e745      	b.n	8003660 <_dtoa_r+0x860>
 80037d4:	2a00      	cmp	r2, #0
 80037d6:	dd03      	ble.n	80037e0 <_dtoa_r+0x9e0>
 80037d8:	2b39      	cmp	r3, #57	; 0x39
 80037da:	d0ee      	beq.n	80037ba <_dtoa_r+0x9ba>
 80037dc:	3301      	adds	r3, #1
 80037de:	e7c7      	b.n	8003770 <_dtoa_r+0x970>
 80037e0:	9a04      	ldr	r2, [sp, #16]
 80037e2:	9908      	ldr	r1, [sp, #32]
 80037e4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80037e8:	428a      	cmp	r2, r1
 80037ea:	d02b      	beq.n	8003844 <_dtoa_r+0xa44>
 80037ec:	4629      	mov	r1, r5
 80037ee:	2300      	movs	r3, #0
 80037f0:	220a      	movs	r2, #10
 80037f2:	4630      	mov	r0, r6
 80037f4:	f000 f8ee 	bl	80039d4 <__multadd>
 80037f8:	45b9      	cmp	r9, r7
 80037fa:	4605      	mov	r5, r0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	f04f 020a 	mov.w	r2, #10
 8003804:	4649      	mov	r1, r9
 8003806:	4630      	mov	r0, r6
 8003808:	d107      	bne.n	800381a <_dtoa_r+0xa1a>
 800380a:	f000 f8e3 	bl	80039d4 <__multadd>
 800380e:	4681      	mov	r9, r0
 8003810:	4607      	mov	r7, r0
 8003812:	9b04      	ldr	r3, [sp, #16]
 8003814:	3301      	adds	r3, #1
 8003816:	9304      	str	r3, [sp, #16]
 8003818:	e774      	b.n	8003704 <_dtoa_r+0x904>
 800381a:	f000 f8db 	bl	80039d4 <__multadd>
 800381e:	4639      	mov	r1, r7
 8003820:	4681      	mov	r9, r0
 8003822:	2300      	movs	r3, #0
 8003824:	220a      	movs	r2, #10
 8003826:	4630      	mov	r0, r6
 8003828:	f000 f8d4 	bl	80039d4 <__multadd>
 800382c:	4607      	mov	r7, r0
 800382e:	e7f0      	b.n	8003812 <_dtoa_r+0xa12>
 8003830:	f1ba 0f00 	cmp.w	sl, #0
 8003834:	9a01      	ldr	r2, [sp, #4]
 8003836:	bfcc      	ite	gt
 8003838:	46d0      	movgt	r8, sl
 800383a:	f04f 0801 	movle.w	r8, #1
 800383e:	4490      	add	r8, r2
 8003840:	f04f 0900 	mov.w	r9, #0
 8003844:	4629      	mov	r1, r5
 8003846:	2201      	movs	r2, #1
 8003848:	4630      	mov	r0, r6
 800384a:	9302      	str	r3, [sp, #8]
 800384c:	f000 fa72 	bl	8003d34 <__lshift>
 8003850:	4621      	mov	r1, r4
 8003852:	4605      	mov	r5, r0
 8003854:	f000 fade 	bl	8003e14 <__mcmp>
 8003858:	2800      	cmp	r0, #0
 800385a:	dcb1      	bgt.n	80037c0 <_dtoa_r+0x9c0>
 800385c:	d102      	bne.n	8003864 <_dtoa_r+0xa64>
 800385e:	9b02      	ldr	r3, [sp, #8]
 8003860:	07db      	lsls	r3, r3, #31
 8003862:	d4ad      	bmi.n	80037c0 <_dtoa_r+0x9c0>
 8003864:	4643      	mov	r3, r8
 8003866:	4698      	mov	r8, r3
 8003868:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800386c:	2a30      	cmp	r2, #48	; 0x30
 800386e:	d0fa      	beq.n	8003866 <_dtoa_r+0xa66>
 8003870:	e6f6      	b.n	8003660 <_dtoa_r+0x860>
 8003872:	9a01      	ldr	r2, [sp, #4]
 8003874:	429a      	cmp	r2, r3
 8003876:	d1a4      	bne.n	80037c2 <_dtoa_r+0x9c2>
 8003878:	f10b 0b01 	add.w	fp, fp, #1
 800387c:	2331      	movs	r3, #49	; 0x31
 800387e:	e778      	b.n	8003772 <_dtoa_r+0x972>
 8003880:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <_dtoa_r+0xad4>)
 8003882:	f7ff bb27 	b.w	8002ed4 <_dtoa_r+0xd4>
 8003886:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003888:	2b00      	cmp	r3, #0
 800388a:	f47f ab03 	bne.w	8002e94 <_dtoa_r+0x94>
 800388e:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <_dtoa_r+0xad8>)
 8003890:	f7ff bb20 	b.w	8002ed4 <_dtoa_r+0xd4>
 8003894:	f1ba 0f00 	cmp.w	sl, #0
 8003898:	dc03      	bgt.n	80038a2 <_dtoa_r+0xaa2>
 800389a:	9b06      	ldr	r3, [sp, #24]
 800389c:	2b02      	cmp	r3, #2
 800389e:	f73f aec7 	bgt.w	8003630 <_dtoa_r+0x830>
 80038a2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80038a6:	4621      	mov	r1, r4
 80038a8:	4628      	mov	r0, r5
 80038aa:	f7ff fa1b 	bl	8002ce4 <quorem>
 80038ae:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80038b2:	f808 3b01 	strb.w	r3, [r8], #1
 80038b6:	9a01      	ldr	r2, [sp, #4]
 80038b8:	eba8 0202 	sub.w	r2, r8, r2
 80038bc:	4592      	cmp	sl, r2
 80038be:	ddb7      	ble.n	8003830 <_dtoa_r+0xa30>
 80038c0:	4629      	mov	r1, r5
 80038c2:	2300      	movs	r3, #0
 80038c4:	220a      	movs	r2, #10
 80038c6:	4630      	mov	r0, r6
 80038c8:	f000 f884 	bl	80039d4 <__multadd>
 80038cc:	4605      	mov	r5, r0
 80038ce:	e7ea      	b.n	80038a6 <_dtoa_r+0xaa6>
 80038d0:	08004e1f 	.word	0x08004e1f
 80038d4:	08004d7c 	.word	0x08004d7c
 80038d8:	08004da0 	.word	0x08004da0

080038dc <_localeconv_r>:
 80038dc:	4800      	ldr	r0, [pc, #0]	; (80038e0 <_localeconv_r+0x4>)
 80038de:	4770      	bx	lr
 80038e0:	20000160 	.word	0x20000160

080038e4 <malloc>:
 80038e4:	4b02      	ldr	r3, [pc, #8]	; (80038f0 <malloc+0xc>)
 80038e6:	4601      	mov	r1, r0
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	f000 bc17 	b.w	800411c <_malloc_r>
 80038ee:	bf00      	nop
 80038f0:	2000000c 	.word	0x2000000c

080038f4 <memcpy>:
 80038f4:	440a      	add	r2, r1
 80038f6:	4291      	cmp	r1, r2
 80038f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80038fc:	d100      	bne.n	8003900 <memcpy+0xc>
 80038fe:	4770      	bx	lr
 8003900:	b510      	push	{r4, lr}
 8003902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800390a:	4291      	cmp	r1, r2
 800390c:	d1f9      	bne.n	8003902 <memcpy+0xe>
 800390e:	bd10      	pop	{r4, pc}

08003910 <_Balloc>:
 8003910:	b570      	push	{r4, r5, r6, lr}
 8003912:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003914:	4604      	mov	r4, r0
 8003916:	460d      	mov	r5, r1
 8003918:	b976      	cbnz	r6, 8003938 <_Balloc+0x28>
 800391a:	2010      	movs	r0, #16
 800391c:	f7ff ffe2 	bl	80038e4 <malloc>
 8003920:	4602      	mov	r2, r0
 8003922:	6260      	str	r0, [r4, #36]	; 0x24
 8003924:	b920      	cbnz	r0, 8003930 <_Balloc+0x20>
 8003926:	4b18      	ldr	r3, [pc, #96]	; (8003988 <_Balloc+0x78>)
 8003928:	4818      	ldr	r0, [pc, #96]	; (800398c <_Balloc+0x7c>)
 800392a:	2166      	movs	r1, #102	; 0x66
 800392c:	f000 fc7a 	bl	8004224 <__assert_func>
 8003930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003934:	6006      	str	r6, [r0, #0]
 8003936:	60c6      	str	r6, [r0, #12]
 8003938:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800393a:	68f3      	ldr	r3, [r6, #12]
 800393c:	b183      	cbz	r3, 8003960 <_Balloc+0x50>
 800393e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003946:	b9b8      	cbnz	r0, 8003978 <_Balloc+0x68>
 8003948:	2101      	movs	r1, #1
 800394a:	fa01 f605 	lsl.w	r6, r1, r5
 800394e:	1d72      	adds	r2, r6, #5
 8003950:	0092      	lsls	r2, r2, #2
 8003952:	4620      	mov	r0, r4
 8003954:	f000 fb60 	bl	8004018 <_calloc_r>
 8003958:	b160      	cbz	r0, 8003974 <_Balloc+0x64>
 800395a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800395e:	e00e      	b.n	800397e <_Balloc+0x6e>
 8003960:	2221      	movs	r2, #33	; 0x21
 8003962:	2104      	movs	r1, #4
 8003964:	4620      	mov	r0, r4
 8003966:	f000 fb57 	bl	8004018 <_calloc_r>
 800396a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800396c:	60f0      	str	r0, [r6, #12]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1e4      	bne.n	800393e <_Balloc+0x2e>
 8003974:	2000      	movs	r0, #0
 8003976:	bd70      	pop	{r4, r5, r6, pc}
 8003978:	6802      	ldr	r2, [r0, #0]
 800397a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800397e:	2300      	movs	r3, #0
 8003980:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003984:	e7f7      	b.n	8003976 <_Balloc+0x66>
 8003986:	bf00      	nop
 8003988:	08004dad 	.word	0x08004dad
 800398c:	08004e30 	.word	0x08004e30

08003990 <_Bfree>:
 8003990:	b570      	push	{r4, r5, r6, lr}
 8003992:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003994:	4605      	mov	r5, r0
 8003996:	460c      	mov	r4, r1
 8003998:	b976      	cbnz	r6, 80039b8 <_Bfree+0x28>
 800399a:	2010      	movs	r0, #16
 800399c:	f7ff ffa2 	bl	80038e4 <malloc>
 80039a0:	4602      	mov	r2, r0
 80039a2:	6268      	str	r0, [r5, #36]	; 0x24
 80039a4:	b920      	cbnz	r0, 80039b0 <_Bfree+0x20>
 80039a6:	4b09      	ldr	r3, [pc, #36]	; (80039cc <_Bfree+0x3c>)
 80039a8:	4809      	ldr	r0, [pc, #36]	; (80039d0 <_Bfree+0x40>)
 80039aa:	218a      	movs	r1, #138	; 0x8a
 80039ac:	f000 fc3a 	bl	8004224 <__assert_func>
 80039b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80039b4:	6006      	str	r6, [r0, #0]
 80039b6:	60c6      	str	r6, [r0, #12]
 80039b8:	b13c      	cbz	r4, 80039ca <_Bfree+0x3a>
 80039ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80039bc:	6862      	ldr	r2, [r4, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039c4:	6021      	str	r1, [r4, #0]
 80039c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80039ca:	bd70      	pop	{r4, r5, r6, pc}
 80039cc:	08004dad 	.word	0x08004dad
 80039d0:	08004e30 	.word	0x08004e30

080039d4 <__multadd>:
 80039d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039d8:	690d      	ldr	r5, [r1, #16]
 80039da:	4607      	mov	r7, r0
 80039dc:	460c      	mov	r4, r1
 80039de:	461e      	mov	r6, r3
 80039e0:	f101 0c14 	add.w	ip, r1, #20
 80039e4:	2000      	movs	r0, #0
 80039e6:	f8dc 3000 	ldr.w	r3, [ip]
 80039ea:	b299      	uxth	r1, r3
 80039ec:	fb02 6101 	mla	r1, r2, r1, r6
 80039f0:	0c1e      	lsrs	r6, r3, #16
 80039f2:	0c0b      	lsrs	r3, r1, #16
 80039f4:	fb02 3306 	mla	r3, r2, r6, r3
 80039f8:	b289      	uxth	r1, r1
 80039fa:	3001      	adds	r0, #1
 80039fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003a00:	4285      	cmp	r5, r0
 8003a02:	f84c 1b04 	str.w	r1, [ip], #4
 8003a06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003a0a:	dcec      	bgt.n	80039e6 <__multadd+0x12>
 8003a0c:	b30e      	cbz	r6, 8003a52 <__multadd+0x7e>
 8003a0e:	68a3      	ldr	r3, [r4, #8]
 8003a10:	42ab      	cmp	r3, r5
 8003a12:	dc19      	bgt.n	8003a48 <__multadd+0x74>
 8003a14:	6861      	ldr	r1, [r4, #4]
 8003a16:	4638      	mov	r0, r7
 8003a18:	3101      	adds	r1, #1
 8003a1a:	f7ff ff79 	bl	8003910 <_Balloc>
 8003a1e:	4680      	mov	r8, r0
 8003a20:	b928      	cbnz	r0, 8003a2e <__multadd+0x5a>
 8003a22:	4602      	mov	r2, r0
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <__multadd+0x84>)
 8003a26:	480d      	ldr	r0, [pc, #52]	; (8003a5c <__multadd+0x88>)
 8003a28:	21b5      	movs	r1, #181	; 0xb5
 8003a2a:	f000 fbfb 	bl	8004224 <__assert_func>
 8003a2e:	6922      	ldr	r2, [r4, #16]
 8003a30:	3202      	adds	r2, #2
 8003a32:	f104 010c 	add.w	r1, r4, #12
 8003a36:	0092      	lsls	r2, r2, #2
 8003a38:	300c      	adds	r0, #12
 8003a3a:	f7ff ff5b 	bl	80038f4 <memcpy>
 8003a3e:	4621      	mov	r1, r4
 8003a40:	4638      	mov	r0, r7
 8003a42:	f7ff ffa5 	bl	8003990 <_Bfree>
 8003a46:	4644      	mov	r4, r8
 8003a48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003a4c:	3501      	adds	r5, #1
 8003a4e:	615e      	str	r6, [r3, #20]
 8003a50:	6125      	str	r5, [r4, #16]
 8003a52:	4620      	mov	r0, r4
 8003a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a58:	08004e1f 	.word	0x08004e1f
 8003a5c:	08004e30 	.word	0x08004e30

08003a60 <__hi0bits>:
 8003a60:	0c03      	lsrs	r3, r0, #16
 8003a62:	041b      	lsls	r3, r3, #16
 8003a64:	b9d3      	cbnz	r3, 8003a9c <__hi0bits+0x3c>
 8003a66:	0400      	lsls	r0, r0, #16
 8003a68:	2310      	movs	r3, #16
 8003a6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003a6e:	bf04      	itt	eq
 8003a70:	0200      	lsleq	r0, r0, #8
 8003a72:	3308      	addeq	r3, #8
 8003a74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003a78:	bf04      	itt	eq
 8003a7a:	0100      	lsleq	r0, r0, #4
 8003a7c:	3304      	addeq	r3, #4
 8003a7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003a82:	bf04      	itt	eq
 8003a84:	0080      	lsleq	r0, r0, #2
 8003a86:	3302      	addeq	r3, #2
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	db05      	blt.n	8003a98 <__hi0bits+0x38>
 8003a8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003a90:	f103 0301 	add.w	r3, r3, #1
 8003a94:	bf08      	it	eq
 8003a96:	2320      	moveq	r3, #32
 8003a98:	4618      	mov	r0, r3
 8003a9a:	4770      	bx	lr
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	e7e4      	b.n	8003a6a <__hi0bits+0xa>

08003aa0 <__lo0bits>:
 8003aa0:	6803      	ldr	r3, [r0, #0]
 8003aa2:	f013 0207 	ands.w	r2, r3, #7
 8003aa6:	4601      	mov	r1, r0
 8003aa8:	d00b      	beq.n	8003ac2 <__lo0bits+0x22>
 8003aaa:	07da      	lsls	r2, r3, #31
 8003aac:	d423      	bmi.n	8003af6 <__lo0bits+0x56>
 8003aae:	0798      	lsls	r0, r3, #30
 8003ab0:	bf49      	itett	mi
 8003ab2:	085b      	lsrmi	r3, r3, #1
 8003ab4:	089b      	lsrpl	r3, r3, #2
 8003ab6:	2001      	movmi	r0, #1
 8003ab8:	600b      	strmi	r3, [r1, #0]
 8003aba:	bf5c      	itt	pl
 8003abc:	600b      	strpl	r3, [r1, #0]
 8003abe:	2002      	movpl	r0, #2
 8003ac0:	4770      	bx	lr
 8003ac2:	b298      	uxth	r0, r3
 8003ac4:	b9a8      	cbnz	r0, 8003af2 <__lo0bits+0x52>
 8003ac6:	0c1b      	lsrs	r3, r3, #16
 8003ac8:	2010      	movs	r0, #16
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	b90a      	cbnz	r2, 8003ad2 <__lo0bits+0x32>
 8003ace:	3008      	adds	r0, #8
 8003ad0:	0a1b      	lsrs	r3, r3, #8
 8003ad2:	071a      	lsls	r2, r3, #28
 8003ad4:	bf04      	itt	eq
 8003ad6:	091b      	lsreq	r3, r3, #4
 8003ad8:	3004      	addeq	r0, #4
 8003ada:	079a      	lsls	r2, r3, #30
 8003adc:	bf04      	itt	eq
 8003ade:	089b      	lsreq	r3, r3, #2
 8003ae0:	3002      	addeq	r0, #2
 8003ae2:	07da      	lsls	r2, r3, #31
 8003ae4:	d403      	bmi.n	8003aee <__lo0bits+0x4e>
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	f100 0001 	add.w	r0, r0, #1
 8003aec:	d005      	beq.n	8003afa <__lo0bits+0x5a>
 8003aee:	600b      	str	r3, [r1, #0]
 8003af0:	4770      	bx	lr
 8003af2:	4610      	mov	r0, r2
 8003af4:	e7e9      	b.n	8003aca <__lo0bits+0x2a>
 8003af6:	2000      	movs	r0, #0
 8003af8:	4770      	bx	lr
 8003afa:	2020      	movs	r0, #32
 8003afc:	4770      	bx	lr
	...

08003b00 <__i2b>:
 8003b00:	b510      	push	{r4, lr}
 8003b02:	460c      	mov	r4, r1
 8003b04:	2101      	movs	r1, #1
 8003b06:	f7ff ff03 	bl	8003910 <_Balloc>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	b928      	cbnz	r0, 8003b1a <__i2b+0x1a>
 8003b0e:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <__i2b+0x24>)
 8003b10:	4805      	ldr	r0, [pc, #20]	; (8003b28 <__i2b+0x28>)
 8003b12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003b16:	f000 fb85 	bl	8004224 <__assert_func>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	6144      	str	r4, [r0, #20]
 8003b1e:	6103      	str	r3, [r0, #16]
 8003b20:	bd10      	pop	{r4, pc}
 8003b22:	bf00      	nop
 8003b24:	08004e1f 	.word	0x08004e1f
 8003b28:	08004e30 	.word	0x08004e30

08003b2c <__multiply>:
 8003b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b30:	4691      	mov	r9, r2
 8003b32:	690a      	ldr	r2, [r1, #16]
 8003b34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	bfb8      	it	lt
 8003b3c:	460b      	movlt	r3, r1
 8003b3e:	460c      	mov	r4, r1
 8003b40:	bfbc      	itt	lt
 8003b42:	464c      	movlt	r4, r9
 8003b44:	4699      	movlt	r9, r3
 8003b46:	6927      	ldr	r7, [r4, #16]
 8003b48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003b4c:	68a3      	ldr	r3, [r4, #8]
 8003b4e:	6861      	ldr	r1, [r4, #4]
 8003b50:	eb07 060a 	add.w	r6, r7, sl
 8003b54:	42b3      	cmp	r3, r6
 8003b56:	b085      	sub	sp, #20
 8003b58:	bfb8      	it	lt
 8003b5a:	3101      	addlt	r1, #1
 8003b5c:	f7ff fed8 	bl	8003910 <_Balloc>
 8003b60:	b930      	cbnz	r0, 8003b70 <__multiply+0x44>
 8003b62:	4602      	mov	r2, r0
 8003b64:	4b44      	ldr	r3, [pc, #272]	; (8003c78 <__multiply+0x14c>)
 8003b66:	4845      	ldr	r0, [pc, #276]	; (8003c7c <__multiply+0x150>)
 8003b68:	f240 115d 	movw	r1, #349	; 0x15d
 8003b6c:	f000 fb5a 	bl	8004224 <__assert_func>
 8003b70:	f100 0514 	add.w	r5, r0, #20
 8003b74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003b78:	462b      	mov	r3, r5
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	4543      	cmp	r3, r8
 8003b7e:	d321      	bcc.n	8003bc4 <__multiply+0x98>
 8003b80:	f104 0314 	add.w	r3, r4, #20
 8003b84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003b88:	f109 0314 	add.w	r3, r9, #20
 8003b8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003b90:	9202      	str	r2, [sp, #8]
 8003b92:	1b3a      	subs	r2, r7, r4
 8003b94:	3a15      	subs	r2, #21
 8003b96:	f022 0203 	bic.w	r2, r2, #3
 8003b9a:	3204      	adds	r2, #4
 8003b9c:	f104 0115 	add.w	r1, r4, #21
 8003ba0:	428f      	cmp	r7, r1
 8003ba2:	bf38      	it	cc
 8003ba4:	2204      	movcc	r2, #4
 8003ba6:	9201      	str	r2, [sp, #4]
 8003ba8:	9a02      	ldr	r2, [sp, #8]
 8003baa:	9303      	str	r3, [sp, #12]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d80c      	bhi.n	8003bca <__multiply+0x9e>
 8003bb0:	2e00      	cmp	r6, #0
 8003bb2:	dd03      	ble.n	8003bbc <__multiply+0x90>
 8003bb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d05a      	beq.n	8003c72 <__multiply+0x146>
 8003bbc:	6106      	str	r6, [r0, #16]
 8003bbe:	b005      	add	sp, #20
 8003bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc4:	f843 2b04 	str.w	r2, [r3], #4
 8003bc8:	e7d8      	b.n	8003b7c <__multiply+0x50>
 8003bca:	f8b3 a000 	ldrh.w	sl, [r3]
 8003bce:	f1ba 0f00 	cmp.w	sl, #0
 8003bd2:	d024      	beq.n	8003c1e <__multiply+0xf2>
 8003bd4:	f104 0e14 	add.w	lr, r4, #20
 8003bd8:	46a9      	mov	r9, r5
 8003bda:	f04f 0c00 	mov.w	ip, #0
 8003bde:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003be2:	f8d9 1000 	ldr.w	r1, [r9]
 8003be6:	fa1f fb82 	uxth.w	fp, r2
 8003bea:	b289      	uxth	r1, r1
 8003bec:	fb0a 110b 	mla	r1, sl, fp, r1
 8003bf0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8003bf4:	f8d9 2000 	ldr.w	r2, [r9]
 8003bf8:	4461      	add	r1, ip
 8003bfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003bfe:	fb0a c20b 	mla	r2, sl, fp, ip
 8003c02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003c06:	b289      	uxth	r1, r1
 8003c08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003c0c:	4577      	cmp	r7, lr
 8003c0e:	f849 1b04 	str.w	r1, [r9], #4
 8003c12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003c16:	d8e2      	bhi.n	8003bde <__multiply+0xb2>
 8003c18:	9a01      	ldr	r2, [sp, #4]
 8003c1a:	f845 c002 	str.w	ip, [r5, r2]
 8003c1e:	9a03      	ldr	r2, [sp, #12]
 8003c20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003c24:	3304      	adds	r3, #4
 8003c26:	f1b9 0f00 	cmp.w	r9, #0
 8003c2a:	d020      	beq.n	8003c6e <__multiply+0x142>
 8003c2c:	6829      	ldr	r1, [r5, #0]
 8003c2e:	f104 0c14 	add.w	ip, r4, #20
 8003c32:	46ae      	mov	lr, r5
 8003c34:	f04f 0a00 	mov.w	sl, #0
 8003c38:	f8bc b000 	ldrh.w	fp, [ip]
 8003c3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003c40:	fb09 220b 	mla	r2, r9, fp, r2
 8003c44:	4492      	add	sl, r2
 8003c46:	b289      	uxth	r1, r1
 8003c48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8003c4c:	f84e 1b04 	str.w	r1, [lr], #4
 8003c50:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003c54:	f8be 1000 	ldrh.w	r1, [lr]
 8003c58:	0c12      	lsrs	r2, r2, #16
 8003c5a:	fb09 1102 	mla	r1, r9, r2, r1
 8003c5e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8003c62:	4567      	cmp	r7, ip
 8003c64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003c68:	d8e6      	bhi.n	8003c38 <__multiply+0x10c>
 8003c6a:	9a01      	ldr	r2, [sp, #4]
 8003c6c:	50a9      	str	r1, [r5, r2]
 8003c6e:	3504      	adds	r5, #4
 8003c70:	e79a      	b.n	8003ba8 <__multiply+0x7c>
 8003c72:	3e01      	subs	r6, #1
 8003c74:	e79c      	b.n	8003bb0 <__multiply+0x84>
 8003c76:	bf00      	nop
 8003c78:	08004e1f 	.word	0x08004e1f
 8003c7c:	08004e30 	.word	0x08004e30

08003c80 <__pow5mult>:
 8003c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c84:	4615      	mov	r5, r2
 8003c86:	f012 0203 	ands.w	r2, r2, #3
 8003c8a:	4606      	mov	r6, r0
 8003c8c:	460f      	mov	r7, r1
 8003c8e:	d007      	beq.n	8003ca0 <__pow5mult+0x20>
 8003c90:	4c25      	ldr	r4, [pc, #148]	; (8003d28 <__pow5mult+0xa8>)
 8003c92:	3a01      	subs	r2, #1
 8003c94:	2300      	movs	r3, #0
 8003c96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003c9a:	f7ff fe9b 	bl	80039d4 <__multadd>
 8003c9e:	4607      	mov	r7, r0
 8003ca0:	10ad      	asrs	r5, r5, #2
 8003ca2:	d03d      	beq.n	8003d20 <__pow5mult+0xa0>
 8003ca4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003ca6:	b97c      	cbnz	r4, 8003cc8 <__pow5mult+0x48>
 8003ca8:	2010      	movs	r0, #16
 8003caa:	f7ff fe1b 	bl	80038e4 <malloc>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	6270      	str	r0, [r6, #36]	; 0x24
 8003cb2:	b928      	cbnz	r0, 8003cc0 <__pow5mult+0x40>
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <__pow5mult+0xac>)
 8003cb6:	481e      	ldr	r0, [pc, #120]	; (8003d30 <__pow5mult+0xb0>)
 8003cb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003cbc:	f000 fab2 	bl	8004224 <__assert_func>
 8003cc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003cc4:	6004      	str	r4, [r0, #0]
 8003cc6:	60c4      	str	r4, [r0, #12]
 8003cc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003ccc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003cd0:	b94c      	cbnz	r4, 8003ce6 <__pow5mult+0x66>
 8003cd2:	f240 2171 	movw	r1, #625	; 0x271
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	f7ff ff12 	bl	8003b00 <__i2b>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f8c8 0008 	str.w	r0, [r8, #8]
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	6003      	str	r3, [r0, #0]
 8003ce6:	f04f 0900 	mov.w	r9, #0
 8003cea:	07eb      	lsls	r3, r5, #31
 8003cec:	d50a      	bpl.n	8003d04 <__pow5mult+0x84>
 8003cee:	4639      	mov	r1, r7
 8003cf0:	4622      	mov	r2, r4
 8003cf2:	4630      	mov	r0, r6
 8003cf4:	f7ff ff1a 	bl	8003b2c <__multiply>
 8003cf8:	4639      	mov	r1, r7
 8003cfa:	4680      	mov	r8, r0
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	f7ff fe47 	bl	8003990 <_Bfree>
 8003d02:	4647      	mov	r7, r8
 8003d04:	106d      	asrs	r5, r5, #1
 8003d06:	d00b      	beq.n	8003d20 <__pow5mult+0xa0>
 8003d08:	6820      	ldr	r0, [r4, #0]
 8003d0a:	b938      	cbnz	r0, 8003d1c <__pow5mult+0x9c>
 8003d0c:	4622      	mov	r2, r4
 8003d0e:	4621      	mov	r1, r4
 8003d10:	4630      	mov	r0, r6
 8003d12:	f7ff ff0b 	bl	8003b2c <__multiply>
 8003d16:	6020      	str	r0, [r4, #0]
 8003d18:	f8c0 9000 	str.w	r9, [r0]
 8003d1c:	4604      	mov	r4, r0
 8003d1e:	e7e4      	b.n	8003cea <__pow5mult+0x6a>
 8003d20:	4638      	mov	r0, r7
 8003d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d26:	bf00      	nop
 8003d28:	08004f80 	.word	0x08004f80
 8003d2c:	08004dad 	.word	0x08004dad
 8003d30:	08004e30 	.word	0x08004e30

08003d34 <__lshift>:
 8003d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d38:	460c      	mov	r4, r1
 8003d3a:	6849      	ldr	r1, [r1, #4]
 8003d3c:	6923      	ldr	r3, [r4, #16]
 8003d3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003d42:	68a3      	ldr	r3, [r4, #8]
 8003d44:	4607      	mov	r7, r0
 8003d46:	4691      	mov	r9, r2
 8003d48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003d4c:	f108 0601 	add.w	r6, r8, #1
 8003d50:	42b3      	cmp	r3, r6
 8003d52:	db0b      	blt.n	8003d6c <__lshift+0x38>
 8003d54:	4638      	mov	r0, r7
 8003d56:	f7ff fddb 	bl	8003910 <_Balloc>
 8003d5a:	4605      	mov	r5, r0
 8003d5c:	b948      	cbnz	r0, 8003d72 <__lshift+0x3e>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	4b2a      	ldr	r3, [pc, #168]	; (8003e0c <__lshift+0xd8>)
 8003d62:	482b      	ldr	r0, [pc, #172]	; (8003e10 <__lshift+0xdc>)
 8003d64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003d68:	f000 fa5c 	bl	8004224 <__assert_func>
 8003d6c:	3101      	adds	r1, #1
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	e7ee      	b.n	8003d50 <__lshift+0x1c>
 8003d72:	2300      	movs	r3, #0
 8003d74:	f100 0114 	add.w	r1, r0, #20
 8003d78:	f100 0210 	add.w	r2, r0, #16
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	4553      	cmp	r3, sl
 8003d80:	db37      	blt.n	8003df2 <__lshift+0xbe>
 8003d82:	6920      	ldr	r0, [r4, #16]
 8003d84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003d88:	f104 0314 	add.w	r3, r4, #20
 8003d8c:	f019 091f 	ands.w	r9, r9, #31
 8003d90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003d94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003d98:	d02f      	beq.n	8003dfa <__lshift+0xc6>
 8003d9a:	f1c9 0e20 	rsb	lr, r9, #32
 8003d9e:	468a      	mov	sl, r1
 8003da0:	f04f 0c00 	mov.w	ip, #0
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	fa02 f209 	lsl.w	r2, r2, r9
 8003daa:	ea42 020c 	orr.w	r2, r2, ip
 8003dae:	f84a 2b04 	str.w	r2, [sl], #4
 8003db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003db6:	4298      	cmp	r0, r3
 8003db8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8003dbc:	d8f2      	bhi.n	8003da4 <__lshift+0x70>
 8003dbe:	1b03      	subs	r3, r0, r4
 8003dc0:	3b15      	subs	r3, #21
 8003dc2:	f023 0303 	bic.w	r3, r3, #3
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	f104 0215 	add.w	r2, r4, #21
 8003dcc:	4290      	cmp	r0, r2
 8003dce:	bf38      	it	cc
 8003dd0:	2304      	movcc	r3, #4
 8003dd2:	f841 c003 	str.w	ip, [r1, r3]
 8003dd6:	f1bc 0f00 	cmp.w	ip, #0
 8003dda:	d001      	beq.n	8003de0 <__lshift+0xac>
 8003ddc:	f108 0602 	add.w	r6, r8, #2
 8003de0:	3e01      	subs	r6, #1
 8003de2:	4638      	mov	r0, r7
 8003de4:	612e      	str	r6, [r5, #16]
 8003de6:	4621      	mov	r1, r4
 8003de8:	f7ff fdd2 	bl	8003990 <_Bfree>
 8003dec:	4628      	mov	r0, r5
 8003dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df2:	f842 0f04 	str.w	r0, [r2, #4]!
 8003df6:	3301      	adds	r3, #1
 8003df8:	e7c1      	b.n	8003d7e <__lshift+0x4a>
 8003dfa:	3904      	subs	r1, #4
 8003dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e00:	f841 2f04 	str.w	r2, [r1, #4]!
 8003e04:	4298      	cmp	r0, r3
 8003e06:	d8f9      	bhi.n	8003dfc <__lshift+0xc8>
 8003e08:	e7ea      	b.n	8003de0 <__lshift+0xac>
 8003e0a:	bf00      	nop
 8003e0c:	08004e1f 	.word	0x08004e1f
 8003e10:	08004e30 	.word	0x08004e30

08003e14 <__mcmp>:
 8003e14:	b530      	push	{r4, r5, lr}
 8003e16:	6902      	ldr	r2, [r0, #16]
 8003e18:	690c      	ldr	r4, [r1, #16]
 8003e1a:	1b12      	subs	r2, r2, r4
 8003e1c:	d10e      	bne.n	8003e3c <__mcmp+0x28>
 8003e1e:	f100 0314 	add.w	r3, r0, #20
 8003e22:	3114      	adds	r1, #20
 8003e24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8003e28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003e2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8003e30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8003e34:	42a5      	cmp	r5, r4
 8003e36:	d003      	beq.n	8003e40 <__mcmp+0x2c>
 8003e38:	d305      	bcc.n	8003e46 <__mcmp+0x32>
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	bd30      	pop	{r4, r5, pc}
 8003e40:	4283      	cmp	r3, r0
 8003e42:	d3f3      	bcc.n	8003e2c <__mcmp+0x18>
 8003e44:	e7fa      	b.n	8003e3c <__mcmp+0x28>
 8003e46:	f04f 32ff 	mov.w	r2, #4294967295
 8003e4a:	e7f7      	b.n	8003e3c <__mcmp+0x28>

08003e4c <__mdiff>:
 8003e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e50:	460c      	mov	r4, r1
 8003e52:	4606      	mov	r6, r0
 8003e54:	4611      	mov	r1, r2
 8003e56:	4620      	mov	r0, r4
 8003e58:	4690      	mov	r8, r2
 8003e5a:	f7ff ffdb 	bl	8003e14 <__mcmp>
 8003e5e:	1e05      	subs	r5, r0, #0
 8003e60:	d110      	bne.n	8003e84 <__mdiff+0x38>
 8003e62:	4629      	mov	r1, r5
 8003e64:	4630      	mov	r0, r6
 8003e66:	f7ff fd53 	bl	8003910 <_Balloc>
 8003e6a:	b930      	cbnz	r0, 8003e7a <__mdiff+0x2e>
 8003e6c:	4b3a      	ldr	r3, [pc, #232]	; (8003f58 <__mdiff+0x10c>)
 8003e6e:	4602      	mov	r2, r0
 8003e70:	f240 2132 	movw	r1, #562	; 0x232
 8003e74:	4839      	ldr	r0, [pc, #228]	; (8003f5c <__mdiff+0x110>)
 8003e76:	f000 f9d5 	bl	8004224 <__assert_func>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003e80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e84:	bfa4      	itt	ge
 8003e86:	4643      	movge	r3, r8
 8003e88:	46a0      	movge	r8, r4
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003e90:	bfa6      	itte	ge
 8003e92:	461c      	movge	r4, r3
 8003e94:	2500      	movge	r5, #0
 8003e96:	2501      	movlt	r5, #1
 8003e98:	f7ff fd3a 	bl	8003910 <_Balloc>
 8003e9c:	b920      	cbnz	r0, 8003ea8 <__mdiff+0x5c>
 8003e9e:	4b2e      	ldr	r3, [pc, #184]	; (8003f58 <__mdiff+0x10c>)
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003ea6:	e7e5      	b.n	8003e74 <__mdiff+0x28>
 8003ea8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003eac:	6926      	ldr	r6, [r4, #16]
 8003eae:	60c5      	str	r5, [r0, #12]
 8003eb0:	f104 0914 	add.w	r9, r4, #20
 8003eb4:	f108 0514 	add.w	r5, r8, #20
 8003eb8:	f100 0e14 	add.w	lr, r0, #20
 8003ebc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8003ec0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8003ec4:	f108 0210 	add.w	r2, r8, #16
 8003ec8:	46f2      	mov	sl, lr
 8003eca:	2100      	movs	r1, #0
 8003ecc:	f859 3b04 	ldr.w	r3, [r9], #4
 8003ed0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8003ed4:	fa1f f883 	uxth.w	r8, r3
 8003ed8:	fa11 f18b 	uxtah	r1, r1, fp
 8003edc:	0c1b      	lsrs	r3, r3, #16
 8003ede:	eba1 0808 	sub.w	r8, r1, r8
 8003ee2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003ee6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8003eea:	fa1f f888 	uxth.w	r8, r8
 8003eee:	1419      	asrs	r1, r3, #16
 8003ef0:	454e      	cmp	r6, r9
 8003ef2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8003ef6:	f84a 3b04 	str.w	r3, [sl], #4
 8003efa:	d8e7      	bhi.n	8003ecc <__mdiff+0x80>
 8003efc:	1b33      	subs	r3, r6, r4
 8003efe:	3b15      	subs	r3, #21
 8003f00:	f023 0303 	bic.w	r3, r3, #3
 8003f04:	3304      	adds	r3, #4
 8003f06:	3415      	adds	r4, #21
 8003f08:	42a6      	cmp	r6, r4
 8003f0a:	bf38      	it	cc
 8003f0c:	2304      	movcc	r3, #4
 8003f0e:	441d      	add	r5, r3
 8003f10:	4473      	add	r3, lr
 8003f12:	469e      	mov	lr, r3
 8003f14:	462e      	mov	r6, r5
 8003f16:	4566      	cmp	r6, ip
 8003f18:	d30e      	bcc.n	8003f38 <__mdiff+0xec>
 8003f1a:	f10c 0203 	add.w	r2, ip, #3
 8003f1e:	1b52      	subs	r2, r2, r5
 8003f20:	f022 0203 	bic.w	r2, r2, #3
 8003f24:	3d03      	subs	r5, #3
 8003f26:	45ac      	cmp	ip, r5
 8003f28:	bf38      	it	cc
 8003f2a:	2200      	movcc	r2, #0
 8003f2c:	441a      	add	r2, r3
 8003f2e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8003f32:	b17b      	cbz	r3, 8003f54 <__mdiff+0x108>
 8003f34:	6107      	str	r7, [r0, #16]
 8003f36:	e7a3      	b.n	8003e80 <__mdiff+0x34>
 8003f38:	f856 8b04 	ldr.w	r8, [r6], #4
 8003f3c:	fa11 f288 	uxtah	r2, r1, r8
 8003f40:	1414      	asrs	r4, r2, #16
 8003f42:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8003f46:	b292      	uxth	r2, r2
 8003f48:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003f4c:	f84e 2b04 	str.w	r2, [lr], #4
 8003f50:	1421      	asrs	r1, r4, #16
 8003f52:	e7e0      	b.n	8003f16 <__mdiff+0xca>
 8003f54:	3f01      	subs	r7, #1
 8003f56:	e7ea      	b.n	8003f2e <__mdiff+0xe2>
 8003f58:	08004e1f 	.word	0x08004e1f
 8003f5c:	08004e30 	.word	0x08004e30

08003f60 <__d2b>:
 8003f60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003f64:	4689      	mov	r9, r1
 8003f66:	2101      	movs	r1, #1
 8003f68:	ec57 6b10 	vmov	r6, r7, d0
 8003f6c:	4690      	mov	r8, r2
 8003f6e:	f7ff fccf 	bl	8003910 <_Balloc>
 8003f72:	4604      	mov	r4, r0
 8003f74:	b930      	cbnz	r0, 8003f84 <__d2b+0x24>
 8003f76:	4602      	mov	r2, r0
 8003f78:	4b25      	ldr	r3, [pc, #148]	; (8004010 <__d2b+0xb0>)
 8003f7a:	4826      	ldr	r0, [pc, #152]	; (8004014 <__d2b+0xb4>)
 8003f7c:	f240 310a 	movw	r1, #778	; 0x30a
 8003f80:	f000 f950 	bl	8004224 <__assert_func>
 8003f84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8003f88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003f8c:	bb35      	cbnz	r5, 8003fdc <__d2b+0x7c>
 8003f8e:	2e00      	cmp	r6, #0
 8003f90:	9301      	str	r3, [sp, #4]
 8003f92:	d028      	beq.n	8003fe6 <__d2b+0x86>
 8003f94:	4668      	mov	r0, sp
 8003f96:	9600      	str	r6, [sp, #0]
 8003f98:	f7ff fd82 	bl	8003aa0 <__lo0bits>
 8003f9c:	9900      	ldr	r1, [sp, #0]
 8003f9e:	b300      	cbz	r0, 8003fe2 <__d2b+0x82>
 8003fa0:	9a01      	ldr	r2, [sp, #4]
 8003fa2:	f1c0 0320 	rsb	r3, r0, #32
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	430b      	orrs	r3, r1
 8003fac:	40c2      	lsrs	r2, r0
 8003fae:	6163      	str	r3, [r4, #20]
 8003fb0:	9201      	str	r2, [sp, #4]
 8003fb2:	9b01      	ldr	r3, [sp, #4]
 8003fb4:	61a3      	str	r3, [r4, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	bf14      	ite	ne
 8003fba:	2202      	movne	r2, #2
 8003fbc:	2201      	moveq	r2, #1
 8003fbe:	6122      	str	r2, [r4, #16]
 8003fc0:	b1d5      	cbz	r5, 8003ff8 <__d2b+0x98>
 8003fc2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8003fc6:	4405      	add	r5, r0
 8003fc8:	f8c9 5000 	str.w	r5, [r9]
 8003fcc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003fd0:	f8c8 0000 	str.w	r0, [r8]
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	b003      	add	sp, #12
 8003fd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fe0:	e7d5      	b.n	8003f8e <__d2b+0x2e>
 8003fe2:	6161      	str	r1, [r4, #20]
 8003fe4:	e7e5      	b.n	8003fb2 <__d2b+0x52>
 8003fe6:	a801      	add	r0, sp, #4
 8003fe8:	f7ff fd5a 	bl	8003aa0 <__lo0bits>
 8003fec:	9b01      	ldr	r3, [sp, #4]
 8003fee:	6163      	str	r3, [r4, #20]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	6122      	str	r2, [r4, #16]
 8003ff4:	3020      	adds	r0, #32
 8003ff6:	e7e3      	b.n	8003fc0 <__d2b+0x60>
 8003ff8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003ffc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004000:	f8c9 0000 	str.w	r0, [r9]
 8004004:	6918      	ldr	r0, [r3, #16]
 8004006:	f7ff fd2b 	bl	8003a60 <__hi0bits>
 800400a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800400e:	e7df      	b.n	8003fd0 <__d2b+0x70>
 8004010:	08004e1f 	.word	0x08004e1f
 8004014:	08004e30 	.word	0x08004e30

08004018 <_calloc_r>:
 8004018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800401a:	fba1 2402 	umull	r2, r4, r1, r2
 800401e:	b94c      	cbnz	r4, 8004034 <_calloc_r+0x1c>
 8004020:	4611      	mov	r1, r2
 8004022:	9201      	str	r2, [sp, #4]
 8004024:	f000 f87a 	bl	800411c <_malloc_r>
 8004028:	9a01      	ldr	r2, [sp, #4]
 800402a:	4605      	mov	r5, r0
 800402c:	b930      	cbnz	r0, 800403c <_calloc_r+0x24>
 800402e:	4628      	mov	r0, r5
 8004030:	b003      	add	sp, #12
 8004032:	bd30      	pop	{r4, r5, pc}
 8004034:	220c      	movs	r2, #12
 8004036:	6002      	str	r2, [r0, #0]
 8004038:	2500      	movs	r5, #0
 800403a:	e7f8      	b.n	800402e <_calloc_r+0x16>
 800403c:	4621      	mov	r1, r4
 800403e:	f7fe fa05 	bl	800244c <memset>
 8004042:	e7f4      	b.n	800402e <_calloc_r+0x16>

08004044 <_free_r>:
 8004044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004046:	2900      	cmp	r1, #0
 8004048:	d044      	beq.n	80040d4 <_free_r+0x90>
 800404a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800404e:	9001      	str	r0, [sp, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	f1a1 0404 	sub.w	r4, r1, #4
 8004056:	bfb8      	it	lt
 8004058:	18e4      	addlt	r4, r4, r3
 800405a:	f000 f925 	bl	80042a8 <__malloc_lock>
 800405e:	4a1e      	ldr	r2, [pc, #120]	; (80040d8 <_free_r+0x94>)
 8004060:	9801      	ldr	r0, [sp, #4]
 8004062:	6813      	ldr	r3, [r2, #0]
 8004064:	b933      	cbnz	r3, 8004074 <_free_r+0x30>
 8004066:	6063      	str	r3, [r4, #4]
 8004068:	6014      	str	r4, [r2, #0]
 800406a:	b003      	add	sp, #12
 800406c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004070:	f000 b920 	b.w	80042b4 <__malloc_unlock>
 8004074:	42a3      	cmp	r3, r4
 8004076:	d908      	bls.n	800408a <_free_r+0x46>
 8004078:	6825      	ldr	r5, [r4, #0]
 800407a:	1961      	adds	r1, r4, r5
 800407c:	428b      	cmp	r3, r1
 800407e:	bf01      	itttt	eq
 8004080:	6819      	ldreq	r1, [r3, #0]
 8004082:	685b      	ldreq	r3, [r3, #4]
 8004084:	1949      	addeq	r1, r1, r5
 8004086:	6021      	streq	r1, [r4, #0]
 8004088:	e7ed      	b.n	8004066 <_free_r+0x22>
 800408a:	461a      	mov	r2, r3
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	b10b      	cbz	r3, 8004094 <_free_r+0x50>
 8004090:	42a3      	cmp	r3, r4
 8004092:	d9fa      	bls.n	800408a <_free_r+0x46>
 8004094:	6811      	ldr	r1, [r2, #0]
 8004096:	1855      	adds	r5, r2, r1
 8004098:	42a5      	cmp	r5, r4
 800409a:	d10b      	bne.n	80040b4 <_free_r+0x70>
 800409c:	6824      	ldr	r4, [r4, #0]
 800409e:	4421      	add	r1, r4
 80040a0:	1854      	adds	r4, r2, r1
 80040a2:	42a3      	cmp	r3, r4
 80040a4:	6011      	str	r1, [r2, #0]
 80040a6:	d1e0      	bne.n	800406a <_free_r+0x26>
 80040a8:	681c      	ldr	r4, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	6053      	str	r3, [r2, #4]
 80040ae:	4421      	add	r1, r4
 80040b0:	6011      	str	r1, [r2, #0]
 80040b2:	e7da      	b.n	800406a <_free_r+0x26>
 80040b4:	d902      	bls.n	80040bc <_free_r+0x78>
 80040b6:	230c      	movs	r3, #12
 80040b8:	6003      	str	r3, [r0, #0]
 80040ba:	e7d6      	b.n	800406a <_free_r+0x26>
 80040bc:	6825      	ldr	r5, [r4, #0]
 80040be:	1961      	adds	r1, r4, r5
 80040c0:	428b      	cmp	r3, r1
 80040c2:	bf04      	itt	eq
 80040c4:	6819      	ldreq	r1, [r3, #0]
 80040c6:	685b      	ldreq	r3, [r3, #4]
 80040c8:	6063      	str	r3, [r4, #4]
 80040ca:	bf04      	itt	eq
 80040cc:	1949      	addeq	r1, r1, r5
 80040ce:	6021      	streq	r1, [r4, #0]
 80040d0:	6054      	str	r4, [r2, #4]
 80040d2:	e7ca      	b.n	800406a <_free_r+0x26>
 80040d4:	b003      	add	sp, #12
 80040d6:	bd30      	pop	{r4, r5, pc}
 80040d8:	2000024c 	.word	0x2000024c

080040dc <sbrk_aligned>:
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	4e0e      	ldr	r6, [pc, #56]	; (8004118 <sbrk_aligned+0x3c>)
 80040e0:	460c      	mov	r4, r1
 80040e2:	6831      	ldr	r1, [r6, #0]
 80040e4:	4605      	mov	r5, r0
 80040e6:	b911      	cbnz	r1, 80040ee <sbrk_aligned+0x12>
 80040e8:	f000 f88c 	bl	8004204 <_sbrk_r>
 80040ec:	6030      	str	r0, [r6, #0]
 80040ee:	4621      	mov	r1, r4
 80040f0:	4628      	mov	r0, r5
 80040f2:	f000 f887 	bl	8004204 <_sbrk_r>
 80040f6:	1c43      	adds	r3, r0, #1
 80040f8:	d00a      	beq.n	8004110 <sbrk_aligned+0x34>
 80040fa:	1cc4      	adds	r4, r0, #3
 80040fc:	f024 0403 	bic.w	r4, r4, #3
 8004100:	42a0      	cmp	r0, r4
 8004102:	d007      	beq.n	8004114 <sbrk_aligned+0x38>
 8004104:	1a21      	subs	r1, r4, r0
 8004106:	4628      	mov	r0, r5
 8004108:	f000 f87c 	bl	8004204 <_sbrk_r>
 800410c:	3001      	adds	r0, #1
 800410e:	d101      	bne.n	8004114 <sbrk_aligned+0x38>
 8004110:	f04f 34ff 	mov.w	r4, #4294967295
 8004114:	4620      	mov	r0, r4
 8004116:	bd70      	pop	{r4, r5, r6, pc}
 8004118:	20000250 	.word	0x20000250

0800411c <_malloc_r>:
 800411c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004120:	1ccd      	adds	r5, r1, #3
 8004122:	f025 0503 	bic.w	r5, r5, #3
 8004126:	3508      	adds	r5, #8
 8004128:	2d0c      	cmp	r5, #12
 800412a:	bf38      	it	cc
 800412c:	250c      	movcc	r5, #12
 800412e:	2d00      	cmp	r5, #0
 8004130:	4607      	mov	r7, r0
 8004132:	db01      	blt.n	8004138 <_malloc_r+0x1c>
 8004134:	42a9      	cmp	r1, r5
 8004136:	d905      	bls.n	8004144 <_malloc_r+0x28>
 8004138:	230c      	movs	r3, #12
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	2600      	movs	r6, #0
 800413e:	4630      	mov	r0, r6
 8004140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004144:	4e2e      	ldr	r6, [pc, #184]	; (8004200 <_malloc_r+0xe4>)
 8004146:	f000 f8af 	bl	80042a8 <__malloc_lock>
 800414a:	6833      	ldr	r3, [r6, #0]
 800414c:	461c      	mov	r4, r3
 800414e:	bb34      	cbnz	r4, 800419e <_malloc_r+0x82>
 8004150:	4629      	mov	r1, r5
 8004152:	4638      	mov	r0, r7
 8004154:	f7ff ffc2 	bl	80040dc <sbrk_aligned>
 8004158:	1c43      	adds	r3, r0, #1
 800415a:	4604      	mov	r4, r0
 800415c:	d14d      	bne.n	80041fa <_malloc_r+0xde>
 800415e:	6834      	ldr	r4, [r6, #0]
 8004160:	4626      	mov	r6, r4
 8004162:	2e00      	cmp	r6, #0
 8004164:	d140      	bne.n	80041e8 <_malloc_r+0xcc>
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	4631      	mov	r1, r6
 800416a:	4638      	mov	r0, r7
 800416c:	eb04 0803 	add.w	r8, r4, r3
 8004170:	f000 f848 	bl	8004204 <_sbrk_r>
 8004174:	4580      	cmp	r8, r0
 8004176:	d13a      	bne.n	80041ee <_malloc_r+0xd2>
 8004178:	6821      	ldr	r1, [r4, #0]
 800417a:	3503      	adds	r5, #3
 800417c:	1a6d      	subs	r5, r5, r1
 800417e:	f025 0503 	bic.w	r5, r5, #3
 8004182:	3508      	adds	r5, #8
 8004184:	2d0c      	cmp	r5, #12
 8004186:	bf38      	it	cc
 8004188:	250c      	movcc	r5, #12
 800418a:	4629      	mov	r1, r5
 800418c:	4638      	mov	r0, r7
 800418e:	f7ff ffa5 	bl	80040dc <sbrk_aligned>
 8004192:	3001      	adds	r0, #1
 8004194:	d02b      	beq.n	80041ee <_malloc_r+0xd2>
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	442b      	add	r3, r5
 800419a:	6023      	str	r3, [r4, #0]
 800419c:	e00e      	b.n	80041bc <_malloc_r+0xa0>
 800419e:	6822      	ldr	r2, [r4, #0]
 80041a0:	1b52      	subs	r2, r2, r5
 80041a2:	d41e      	bmi.n	80041e2 <_malloc_r+0xc6>
 80041a4:	2a0b      	cmp	r2, #11
 80041a6:	d916      	bls.n	80041d6 <_malloc_r+0xba>
 80041a8:	1961      	adds	r1, r4, r5
 80041aa:	42a3      	cmp	r3, r4
 80041ac:	6025      	str	r5, [r4, #0]
 80041ae:	bf18      	it	ne
 80041b0:	6059      	strne	r1, [r3, #4]
 80041b2:	6863      	ldr	r3, [r4, #4]
 80041b4:	bf08      	it	eq
 80041b6:	6031      	streq	r1, [r6, #0]
 80041b8:	5162      	str	r2, [r4, r5]
 80041ba:	604b      	str	r3, [r1, #4]
 80041bc:	4638      	mov	r0, r7
 80041be:	f104 060b 	add.w	r6, r4, #11
 80041c2:	f000 f877 	bl	80042b4 <__malloc_unlock>
 80041c6:	f026 0607 	bic.w	r6, r6, #7
 80041ca:	1d23      	adds	r3, r4, #4
 80041cc:	1af2      	subs	r2, r6, r3
 80041ce:	d0b6      	beq.n	800413e <_malloc_r+0x22>
 80041d0:	1b9b      	subs	r3, r3, r6
 80041d2:	50a3      	str	r3, [r4, r2]
 80041d4:	e7b3      	b.n	800413e <_malloc_r+0x22>
 80041d6:	6862      	ldr	r2, [r4, #4]
 80041d8:	42a3      	cmp	r3, r4
 80041da:	bf0c      	ite	eq
 80041dc:	6032      	streq	r2, [r6, #0]
 80041de:	605a      	strne	r2, [r3, #4]
 80041e0:	e7ec      	b.n	80041bc <_malloc_r+0xa0>
 80041e2:	4623      	mov	r3, r4
 80041e4:	6864      	ldr	r4, [r4, #4]
 80041e6:	e7b2      	b.n	800414e <_malloc_r+0x32>
 80041e8:	4634      	mov	r4, r6
 80041ea:	6876      	ldr	r6, [r6, #4]
 80041ec:	e7b9      	b.n	8004162 <_malloc_r+0x46>
 80041ee:	230c      	movs	r3, #12
 80041f0:	603b      	str	r3, [r7, #0]
 80041f2:	4638      	mov	r0, r7
 80041f4:	f000 f85e 	bl	80042b4 <__malloc_unlock>
 80041f8:	e7a1      	b.n	800413e <_malloc_r+0x22>
 80041fa:	6025      	str	r5, [r4, #0]
 80041fc:	e7de      	b.n	80041bc <_malloc_r+0xa0>
 80041fe:	bf00      	nop
 8004200:	2000024c 	.word	0x2000024c

08004204 <_sbrk_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	4d06      	ldr	r5, [pc, #24]	; (8004220 <_sbrk_r+0x1c>)
 8004208:	2300      	movs	r3, #0
 800420a:	4604      	mov	r4, r0
 800420c:	4608      	mov	r0, r1
 800420e:	602b      	str	r3, [r5, #0]
 8004210:	f7fc fc1e 	bl	8000a50 <_sbrk>
 8004214:	1c43      	adds	r3, r0, #1
 8004216:	d102      	bne.n	800421e <_sbrk_r+0x1a>
 8004218:	682b      	ldr	r3, [r5, #0]
 800421a:	b103      	cbz	r3, 800421e <_sbrk_r+0x1a>
 800421c:	6023      	str	r3, [r4, #0]
 800421e:	bd38      	pop	{r3, r4, r5, pc}
 8004220:	20000254 	.word	0x20000254

08004224 <__assert_func>:
 8004224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004226:	4614      	mov	r4, r2
 8004228:	461a      	mov	r2, r3
 800422a:	4b09      	ldr	r3, [pc, #36]	; (8004250 <__assert_func+0x2c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4605      	mov	r5, r0
 8004230:	68d8      	ldr	r0, [r3, #12]
 8004232:	b14c      	cbz	r4, 8004248 <__assert_func+0x24>
 8004234:	4b07      	ldr	r3, [pc, #28]	; (8004254 <__assert_func+0x30>)
 8004236:	9100      	str	r1, [sp, #0]
 8004238:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800423c:	4906      	ldr	r1, [pc, #24]	; (8004258 <__assert_func+0x34>)
 800423e:	462b      	mov	r3, r5
 8004240:	f000 f80e 	bl	8004260 <fiprintf>
 8004244:	f000 fa64 	bl	8004710 <abort>
 8004248:	4b04      	ldr	r3, [pc, #16]	; (800425c <__assert_func+0x38>)
 800424a:	461c      	mov	r4, r3
 800424c:	e7f3      	b.n	8004236 <__assert_func+0x12>
 800424e:	bf00      	nop
 8004250:	2000000c 	.word	0x2000000c
 8004254:	08004f8c 	.word	0x08004f8c
 8004258:	08004f99 	.word	0x08004f99
 800425c:	08004fc7 	.word	0x08004fc7

08004260 <fiprintf>:
 8004260:	b40e      	push	{r1, r2, r3}
 8004262:	b503      	push	{r0, r1, lr}
 8004264:	4601      	mov	r1, r0
 8004266:	ab03      	add	r3, sp, #12
 8004268:	4805      	ldr	r0, [pc, #20]	; (8004280 <fiprintf+0x20>)
 800426a:	f853 2b04 	ldr.w	r2, [r3], #4
 800426e:	6800      	ldr	r0, [r0, #0]
 8004270:	9301      	str	r3, [sp, #4]
 8004272:	f000 f84f 	bl	8004314 <_vfiprintf_r>
 8004276:	b002      	add	sp, #8
 8004278:	f85d eb04 	ldr.w	lr, [sp], #4
 800427c:	b003      	add	sp, #12
 800427e:	4770      	bx	lr
 8004280:	2000000c 	.word	0x2000000c

08004284 <__ascii_mbtowc>:
 8004284:	b082      	sub	sp, #8
 8004286:	b901      	cbnz	r1, 800428a <__ascii_mbtowc+0x6>
 8004288:	a901      	add	r1, sp, #4
 800428a:	b142      	cbz	r2, 800429e <__ascii_mbtowc+0x1a>
 800428c:	b14b      	cbz	r3, 80042a2 <__ascii_mbtowc+0x1e>
 800428e:	7813      	ldrb	r3, [r2, #0]
 8004290:	600b      	str	r3, [r1, #0]
 8004292:	7812      	ldrb	r2, [r2, #0]
 8004294:	1e10      	subs	r0, r2, #0
 8004296:	bf18      	it	ne
 8004298:	2001      	movne	r0, #1
 800429a:	b002      	add	sp, #8
 800429c:	4770      	bx	lr
 800429e:	4610      	mov	r0, r2
 80042a0:	e7fb      	b.n	800429a <__ascii_mbtowc+0x16>
 80042a2:	f06f 0001 	mvn.w	r0, #1
 80042a6:	e7f8      	b.n	800429a <__ascii_mbtowc+0x16>

080042a8 <__malloc_lock>:
 80042a8:	4801      	ldr	r0, [pc, #4]	; (80042b0 <__malloc_lock+0x8>)
 80042aa:	f000 bbf1 	b.w	8004a90 <__retarget_lock_acquire_recursive>
 80042ae:	bf00      	nop
 80042b0:	20000258 	.word	0x20000258

080042b4 <__malloc_unlock>:
 80042b4:	4801      	ldr	r0, [pc, #4]	; (80042bc <__malloc_unlock+0x8>)
 80042b6:	f000 bbec 	b.w	8004a92 <__retarget_lock_release_recursive>
 80042ba:	bf00      	nop
 80042bc:	20000258 	.word	0x20000258

080042c0 <__sfputc_r>:
 80042c0:	6893      	ldr	r3, [r2, #8]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	b410      	push	{r4}
 80042c8:	6093      	str	r3, [r2, #8]
 80042ca:	da08      	bge.n	80042de <__sfputc_r+0x1e>
 80042cc:	6994      	ldr	r4, [r2, #24]
 80042ce:	42a3      	cmp	r3, r4
 80042d0:	db01      	blt.n	80042d6 <__sfputc_r+0x16>
 80042d2:	290a      	cmp	r1, #10
 80042d4:	d103      	bne.n	80042de <__sfputc_r+0x1e>
 80042d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042da:	f000 b94b 	b.w	8004574 <__swbuf_r>
 80042de:	6813      	ldr	r3, [r2, #0]
 80042e0:	1c58      	adds	r0, r3, #1
 80042e2:	6010      	str	r0, [r2, #0]
 80042e4:	7019      	strb	r1, [r3, #0]
 80042e6:	4608      	mov	r0, r1
 80042e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <__sfputs_r>:
 80042ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f0:	4606      	mov	r6, r0
 80042f2:	460f      	mov	r7, r1
 80042f4:	4614      	mov	r4, r2
 80042f6:	18d5      	adds	r5, r2, r3
 80042f8:	42ac      	cmp	r4, r5
 80042fa:	d101      	bne.n	8004300 <__sfputs_r+0x12>
 80042fc:	2000      	movs	r0, #0
 80042fe:	e007      	b.n	8004310 <__sfputs_r+0x22>
 8004300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004304:	463a      	mov	r2, r7
 8004306:	4630      	mov	r0, r6
 8004308:	f7ff ffda 	bl	80042c0 <__sfputc_r>
 800430c:	1c43      	adds	r3, r0, #1
 800430e:	d1f3      	bne.n	80042f8 <__sfputs_r+0xa>
 8004310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004314 <_vfiprintf_r>:
 8004314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004318:	460d      	mov	r5, r1
 800431a:	b09d      	sub	sp, #116	; 0x74
 800431c:	4614      	mov	r4, r2
 800431e:	4698      	mov	r8, r3
 8004320:	4606      	mov	r6, r0
 8004322:	b118      	cbz	r0, 800432c <_vfiprintf_r+0x18>
 8004324:	6983      	ldr	r3, [r0, #24]
 8004326:	b90b      	cbnz	r3, 800432c <_vfiprintf_r+0x18>
 8004328:	f000 fb14 	bl	8004954 <__sinit>
 800432c:	4b89      	ldr	r3, [pc, #548]	; (8004554 <_vfiprintf_r+0x240>)
 800432e:	429d      	cmp	r5, r3
 8004330:	d11b      	bne.n	800436a <_vfiprintf_r+0x56>
 8004332:	6875      	ldr	r5, [r6, #4]
 8004334:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004336:	07d9      	lsls	r1, r3, #31
 8004338:	d405      	bmi.n	8004346 <_vfiprintf_r+0x32>
 800433a:	89ab      	ldrh	r3, [r5, #12]
 800433c:	059a      	lsls	r2, r3, #22
 800433e:	d402      	bmi.n	8004346 <_vfiprintf_r+0x32>
 8004340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004342:	f000 fba5 	bl	8004a90 <__retarget_lock_acquire_recursive>
 8004346:	89ab      	ldrh	r3, [r5, #12]
 8004348:	071b      	lsls	r3, r3, #28
 800434a:	d501      	bpl.n	8004350 <_vfiprintf_r+0x3c>
 800434c:	692b      	ldr	r3, [r5, #16]
 800434e:	b9eb      	cbnz	r3, 800438c <_vfiprintf_r+0x78>
 8004350:	4629      	mov	r1, r5
 8004352:	4630      	mov	r0, r6
 8004354:	f000 f96e 	bl	8004634 <__swsetup_r>
 8004358:	b1c0      	cbz	r0, 800438c <_vfiprintf_r+0x78>
 800435a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800435c:	07dc      	lsls	r4, r3, #31
 800435e:	d50e      	bpl.n	800437e <_vfiprintf_r+0x6a>
 8004360:	f04f 30ff 	mov.w	r0, #4294967295
 8004364:	b01d      	add	sp, #116	; 0x74
 8004366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800436a:	4b7b      	ldr	r3, [pc, #492]	; (8004558 <_vfiprintf_r+0x244>)
 800436c:	429d      	cmp	r5, r3
 800436e:	d101      	bne.n	8004374 <_vfiprintf_r+0x60>
 8004370:	68b5      	ldr	r5, [r6, #8]
 8004372:	e7df      	b.n	8004334 <_vfiprintf_r+0x20>
 8004374:	4b79      	ldr	r3, [pc, #484]	; (800455c <_vfiprintf_r+0x248>)
 8004376:	429d      	cmp	r5, r3
 8004378:	bf08      	it	eq
 800437a:	68f5      	ldreq	r5, [r6, #12]
 800437c:	e7da      	b.n	8004334 <_vfiprintf_r+0x20>
 800437e:	89ab      	ldrh	r3, [r5, #12]
 8004380:	0598      	lsls	r0, r3, #22
 8004382:	d4ed      	bmi.n	8004360 <_vfiprintf_r+0x4c>
 8004384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004386:	f000 fb84 	bl	8004a92 <__retarget_lock_release_recursive>
 800438a:	e7e9      	b.n	8004360 <_vfiprintf_r+0x4c>
 800438c:	2300      	movs	r3, #0
 800438e:	9309      	str	r3, [sp, #36]	; 0x24
 8004390:	2320      	movs	r3, #32
 8004392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004396:	f8cd 800c 	str.w	r8, [sp, #12]
 800439a:	2330      	movs	r3, #48	; 0x30
 800439c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004560 <_vfiprintf_r+0x24c>
 80043a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043a4:	f04f 0901 	mov.w	r9, #1
 80043a8:	4623      	mov	r3, r4
 80043aa:	469a      	mov	sl, r3
 80043ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043b0:	b10a      	cbz	r2, 80043b6 <_vfiprintf_r+0xa2>
 80043b2:	2a25      	cmp	r2, #37	; 0x25
 80043b4:	d1f9      	bne.n	80043aa <_vfiprintf_r+0x96>
 80043b6:	ebba 0b04 	subs.w	fp, sl, r4
 80043ba:	d00b      	beq.n	80043d4 <_vfiprintf_r+0xc0>
 80043bc:	465b      	mov	r3, fp
 80043be:	4622      	mov	r2, r4
 80043c0:	4629      	mov	r1, r5
 80043c2:	4630      	mov	r0, r6
 80043c4:	f7ff ff93 	bl	80042ee <__sfputs_r>
 80043c8:	3001      	adds	r0, #1
 80043ca:	f000 80aa 	beq.w	8004522 <_vfiprintf_r+0x20e>
 80043ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043d0:	445a      	add	r2, fp
 80043d2:	9209      	str	r2, [sp, #36]	; 0x24
 80043d4:	f89a 3000 	ldrb.w	r3, [sl]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 80a2 	beq.w	8004522 <_vfiprintf_r+0x20e>
 80043de:	2300      	movs	r3, #0
 80043e0:	f04f 32ff 	mov.w	r2, #4294967295
 80043e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043e8:	f10a 0a01 	add.w	sl, sl, #1
 80043ec:	9304      	str	r3, [sp, #16]
 80043ee:	9307      	str	r3, [sp, #28]
 80043f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043f4:	931a      	str	r3, [sp, #104]	; 0x68
 80043f6:	4654      	mov	r4, sl
 80043f8:	2205      	movs	r2, #5
 80043fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043fe:	4858      	ldr	r0, [pc, #352]	; (8004560 <_vfiprintf_r+0x24c>)
 8004400:	f7fb ff26 	bl	8000250 <memchr>
 8004404:	9a04      	ldr	r2, [sp, #16]
 8004406:	b9d8      	cbnz	r0, 8004440 <_vfiprintf_r+0x12c>
 8004408:	06d1      	lsls	r1, r2, #27
 800440a:	bf44      	itt	mi
 800440c:	2320      	movmi	r3, #32
 800440e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004412:	0713      	lsls	r3, r2, #28
 8004414:	bf44      	itt	mi
 8004416:	232b      	movmi	r3, #43	; 0x2b
 8004418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800441c:	f89a 3000 	ldrb.w	r3, [sl]
 8004420:	2b2a      	cmp	r3, #42	; 0x2a
 8004422:	d015      	beq.n	8004450 <_vfiprintf_r+0x13c>
 8004424:	9a07      	ldr	r2, [sp, #28]
 8004426:	4654      	mov	r4, sl
 8004428:	2000      	movs	r0, #0
 800442a:	f04f 0c0a 	mov.w	ip, #10
 800442e:	4621      	mov	r1, r4
 8004430:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004434:	3b30      	subs	r3, #48	; 0x30
 8004436:	2b09      	cmp	r3, #9
 8004438:	d94e      	bls.n	80044d8 <_vfiprintf_r+0x1c4>
 800443a:	b1b0      	cbz	r0, 800446a <_vfiprintf_r+0x156>
 800443c:	9207      	str	r2, [sp, #28]
 800443e:	e014      	b.n	800446a <_vfiprintf_r+0x156>
 8004440:	eba0 0308 	sub.w	r3, r0, r8
 8004444:	fa09 f303 	lsl.w	r3, r9, r3
 8004448:	4313      	orrs	r3, r2
 800444a:	9304      	str	r3, [sp, #16]
 800444c:	46a2      	mov	sl, r4
 800444e:	e7d2      	b.n	80043f6 <_vfiprintf_r+0xe2>
 8004450:	9b03      	ldr	r3, [sp, #12]
 8004452:	1d19      	adds	r1, r3, #4
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	9103      	str	r1, [sp, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	bfbb      	ittet	lt
 800445c:	425b      	neglt	r3, r3
 800445e:	f042 0202 	orrlt.w	r2, r2, #2
 8004462:	9307      	strge	r3, [sp, #28]
 8004464:	9307      	strlt	r3, [sp, #28]
 8004466:	bfb8      	it	lt
 8004468:	9204      	strlt	r2, [sp, #16]
 800446a:	7823      	ldrb	r3, [r4, #0]
 800446c:	2b2e      	cmp	r3, #46	; 0x2e
 800446e:	d10c      	bne.n	800448a <_vfiprintf_r+0x176>
 8004470:	7863      	ldrb	r3, [r4, #1]
 8004472:	2b2a      	cmp	r3, #42	; 0x2a
 8004474:	d135      	bne.n	80044e2 <_vfiprintf_r+0x1ce>
 8004476:	9b03      	ldr	r3, [sp, #12]
 8004478:	1d1a      	adds	r2, r3, #4
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	9203      	str	r2, [sp, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	bfb8      	it	lt
 8004482:	f04f 33ff 	movlt.w	r3, #4294967295
 8004486:	3402      	adds	r4, #2
 8004488:	9305      	str	r3, [sp, #20]
 800448a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004570 <_vfiprintf_r+0x25c>
 800448e:	7821      	ldrb	r1, [r4, #0]
 8004490:	2203      	movs	r2, #3
 8004492:	4650      	mov	r0, sl
 8004494:	f7fb fedc 	bl	8000250 <memchr>
 8004498:	b140      	cbz	r0, 80044ac <_vfiprintf_r+0x198>
 800449a:	2340      	movs	r3, #64	; 0x40
 800449c:	eba0 000a 	sub.w	r0, r0, sl
 80044a0:	fa03 f000 	lsl.w	r0, r3, r0
 80044a4:	9b04      	ldr	r3, [sp, #16]
 80044a6:	4303      	orrs	r3, r0
 80044a8:	3401      	adds	r4, #1
 80044aa:	9304      	str	r3, [sp, #16]
 80044ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044b0:	482c      	ldr	r0, [pc, #176]	; (8004564 <_vfiprintf_r+0x250>)
 80044b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044b6:	2206      	movs	r2, #6
 80044b8:	f7fb feca 	bl	8000250 <memchr>
 80044bc:	2800      	cmp	r0, #0
 80044be:	d03f      	beq.n	8004540 <_vfiprintf_r+0x22c>
 80044c0:	4b29      	ldr	r3, [pc, #164]	; (8004568 <_vfiprintf_r+0x254>)
 80044c2:	bb1b      	cbnz	r3, 800450c <_vfiprintf_r+0x1f8>
 80044c4:	9b03      	ldr	r3, [sp, #12]
 80044c6:	3307      	adds	r3, #7
 80044c8:	f023 0307 	bic.w	r3, r3, #7
 80044cc:	3308      	adds	r3, #8
 80044ce:	9303      	str	r3, [sp, #12]
 80044d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044d2:	443b      	add	r3, r7
 80044d4:	9309      	str	r3, [sp, #36]	; 0x24
 80044d6:	e767      	b.n	80043a8 <_vfiprintf_r+0x94>
 80044d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80044dc:	460c      	mov	r4, r1
 80044de:	2001      	movs	r0, #1
 80044e0:	e7a5      	b.n	800442e <_vfiprintf_r+0x11a>
 80044e2:	2300      	movs	r3, #0
 80044e4:	3401      	adds	r4, #1
 80044e6:	9305      	str	r3, [sp, #20]
 80044e8:	4619      	mov	r1, r3
 80044ea:	f04f 0c0a 	mov.w	ip, #10
 80044ee:	4620      	mov	r0, r4
 80044f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044f4:	3a30      	subs	r2, #48	; 0x30
 80044f6:	2a09      	cmp	r2, #9
 80044f8:	d903      	bls.n	8004502 <_vfiprintf_r+0x1ee>
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0c5      	beq.n	800448a <_vfiprintf_r+0x176>
 80044fe:	9105      	str	r1, [sp, #20]
 8004500:	e7c3      	b.n	800448a <_vfiprintf_r+0x176>
 8004502:	fb0c 2101 	mla	r1, ip, r1, r2
 8004506:	4604      	mov	r4, r0
 8004508:	2301      	movs	r3, #1
 800450a:	e7f0      	b.n	80044ee <_vfiprintf_r+0x1da>
 800450c:	ab03      	add	r3, sp, #12
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	462a      	mov	r2, r5
 8004512:	4b16      	ldr	r3, [pc, #88]	; (800456c <_vfiprintf_r+0x258>)
 8004514:	a904      	add	r1, sp, #16
 8004516:	4630      	mov	r0, r6
 8004518:	f7fe f832 	bl	8002580 <_printf_float>
 800451c:	4607      	mov	r7, r0
 800451e:	1c78      	adds	r0, r7, #1
 8004520:	d1d6      	bne.n	80044d0 <_vfiprintf_r+0x1bc>
 8004522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004524:	07d9      	lsls	r1, r3, #31
 8004526:	d405      	bmi.n	8004534 <_vfiprintf_r+0x220>
 8004528:	89ab      	ldrh	r3, [r5, #12]
 800452a:	059a      	lsls	r2, r3, #22
 800452c:	d402      	bmi.n	8004534 <_vfiprintf_r+0x220>
 800452e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004530:	f000 faaf 	bl	8004a92 <__retarget_lock_release_recursive>
 8004534:	89ab      	ldrh	r3, [r5, #12]
 8004536:	065b      	lsls	r3, r3, #25
 8004538:	f53f af12 	bmi.w	8004360 <_vfiprintf_r+0x4c>
 800453c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800453e:	e711      	b.n	8004364 <_vfiprintf_r+0x50>
 8004540:	ab03      	add	r3, sp, #12
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	462a      	mov	r2, r5
 8004546:	4b09      	ldr	r3, [pc, #36]	; (800456c <_vfiprintf_r+0x258>)
 8004548:	a904      	add	r1, sp, #16
 800454a:	4630      	mov	r0, r6
 800454c:	f7fe faa4 	bl	8002a98 <_printf_i>
 8004550:	e7e4      	b.n	800451c <_vfiprintf_r+0x208>
 8004552:	bf00      	nop
 8004554:	08005104 	.word	0x08005104
 8004558:	08005124 	.word	0x08005124
 800455c:	080050e4 	.word	0x080050e4
 8004560:	08004fd2 	.word	0x08004fd2
 8004564:	08004fdc 	.word	0x08004fdc
 8004568:	08002581 	.word	0x08002581
 800456c:	080042ef 	.word	0x080042ef
 8004570:	08004fd8 	.word	0x08004fd8

08004574 <__swbuf_r>:
 8004574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004576:	460e      	mov	r6, r1
 8004578:	4614      	mov	r4, r2
 800457a:	4605      	mov	r5, r0
 800457c:	b118      	cbz	r0, 8004586 <__swbuf_r+0x12>
 800457e:	6983      	ldr	r3, [r0, #24]
 8004580:	b90b      	cbnz	r3, 8004586 <__swbuf_r+0x12>
 8004582:	f000 f9e7 	bl	8004954 <__sinit>
 8004586:	4b21      	ldr	r3, [pc, #132]	; (800460c <__swbuf_r+0x98>)
 8004588:	429c      	cmp	r4, r3
 800458a:	d12b      	bne.n	80045e4 <__swbuf_r+0x70>
 800458c:	686c      	ldr	r4, [r5, #4]
 800458e:	69a3      	ldr	r3, [r4, #24]
 8004590:	60a3      	str	r3, [r4, #8]
 8004592:	89a3      	ldrh	r3, [r4, #12]
 8004594:	071a      	lsls	r2, r3, #28
 8004596:	d52f      	bpl.n	80045f8 <__swbuf_r+0x84>
 8004598:	6923      	ldr	r3, [r4, #16]
 800459a:	b36b      	cbz	r3, 80045f8 <__swbuf_r+0x84>
 800459c:	6923      	ldr	r3, [r4, #16]
 800459e:	6820      	ldr	r0, [r4, #0]
 80045a0:	1ac0      	subs	r0, r0, r3
 80045a2:	6963      	ldr	r3, [r4, #20]
 80045a4:	b2f6      	uxtb	r6, r6
 80045a6:	4283      	cmp	r3, r0
 80045a8:	4637      	mov	r7, r6
 80045aa:	dc04      	bgt.n	80045b6 <__swbuf_r+0x42>
 80045ac:	4621      	mov	r1, r4
 80045ae:	4628      	mov	r0, r5
 80045b0:	f000 f93c 	bl	800482c <_fflush_r>
 80045b4:	bb30      	cbnz	r0, 8004604 <__swbuf_r+0x90>
 80045b6:	68a3      	ldr	r3, [r4, #8]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	60a3      	str	r3, [r4, #8]
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	6022      	str	r2, [r4, #0]
 80045c2:	701e      	strb	r6, [r3, #0]
 80045c4:	6963      	ldr	r3, [r4, #20]
 80045c6:	3001      	adds	r0, #1
 80045c8:	4283      	cmp	r3, r0
 80045ca:	d004      	beq.n	80045d6 <__swbuf_r+0x62>
 80045cc:	89a3      	ldrh	r3, [r4, #12]
 80045ce:	07db      	lsls	r3, r3, #31
 80045d0:	d506      	bpl.n	80045e0 <__swbuf_r+0x6c>
 80045d2:	2e0a      	cmp	r6, #10
 80045d4:	d104      	bne.n	80045e0 <__swbuf_r+0x6c>
 80045d6:	4621      	mov	r1, r4
 80045d8:	4628      	mov	r0, r5
 80045da:	f000 f927 	bl	800482c <_fflush_r>
 80045de:	b988      	cbnz	r0, 8004604 <__swbuf_r+0x90>
 80045e0:	4638      	mov	r0, r7
 80045e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045e4:	4b0a      	ldr	r3, [pc, #40]	; (8004610 <__swbuf_r+0x9c>)
 80045e6:	429c      	cmp	r4, r3
 80045e8:	d101      	bne.n	80045ee <__swbuf_r+0x7a>
 80045ea:	68ac      	ldr	r4, [r5, #8]
 80045ec:	e7cf      	b.n	800458e <__swbuf_r+0x1a>
 80045ee:	4b09      	ldr	r3, [pc, #36]	; (8004614 <__swbuf_r+0xa0>)
 80045f0:	429c      	cmp	r4, r3
 80045f2:	bf08      	it	eq
 80045f4:	68ec      	ldreq	r4, [r5, #12]
 80045f6:	e7ca      	b.n	800458e <__swbuf_r+0x1a>
 80045f8:	4621      	mov	r1, r4
 80045fa:	4628      	mov	r0, r5
 80045fc:	f000 f81a 	bl	8004634 <__swsetup_r>
 8004600:	2800      	cmp	r0, #0
 8004602:	d0cb      	beq.n	800459c <__swbuf_r+0x28>
 8004604:	f04f 37ff 	mov.w	r7, #4294967295
 8004608:	e7ea      	b.n	80045e0 <__swbuf_r+0x6c>
 800460a:	bf00      	nop
 800460c:	08005104 	.word	0x08005104
 8004610:	08005124 	.word	0x08005124
 8004614:	080050e4 	.word	0x080050e4

08004618 <__ascii_wctomb>:
 8004618:	b149      	cbz	r1, 800462e <__ascii_wctomb+0x16>
 800461a:	2aff      	cmp	r2, #255	; 0xff
 800461c:	bf85      	ittet	hi
 800461e:	238a      	movhi	r3, #138	; 0x8a
 8004620:	6003      	strhi	r3, [r0, #0]
 8004622:	700a      	strbls	r2, [r1, #0]
 8004624:	f04f 30ff 	movhi.w	r0, #4294967295
 8004628:	bf98      	it	ls
 800462a:	2001      	movls	r0, #1
 800462c:	4770      	bx	lr
 800462e:	4608      	mov	r0, r1
 8004630:	4770      	bx	lr
	...

08004634 <__swsetup_r>:
 8004634:	4b32      	ldr	r3, [pc, #200]	; (8004700 <__swsetup_r+0xcc>)
 8004636:	b570      	push	{r4, r5, r6, lr}
 8004638:	681d      	ldr	r5, [r3, #0]
 800463a:	4606      	mov	r6, r0
 800463c:	460c      	mov	r4, r1
 800463e:	b125      	cbz	r5, 800464a <__swsetup_r+0x16>
 8004640:	69ab      	ldr	r3, [r5, #24]
 8004642:	b913      	cbnz	r3, 800464a <__swsetup_r+0x16>
 8004644:	4628      	mov	r0, r5
 8004646:	f000 f985 	bl	8004954 <__sinit>
 800464a:	4b2e      	ldr	r3, [pc, #184]	; (8004704 <__swsetup_r+0xd0>)
 800464c:	429c      	cmp	r4, r3
 800464e:	d10f      	bne.n	8004670 <__swsetup_r+0x3c>
 8004650:	686c      	ldr	r4, [r5, #4]
 8004652:	89a3      	ldrh	r3, [r4, #12]
 8004654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004658:	0719      	lsls	r1, r3, #28
 800465a:	d42c      	bmi.n	80046b6 <__swsetup_r+0x82>
 800465c:	06dd      	lsls	r5, r3, #27
 800465e:	d411      	bmi.n	8004684 <__swsetup_r+0x50>
 8004660:	2309      	movs	r3, #9
 8004662:	6033      	str	r3, [r6, #0]
 8004664:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004668:	81a3      	strh	r3, [r4, #12]
 800466a:	f04f 30ff 	mov.w	r0, #4294967295
 800466e:	e03e      	b.n	80046ee <__swsetup_r+0xba>
 8004670:	4b25      	ldr	r3, [pc, #148]	; (8004708 <__swsetup_r+0xd4>)
 8004672:	429c      	cmp	r4, r3
 8004674:	d101      	bne.n	800467a <__swsetup_r+0x46>
 8004676:	68ac      	ldr	r4, [r5, #8]
 8004678:	e7eb      	b.n	8004652 <__swsetup_r+0x1e>
 800467a:	4b24      	ldr	r3, [pc, #144]	; (800470c <__swsetup_r+0xd8>)
 800467c:	429c      	cmp	r4, r3
 800467e:	bf08      	it	eq
 8004680:	68ec      	ldreq	r4, [r5, #12]
 8004682:	e7e6      	b.n	8004652 <__swsetup_r+0x1e>
 8004684:	0758      	lsls	r0, r3, #29
 8004686:	d512      	bpl.n	80046ae <__swsetup_r+0x7a>
 8004688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800468a:	b141      	cbz	r1, 800469e <__swsetup_r+0x6a>
 800468c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004690:	4299      	cmp	r1, r3
 8004692:	d002      	beq.n	800469a <__swsetup_r+0x66>
 8004694:	4630      	mov	r0, r6
 8004696:	f7ff fcd5 	bl	8004044 <_free_r>
 800469a:	2300      	movs	r3, #0
 800469c:	6363      	str	r3, [r4, #52]	; 0x34
 800469e:	89a3      	ldrh	r3, [r4, #12]
 80046a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046a4:	81a3      	strh	r3, [r4, #12]
 80046a6:	2300      	movs	r3, #0
 80046a8:	6063      	str	r3, [r4, #4]
 80046aa:	6923      	ldr	r3, [r4, #16]
 80046ac:	6023      	str	r3, [r4, #0]
 80046ae:	89a3      	ldrh	r3, [r4, #12]
 80046b0:	f043 0308 	orr.w	r3, r3, #8
 80046b4:	81a3      	strh	r3, [r4, #12]
 80046b6:	6923      	ldr	r3, [r4, #16]
 80046b8:	b94b      	cbnz	r3, 80046ce <__swsetup_r+0x9a>
 80046ba:	89a3      	ldrh	r3, [r4, #12]
 80046bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c4:	d003      	beq.n	80046ce <__swsetup_r+0x9a>
 80046c6:	4621      	mov	r1, r4
 80046c8:	4630      	mov	r0, r6
 80046ca:	f000 fa09 	bl	8004ae0 <__smakebuf_r>
 80046ce:	89a0      	ldrh	r0, [r4, #12]
 80046d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046d4:	f010 0301 	ands.w	r3, r0, #1
 80046d8:	d00a      	beq.n	80046f0 <__swsetup_r+0xbc>
 80046da:	2300      	movs	r3, #0
 80046dc:	60a3      	str	r3, [r4, #8]
 80046de:	6963      	ldr	r3, [r4, #20]
 80046e0:	425b      	negs	r3, r3
 80046e2:	61a3      	str	r3, [r4, #24]
 80046e4:	6923      	ldr	r3, [r4, #16]
 80046e6:	b943      	cbnz	r3, 80046fa <__swsetup_r+0xc6>
 80046e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80046ec:	d1ba      	bne.n	8004664 <__swsetup_r+0x30>
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
 80046f0:	0781      	lsls	r1, r0, #30
 80046f2:	bf58      	it	pl
 80046f4:	6963      	ldrpl	r3, [r4, #20]
 80046f6:	60a3      	str	r3, [r4, #8]
 80046f8:	e7f4      	b.n	80046e4 <__swsetup_r+0xb0>
 80046fa:	2000      	movs	r0, #0
 80046fc:	e7f7      	b.n	80046ee <__swsetup_r+0xba>
 80046fe:	bf00      	nop
 8004700:	2000000c 	.word	0x2000000c
 8004704:	08005104 	.word	0x08005104
 8004708:	08005124 	.word	0x08005124
 800470c:	080050e4 	.word	0x080050e4

08004710 <abort>:
 8004710:	b508      	push	{r3, lr}
 8004712:	2006      	movs	r0, #6
 8004714:	f000 fa4c 	bl	8004bb0 <raise>
 8004718:	2001      	movs	r0, #1
 800471a:	f7fc f921 	bl	8000960 <_exit>
	...

08004720 <__sflush_r>:
 8004720:	898a      	ldrh	r2, [r1, #12]
 8004722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004726:	4605      	mov	r5, r0
 8004728:	0710      	lsls	r0, r2, #28
 800472a:	460c      	mov	r4, r1
 800472c:	d458      	bmi.n	80047e0 <__sflush_r+0xc0>
 800472e:	684b      	ldr	r3, [r1, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	dc05      	bgt.n	8004740 <__sflush_r+0x20>
 8004734:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004736:	2b00      	cmp	r3, #0
 8004738:	dc02      	bgt.n	8004740 <__sflush_r+0x20>
 800473a:	2000      	movs	r0, #0
 800473c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004742:	2e00      	cmp	r6, #0
 8004744:	d0f9      	beq.n	800473a <__sflush_r+0x1a>
 8004746:	2300      	movs	r3, #0
 8004748:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800474c:	682f      	ldr	r7, [r5, #0]
 800474e:	602b      	str	r3, [r5, #0]
 8004750:	d032      	beq.n	80047b8 <__sflush_r+0x98>
 8004752:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004754:	89a3      	ldrh	r3, [r4, #12]
 8004756:	075a      	lsls	r2, r3, #29
 8004758:	d505      	bpl.n	8004766 <__sflush_r+0x46>
 800475a:	6863      	ldr	r3, [r4, #4]
 800475c:	1ac0      	subs	r0, r0, r3
 800475e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004760:	b10b      	cbz	r3, 8004766 <__sflush_r+0x46>
 8004762:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004764:	1ac0      	subs	r0, r0, r3
 8004766:	2300      	movs	r3, #0
 8004768:	4602      	mov	r2, r0
 800476a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800476c:	6a21      	ldr	r1, [r4, #32]
 800476e:	4628      	mov	r0, r5
 8004770:	47b0      	blx	r6
 8004772:	1c43      	adds	r3, r0, #1
 8004774:	89a3      	ldrh	r3, [r4, #12]
 8004776:	d106      	bne.n	8004786 <__sflush_r+0x66>
 8004778:	6829      	ldr	r1, [r5, #0]
 800477a:	291d      	cmp	r1, #29
 800477c:	d82c      	bhi.n	80047d8 <__sflush_r+0xb8>
 800477e:	4a2a      	ldr	r2, [pc, #168]	; (8004828 <__sflush_r+0x108>)
 8004780:	40ca      	lsrs	r2, r1
 8004782:	07d6      	lsls	r6, r2, #31
 8004784:	d528      	bpl.n	80047d8 <__sflush_r+0xb8>
 8004786:	2200      	movs	r2, #0
 8004788:	6062      	str	r2, [r4, #4]
 800478a:	04d9      	lsls	r1, r3, #19
 800478c:	6922      	ldr	r2, [r4, #16]
 800478e:	6022      	str	r2, [r4, #0]
 8004790:	d504      	bpl.n	800479c <__sflush_r+0x7c>
 8004792:	1c42      	adds	r2, r0, #1
 8004794:	d101      	bne.n	800479a <__sflush_r+0x7a>
 8004796:	682b      	ldr	r3, [r5, #0]
 8004798:	b903      	cbnz	r3, 800479c <__sflush_r+0x7c>
 800479a:	6560      	str	r0, [r4, #84]	; 0x54
 800479c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800479e:	602f      	str	r7, [r5, #0]
 80047a0:	2900      	cmp	r1, #0
 80047a2:	d0ca      	beq.n	800473a <__sflush_r+0x1a>
 80047a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047a8:	4299      	cmp	r1, r3
 80047aa:	d002      	beq.n	80047b2 <__sflush_r+0x92>
 80047ac:	4628      	mov	r0, r5
 80047ae:	f7ff fc49 	bl	8004044 <_free_r>
 80047b2:	2000      	movs	r0, #0
 80047b4:	6360      	str	r0, [r4, #52]	; 0x34
 80047b6:	e7c1      	b.n	800473c <__sflush_r+0x1c>
 80047b8:	6a21      	ldr	r1, [r4, #32]
 80047ba:	2301      	movs	r3, #1
 80047bc:	4628      	mov	r0, r5
 80047be:	47b0      	blx	r6
 80047c0:	1c41      	adds	r1, r0, #1
 80047c2:	d1c7      	bne.n	8004754 <__sflush_r+0x34>
 80047c4:	682b      	ldr	r3, [r5, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0c4      	beq.n	8004754 <__sflush_r+0x34>
 80047ca:	2b1d      	cmp	r3, #29
 80047cc:	d001      	beq.n	80047d2 <__sflush_r+0xb2>
 80047ce:	2b16      	cmp	r3, #22
 80047d0:	d101      	bne.n	80047d6 <__sflush_r+0xb6>
 80047d2:	602f      	str	r7, [r5, #0]
 80047d4:	e7b1      	b.n	800473a <__sflush_r+0x1a>
 80047d6:	89a3      	ldrh	r3, [r4, #12]
 80047d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047dc:	81a3      	strh	r3, [r4, #12]
 80047de:	e7ad      	b.n	800473c <__sflush_r+0x1c>
 80047e0:	690f      	ldr	r7, [r1, #16]
 80047e2:	2f00      	cmp	r7, #0
 80047e4:	d0a9      	beq.n	800473a <__sflush_r+0x1a>
 80047e6:	0793      	lsls	r3, r2, #30
 80047e8:	680e      	ldr	r6, [r1, #0]
 80047ea:	bf08      	it	eq
 80047ec:	694b      	ldreq	r3, [r1, #20]
 80047ee:	600f      	str	r7, [r1, #0]
 80047f0:	bf18      	it	ne
 80047f2:	2300      	movne	r3, #0
 80047f4:	eba6 0807 	sub.w	r8, r6, r7
 80047f8:	608b      	str	r3, [r1, #8]
 80047fa:	f1b8 0f00 	cmp.w	r8, #0
 80047fe:	dd9c      	ble.n	800473a <__sflush_r+0x1a>
 8004800:	6a21      	ldr	r1, [r4, #32]
 8004802:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004804:	4643      	mov	r3, r8
 8004806:	463a      	mov	r2, r7
 8004808:	4628      	mov	r0, r5
 800480a:	47b0      	blx	r6
 800480c:	2800      	cmp	r0, #0
 800480e:	dc06      	bgt.n	800481e <__sflush_r+0xfe>
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004816:	81a3      	strh	r3, [r4, #12]
 8004818:	f04f 30ff 	mov.w	r0, #4294967295
 800481c:	e78e      	b.n	800473c <__sflush_r+0x1c>
 800481e:	4407      	add	r7, r0
 8004820:	eba8 0800 	sub.w	r8, r8, r0
 8004824:	e7e9      	b.n	80047fa <__sflush_r+0xda>
 8004826:	bf00      	nop
 8004828:	20400001 	.word	0x20400001

0800482c <_fflush_r>:
 800482c:	b538      	push	{r3, r4, r5, lr}
 800482e:	690b      	ldr	r3, [r1, #16]
 8004830:	4605      	mov	r5, r0
 8004832:	460c      	mov	r4, r1
 8004834:	b913      	cbnz	r3, 800483c <_fflush_r+0x10>
 8004836:	2500      	movs	r5, #0
 8004838:	4628      	mov	r0, r5
 800483a:	bd38      	pop	{r3, r4, r5, pc}
 800483c:	b118      	cbz	r0, 8004846 <_fflush_r+0x1a>
 800483e:	6983      	ldr	r3, [r0, #24]
 8004840:	b90b      	cbnz	r3, 8004846 <_fflush_r+0x1a>
 8004842:	f000 f887 	bl	8004954 <__sinit>
 8004846:	4b14      	ldr	r3, [pc, #80]	; (8004898 <_fflush_r+0x6c>)
 8004848:	429c      	cmp	r4, r3
 800484a:	d11b      	bne.n	8004884 <_fflush_r+0x58>
 800484c:	686c      	ldr	r4, [r5, #4]
 800484e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0ef      	beq.n	8004836 <_fflush_r+0xa>
 8004856:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004858:	07d0      	lsls	r0, r2, #31
 800485a:	d404      	bmi.n	8004866 <_fflush_r+0x3a>
 800485c:	0599      	lsls	r1, r3, #22
 800485e:	d402      	bmi.n	8004866 <_fflush_r+0x3a>
 8004860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004862:	f000 f915 	bl	8004a90 <__retarget_lock_acquire_recursive>
 8004866:	4628      	mov	r0, r5
 8004868:	4621      	mov	r1, r4
 800486a:	f7ff ff59 	bl	8004720 <__sflush_r>
 800486e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004870:	07da      	lsls	r2, r3, #31
 8004872:	4605      	mov	r5, r0
 8004874:	d4e0      	bmi.n	8004838 <_fflush_r+0xc>
 8004876:	89a3      	ldrh	r3, [r4, #12]
 8004878:	059b      	lsls	r3, r3, #22
 800487a:	d4dd      	bmi.n	8004838 <_fflush_r+0xc>
 800487c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800487e:	f000 f908 	bl	8004a92 <__retarget_lock_release_recursive>
 8004882:	e7d9      	b.n	8004838 <_fflush_r+0xc>
 8004884:	4b05      	ldr	r3, [pc, #20]	; (800489c <_fflush_r+0x70>)
 8004886:	429c      	cmp	r4, r3
 8004888:	d101      	bne.n	800488e <_fflush_r+0x62>
 800488a:	68ac      	ldr	r4, [r5, #8]
 800488c:	e7df      	b.n	800484e <_fflush_r+0x22>
 800488e:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <_fflush_r+0x74>)
 8004890:	429c      	cmp	r4, r3
 8004892:	bf08      	it	eq
 8004894:	68ec      	ldreq	r4, [r5, #12]
 8004896:	e7da      	b.n	800484e <_fflush_r+0x22>
 8004898:	08005104 	.word	0x08005104
 800489c:	08005124 	.word	0x08005124
 80048a0:	080050e4 	.word	0x080050e4

080048a4 <std>:
 80048a4:	2300      	movs	r3, #0
 80048a6:	b510      	push	{r4, lr}
 80048a8:	4604      	mov	r4, r0
 80048aa:	e9c0 3300 	strd	r3, r3, [r0]
 80048ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048b2:	6083      	str	r3, [r0, #8]
 80048b4:	8181      	strh	r1, [r0, #12]
 80048b6:	6643      	str	r3, [r0, #100]	; 0x64
 80048b8:	81c2      	strh	r2, [r0, #14]
 80048ba:	6183      	str	r3, [r0, #24]
 80048bc:	4619      	mov	r1, r3
 80048be:	2208      	movs	r2, #8
 80048c0:	305c      	adds	r0, #92	; 0x5c
 80048c2:	f7fd fdc3 	bl	800244c <memset>
 80048c6:	4b05      	ldr	r3, [pc, #20]	; (80048dc <std+0x38>)
 80048c8:	6263      	str	r3, [r4, #36]	; 0x24
 80048ca:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <std+0x3c>)
 80048cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <std+0x40>)
 80048d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048d2:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <std+0x44>)
 80048d4:	6224      	str	r4, [r4, #32]
 80048d6:	6323      	str	r3, [r4, #48]	; 0x30
 80048d8:	bd10      	pop	{r4, pc}
 80048da:	bf00      	nop
 80048dc:	08004be9 	.word	0x08004be9
 80048e0:	08004c0b 	.word	0x08004c0b
 80048e4:	08004c43 	.word	0x08004c43
 80048e8:	08004c67 	.word	0x08004c67

080048ec <_cleanup_r>:
 80048ec:	4901      	ldr	r1, [pc, #4]	; (80048f4 <_cleanup_r+0x8>)
 80048ee:	f000 b8af 	b.w	8004a50 <_fwalk_reent>
 80048f2:	bf00      	nop
 80048f4:	0800482d 	.word	0x0800482d

080048f8 <__sfmoreglue>:
 80048f8:	b570      	push	{r4, r5, r6, lr}
 80048fa:	2268      	movs	r2, #104	; 0x68
 80048fc:	1e4d      	subs	r5, r1, #1
 80048fe:	4355      	muls	r5, r2
 8004900:	460e      	mov	r6, r1
 8004902:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004906:	f7ff fc09 	bl	800411c <_malloc_r>
 800490a:	4604      	mov	r4, r0
 800490c:	b140      	cbz	r0, 8004920 <__sfmoreglue+0x28>
 800490e:	2100      	movs	r1, #0
 8004910:	e9c0 1600 	strd	r1, r6, [r0]
 8004914:	300c      	adds	r0, #12
 8004916:	60a0      	str	r0, [r4, #8]
 8004918:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800491c:	f7fd fd96 	bl	800244c <memset>
 8004920:	4620      	mov	r0, r4
 8004922:	bd70      	pop	{r4, r5, r6, pc}

08004924 <__sfp_lock_acquire>:
 8004924:	4801      	ldr	r0, [pc, #4]	; (800492c <__sfp_lock_acquire+0x8>)
 8004926:	f000 b8b3 	b.w	8004a90 <__retarget_lock_acquire_recursive>
 800492a:	bf00      	nop
 800492c:	20000259 	.word	0x20000259

08004930 <__sfp_lock_release>:
 8004930:	4801      	ldr	r0, [pc, #4]	; (8004938 <__sfp_lock_release+0x8>)
 8004932:	f000 b8ae 	b.w	8004a92 <__retarget_lock_release_recursive>
 8004936:	bf00      	nop
 8004938:	20000259 	.word	0x20000259

0800493c <__sinit_lock_acquire>:
 800493c:	4801      	ldr	r0, [pc, #4]	; (8004944 <__sinit_lock_acquire+0x8>)
 800493e:	f000 b8a7 	b.w	8004a90 <__retarget_lock_acquire_recursive>
 8004942:	bf00      	nop
 8004944:	2000025a 	.word	0x2000025a

08004948 <__sinit_lock_release>:
 8004948:	4801      	ldr	r0, [pc, #4]	; (8004950 <__sinit_lock_release+0x8>)
 800494a:	f000 b8a2 	b.w	8004a92 <__retarget_lock_release_recursive>
 800494e:	bf00      	nop
 8004950:	2000025a 	.word	0x2000025a

08004954 <__sinit>:
 8004954:	b510      	push	{r4, lr}
 8004956:	4604      	mov	r4, r0
 8004958:	f7ff fff0 	bl	800493c <__sinit_lock_acquire>
 800495c:	69a3      	ldr	r3, [r4, #24]
 800495e:	b11b      	cbz	r3, 8004968 <__sinit+0x14>
 8004960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004964:	f7ff bff0 	b.w	8004948 <__sinit_lock_release>
 8004968:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800496c:	6523      	str	r3, [r4, #80]	; 0x50
 800496e:	4b13      	ldr	r3, [pc, #76]	; (80049bc <__sinit+0x68>)
 8004970:	4a13      	ldr	r2, [pc, #76]	; (80049c0 <__sinit+0x6c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	62a2      	str	r2, [r4, #40]	; 0x28
 8004976:	42a3      	cmp	r3, r4
 8004978:	bf04      	itt	eq
 800497a:	2301      	moveq	r3, #1
 800497c:	61a3      	streq	r3, [r4, #24]
 800497e:	4620      	mov	r0, r4
 8004980:	f000 f820 	bl	80049c4 <__sfp>
 8004984:	6060      	str	r0, [r4, #4]
 8004986:	4620      	mov	r0, r4
 8004988:	f000 f81c 	bl	80049c4 <__sfp>
 800498c:	60a0      	str	r0, [r4, #8]
 800498e:	4620      	mov	r0, r4
 8004990:	f000 f818 	bl	80049c4 <__sfp>
 8004994:	2200      	movs	r2, #0
 8004996:	60e0      	str	r0, [r4, #12]
 8004998:	2104      	movs	r1, #4
 800499a:	6860      	ldr	r0, [r4, #4]
 800499c:	f7ff ff82 	bl	80048a4 <std>
 80049a0:	68a0      	ldr	r0, [r4, #8]
 80049a2:	2201      	movs	r2, #1
 80049a4:	2109      	movs	r1, #9
 80049a6:	f7ff ff7d 	bl	80048a4 <std>
 80049aa:	68e0      	ldr	r0, [r4, #12]
 80049ac:	2202      	movs	r2, #2
 80049ae:	2112      	movs	r1, #18
 80049b0:	f7ff ff78 	bl	80048a4 <std>
 80049b4:	2301      	movs	r3, #1
 80049b6:	61a3      	str	r3, [r4, #24]
 80049b8:	e7d2      	b.n	8004960 <__sinit+0xc>
 80049ba:	bf00      	nop
 80049bc:	08004d68 	.word	0x08004d68
 80049c0:	080048ed 	.word	0x080048ed

080049c4 <__sfp>:
 80049c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c6:	4607      	mov	r7, r0
 80049c8:	f7ff ffac 	bl	8004924 <__sfp_lock_acquire>
 80049cc:	4b1e      	ldr	r3, [pc, #120]	; (8004a48 <__sfp+0x84>)
 80049ce:	681e      	ldr	r6, [r3, #0]
 80049d0:	69b3      	ldr	r3, [r6, #24]
 80049d2:	b913      	cbnz	r3, 80049da <__sfp+0x16>
 80049d4:	4630      	mov	r0, r6
 80049d6:	f7ff ffbd 	bl	8004954 <__sinit>
 80049da:	3648      	adds	r6, #72	; 0x48
 80049dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	d503      	bpl.n	80049ec <__sfp+0x28>
 80049e4:	6833      	ldr	r3, [r6, #0]
 80049e6:	b30b      	cbz	r3, 8004a2c <__sfp+0x68>
 80049e8:	6836      	ldr	r6, [r6, #0]
 80049ea:	e7f7      	b.n	80049dc <__sfp+0x18>
 80049ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80049f0:	b9d5      	cbnz	r5, 8004a28 <__sfp+0x64>
 80049f2:	4b16      	ldr	r3, [pc, #88]	; (8004a4c <__sfp+0x88>)
 80049f4:	60e3      	str	r3, [r4, #12]
 80049f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80049fa:	6665      	str	r5, [r4, #100]	; 0x64
 80049fc:	f000 f847 	bl	8004a8e <__retarget_lock_init_recursive>
 8004a00:	f7ff ff96 	bl	8004930 <__sfp_lock_release>
 8004a04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a0c:	6025      	str	r5, [r4, #0]
 8004a0e:	61a5      	str	r5, [r4, #24]
 8004a10:	2208      	movs	r2, #8
 8004a12:	4629      	mov	r1, r5
 8004a14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a18:	f7fd fd18 	bl	800244c <memset>
 8004a1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a24:	4620      	mov	r0, r4
 8004a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a28:	3468      	adds	r4, #104	; 0x68
 8004a2a:	e7d9      	b.n	80049e0 <__sfp+0x1c>
 8004a2c:	2104      	movs	r1, #4
 8004a2e:	4638      	mov	r0, r7
 8004a30:	f7ff ff62 	bl	80048f8 <__sfmoreglue>
 8004a34:	4604      	mov	r4, r0
 8004a36:	6030      	str	r0, [r6, #0]
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	d1d5      	bne.n	80049e8 <__sfp+0x24>
 8004a3c:	f7ff ff78 	bl	8004930 <__sfp_lock_release>
 8004a40:	230c      	movs	r3, #12
 8004a42:	603b      	str	r3, [r7, #0]
 8004a44:	e7ee      	b.n	8004a24 <__sfp+0x60>
 8004a46:	bf00      	nop
 8004a48:	08004d68 	.word	0x08004d68
 8004a4c:	ffff0001 	.word	0xffff0001

08004a50 <_fwalk_reent>:
 8004a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a54:	4606      	mov	r6, r0
 8004a56:	4688      	mov	r8, r1
 8004a58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a5c:	2700      	movs	r7, #0
 8004a5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a62:	f1b9 0901 	subs.w	r9, r9, #1
 8004a66:	d505      	bpl.n	8004a74 <_fwalk_reent+0x24>
 8004a68:	6824      	ldr	r4, [r4, #0]
 8004a6a:	2c00      	cmp	r4, #0
 8004a6c:	d1f7      	bne.n	8004a5e <_fwalk_reent+0xe>
 8004a6e:	4638      	mov	r0, r7
 8004a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a74:	89ab      	ldrh	r3, [r5, #12]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d907      	bls.n	8004a8a <_fwalk_reent+0x3a>
 8004a7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	d003      	beq.n	8004a8a <_fwalk_reent+0x3a>
 8004a82:	4629      	mov	r1, r5
 8004a84:	4630      	mov	r0, r6
 8004a86:	47c0      	blx	r8
 8004a88:	4307      	orrs	r7, r0
 8004a8a:	3568      	adds	r5, #104	; 0x68
 8004a8c:	e7e9      	b.n	8004a62 <_fwalk_reent+0x12>

08004a8e <__retarget_lock_init_recursive>:
 8004a8e:	4770      	bx	lr

08004a90 <__retarget_lock_acquire_recursive>:
 8004a90:	4770      	bx	lr

08004a92 <__retarget_lock_release_recursive>:
 8004a92:	4770      	bx	lr

08004a94 <__swhatbuf_r>:
 8004a94:	b570      	push	{r4, r5, r6, lr}
 8004a96:	460e      	mov	r6, r1
 8004a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a9c:	2900      	cmp	r1, #0
 8004a9e:	b096      	sub	sp, #88	; 0x58
 8004aa0:	4614      	mov	r4, r2
 8004aa2:	461d      	mov	r5, r3
 8004aa4:	da08      	bge.n	8004ab8 <__swhatbuf_r+0x24>
 8004aa6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	602a      	str	r2, [r5, #0]
 8004aae:	061a      	lsls	r2, r3, #24
 8004ab0:	d410      	bmi.n	8004ad4 <__swhatbuf_r+0x40>
 8004ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ab6:	e00e      	b.n	8004ad6 <__swhatbuf_r+0x42>
 8004ab8:	466a      	mov	r2, sp
 8004aba:	f000 f8fb 	bl	8004cb4 <_fstat_r>
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	dbf1      	blt.n	8004aa6 <__swhatbuf_r+0x12>
 8004ac2:	9a01      	ldr	r2, [sp, #4]
 8004ac4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ac8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004acc:	425a      	negs	r2, r3
 8004ace:	415a      	adcs	r2, r3
 8004ad0:	602a      	str	r2, [r5, #0]
 8004ad2:	e7ee      	b.n	8004ab2 <__swhatbuf_r+0x1e>
 8004ad4:	2340      	movs	r3, #64	; 0x40
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	b016      	add	sp, #88	; 0x58
 8004adc:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ae0 <__smakebuf_r>:
 8004ae0:	898b      	ldrh	r3, [r1, #12]
 8004ae2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ae4:	079d      	lsls	r5, r3, #30
 8004ae6:	4606      	mov	r6, r0
 8004ae8:	460c      	mov	r4, r1
 8004aea:	d507      	bpl.n	8004afc <__smakebuf_r+0x1c>
 8004aec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004af0:	6023      	str	r3, [r4, #0]
 8004af2:	6123      	str	r3, [r4, #16]
 8004af4:	2301      	movs	r3, #1
 8004af6:	6163      	str	r3, [r4, #20]
 8004af8:	b002      	add	sp, #8
 8004afa:	bd70      	pop	{r4, r5, r6, pc}
 8004afc:	ab01      	add	r3, sp, #4
 8004afe:	466a      	mov	r2, sp
 8004b00:	f7ff ffc8 	bl	8004a94 <__swhatbuf_r>
 8004b04:	9900      	ldr	r1, [sp, #0]
 8004b06:	4605      	mov	r5, r0
 8004b08:	4630      	mov	r0, r6
 8004b0a:	f7ff fb07 	bl	800411c <_malloc_r>
 8004b0e:	b948      	cbnz	r0, 8004b24 <__smakebuf_r+0x44>
 8004b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b14:	059a      	lsls	r2, r3, #22
 8004b16:	d4ef      	bmi.n	8004af8 <__smakebuf_r+0x18>
 8004b18:	f023 0303 	bic.w	r3, r3, #3
 8004b1c:	f043 0302 	orr.w	r3, r3, #2
 8004b20:	81a3      	strh	r3, [r4, #12]
 8004b22:	e7e3      	b.n	8004aec <__smakebuf_r+0xc>
 8004b24:	4b0d      	ldr	r3, [pc, #52]	; (8004b5c <__smakebuf_r+0x7c>)
 8004b26:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b28:	89a3      	ldrh	r3, [r4, #12]
 8004b2a:	6020      	str	r0, [r4, #0]
 8004b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b30:	81a3      	strh	r3, [r4, #12]
 8004b32:	9b00      	ldr	r3, [sp, #0]
 8004b34:	6163      	str	r3, [r4, #20]
 8004b36:	9b01      	ldr	r3, [sp, #4]
 8004b38:	6120      	str	r0, [r4, #16]
 8004b3a:	b15b      	cbz	r3, 8004b54 <__smakebuf_r+0x74>
 8004b3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b40:	4630      	mov	r0, r6
 8004b42:	f000 f8c9 	bl	8004cd8 <_isatty_r>
 8004b46:	b128      	cbz	r0, 8004b54 <__smakebuf_r+0x74>
 8004b48:	89a3      	ldrh	r3, [r4, #12]
 8004b4a:	f023 0303 	bic.w	r3, r3, #3
 8004b4e:	f043 0301 	orr.w	r3, r3, #1
 8004b52:	81a3      	strh	r3, [r4, #12]
 8004b54:	89a0      	ldrh	r0, [r4, #12]
 8004b56:	4305      	orrs	r5, r0
 8004b58:	81a5      	strh	r5, [r4, #12]
 8004b5a:	e7cd      	b.n	8004af8 <__smakebuf_r+0x18>
 8004b5c:	080048ed 	.word	0x080048ed

08004b60 <_raise_r>:
 8004b60:	291f      	cmp	r1, #31
 8004b62:	b538      	push	{r3, r4, r5, lr}
 8004b64:	4604      	mov	r4, r0
 8004b66:	460d      	mov	r5, r1
 8004b68:	d904      	bls.n	8004b74 <_raise_r+0x14>
 8004b6a:	2316      	movs	r3, #22
 8004b6c:	6003      	str	r3, [r0, #0]
 8004b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b72:	bd38      	pop	{r3, r4, r5, pc}
 8004b74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004b76:	b112      	cbz	r2, 8004b7e <_raise_r+0x1e>
 8004b78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004b7c:	b94b      	cbnz	r3, 8004b92 <_raise_r+0x32>
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f000 f830 	bl	8004be4 <_getpid_r>
 8004b84:	462a      	mov	r2, r5
 8004b86:	4601      	mov	r1, r0
 8004b88:	4620      	mov	r0, r4
 8004b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b8e:	f000 b817 	b.w	8004bc0 <_kill_r>
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d00a      	beq.n	8004bac <_raise_r+0x4c>
 8004b96:	1c59      	adds	r1, r3, #1
 8004b98:	d103      	bne.n	8004ba2 <_raise_r+0x42>
 8004b9a:	2316      	movs	r3, #22
 8004b9c:	6003      	str	r3, [r0, #0]
 8004b9e:	2001      	movs	r0, #1
 8004ba0:	e7e7      	b.n	8004b72 <_raise_r+0x12>
 8004ba2:	2400      	movs	r4, #0
 8004ba4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004ba8:	4628      	mov	r0, r5
 8004baa:	4798      	blx	r3
 8004bac:	2000      	movs	r0, #0
 8004bae:	e7e0      	b.n	8004b72 <_raise_r+0x12>

08004bb0 <raise>:
 8004bb0:	4b02      	ldr	r3, [pc, #8]	; (8004bbc <raise+0xc>)
 8004bb2:	4601      	mov	r1, r0
 8004bb4:	6818      	ldr	r0, [r3, #0]
 8004bb6:	f7ff bfd3 	b.w	8004b60 <_raise_r>
 8004bba:	bf00      	nop
 8004bbc:	2000000c 	.word	0x2000000c

08004bc0 <_kill_r>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	4d07      	ldr	r5, [pc, #28]	; (8004be0 <_kill_r+0x20>)
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	4608      	mov	r0, r1
 8004bca:	4611      	mov	r1, r2
 8004bcc:	602b      	str	r3, [r5, #0]
 8004bce:	f7fb feb7 	bl	8000940 <_kill>
 8004bd2:	1c43      	adds	r3, r0, #1
 8004bd4:	d102      	bne.n	8004bdc <_kill_r+0x1c>
 8004bd6:	682b      	ldr	r3, [r5, #0]
 8004bd8:	b103      	cbz	r3, 8004bdc <_kill_r+0x1c>
 8004bda:	6023      	str	r3, [r4, #0]
 8004bdc:	bd38      	pop	{r3, r4, r5, pc}
 8004bde:	bf00      	nop
 8004be0:	20000254 	.word	0x20000254

08004be4 <_getpid_r>:
 8004be4:	f7fb bea4 	b.w	8000930 <_getpid>

08004be8 <__sread>:
 8004be8:	b510      	push	{r4, lr}
 8004bea:	460c      	mov	r4, r1
 8004bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bf0:	f000 f894 	bl	8004d1c <_read_r>
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	bfab      	itete	ge
 8004bf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bfa:	89a3      	ldrhlt	r3, [r4, #12]
 8004bfc:	181b      	addge	r3, r3, r0
 8004bfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c02:	bfac      	ite	ge
 8004c04:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c06:	81a3      	strhlt	r3, [r4, #12]
 8004c08:	bd10      	pop	{r4, pc}

08004c0a <__swrite>:
 8004c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c0e:	461f      	mov	r7, r3
 8004c10:	898b      	ldrh	r3, [r1, #12]
 8004c12:	05db      	lsls	r3, r3, #23
 8004c14:	4605      	mov	r5, r0
 8004c16:	460c      	mov	r4, r1
 8004c18:	4616      	mov	r6, r2
 8004c1a:	d505      	bpl.n	8004c28 <__swrite+0x1e>
 8004c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c20:	2302      	movs	r3, #2
 8004c22:	2200      	movs	r2, #0
 8004c24:	f000 f868 	bl	8004cf8 <_lseek_r>
 8004c28:	89a3      	ldrh	r3, [r4, #12]
 8004c2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c32:	81a3      	strh	r3, [r4, #12]
 8004c34:	4632      	mov	r2, r6
 8004c36:	463b      	mov	r3, r7
 8004c38:	4628      	mov	r0, r5
 8004c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c3e:	f000 b817 	b.w	8004c70 <_write_r>

08004c42 <__sseek>:
 8004c42:	b510      	push	{r4, lr}
 8004c44:	460c      	mov	r4, r1
 8004c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c4a:	f000 f855 	bl	8004cf8 <_lseek_r>
 8004c4e:	1c43      	adds	r3, r0, #1
 8004c50:	89a3      	ldrh	r3, [r4, #12]
 8004c52:	bf15      	itete	ne
 8004c54:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c5e:	81a3      	strheq	r3, [r4, #12]
 8004c60:	bf18      	it	ne
 8004c62:	81a3      	strhne	r3, [r4, #12]
 8004c64:	bd10      	pop	{r4, pc}

08004c66 <__sclose>:
 8004c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c6a:	f000 b813 	b.w	8004c94 <_close_r>
	...

08004c70 <_write_r>:
 8004c70:	b538      	push	{r3, r4, r5, lr}
 8004c72:	4d07      	ldr	r5, [pc, #28]	; (8004c90 <_write_r+0x20>)
 8004c74:	4604      	mov	r4, r0
 8004c76:	4608      	mov	r0, r1
 8004c78:	4611      	mov	r1, r2
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	602a      	str	r2, [r5, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f7fb fe95 	bl	80009ae <_write>
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	d102      	bne.n	8004c8e <_write_r+0x1e>
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	b103      	cbz	r3, 8004c8e <_write_r+0x1e>
 8004c8c:	6023      	str	r3, [r4, #0]
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
 8004c90:	20000254 	.word	0x20000254

08004c94 <_close_r>:
 8004c94:	b538      	push	{r3, r4, r5, lr}
 8004c96:	4d06      	ldr	r5, [pc, #24]	; (8004cb0 <_close_r+0x1c>)
 8004c98:	2300      	movs	r3, #0
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	4608      	mov	r0, r1
 8004c9e:	602b      	str	r3, [r5, #0]
 8004ca0:	f7fb fea1 	bl	80009e6 <_close>
 8004ca4:	1c43      	adds	r3, r0, #1
 8004ca6:	d102      	bne.n	8004cae <_close_r+0x1a>
 8004ca8:	682b      	ldr	r3, [r5, #0]
 8004caa:	b103      	cbz	r3, 8004cae <_close_r+0x1a>
 8004cac:	6023      	str	r3, [r4, #0]
 8004cae:	bd38      	pop	{r3, r4, r5, pc}
 8004cb0:	20000254 	.word	0x20000254

08004cb4 <_fstat_r>:
 8004cb4:	b538      	push	{r3, r4, r5, lr}
 8004cb6:	4d07      	ldr	r5, [pc, #28]	; (8004cd4 <_fstat_r+0x20>)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	4604      	mov	r4, r0
 8004cbc:	4608      	mov	r0, r1
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	602b      	str	r3, [r5, #0]
 8004cc2:	f7fb fe9c 	bl	80009fe <_fstat>
 8004cc6:	1c43      	adds	r3, r0, #1
 8004cc8:	d102      	bne.n	8004cd0 <_fstat_r+0x1c>
 8004cca:	682b      	ldr	r3, [r5, #0]
 8004ccc:	b103      	cbz	r3, 8004cd0 <_fstat_r+0x1c>
 8004cce:	6023      	str	r3, [r4, #0]
 8004cd0:	bd38      	pop	{r3, r4, r5, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000254 	.word	0x20000254

08004cd8 <_isatty_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	4d06      	ldr	r5, [pc, #24]	; (8004cf4 <_isatty_r+0x1c>)
 8004cdc:	2300      	movs	r3, #0
 8004cde:	4604      	mov	r4, r0
 8004ce0:	4608      	mov	r0, r1
 8004ce2:	602b      	str	r3, [r5, #0]
 8004ce4:	f7fb fe9b 	bl	8000a1e <_isatty>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	d102      	bne.n	8004cf2 <_isatty_r+0x1a>
 8004cec:	682b      	ldr	r3, [r5, #0]
 8004cee:	b103      	cbz	r3, 8004cf2 <_isatty_r+0x1a>
 8004cf0:	6023      	str	r3, [r4, #0]
 8004cf2:	bd38      	pop	{r3, r4, r5, pc}
 8004cf4:	20000254 	.word	0x20000254

08004cf8 <_lseek_r>:
 8004cf8:	b538      	push	{r3, r4, r5, lr}
 8004cfa:	4d07      	ldr	r5, [pc, #28]	; (8004d18 <_lseek_r+0x20>)
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	4608      	mov	r0, r1
 8004d00:	4611      	mov	r1, r2
 8004d02:	2200      	movs	r2, #0
 8004d04:	602a      	str	r2, [r5, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	f7fb fe94 	bl	8000a34 <_lseek>
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	d102      	bne.n	8004d16 <_lseek_r+0x1e>
 8004d10:	682b      	ldr	r3, [r5, #0]
 8004d12:	b103      	cbz	r3, 8004d16 <_lseek_r+0x1e>
 8004d14:	6023      	str	r3, [r4, #0]
 8004d16:	bd38      	pop	{r3, r4, r5, pc}
 8004d18:	20000254 	.word	0x20000254

08004d1c <_read_r>:
 8004d1c:	b538      	push	{r3, r4, r5, lr}
 8004d1e:	4d07      	ldr	r5, [pc, #28]	; (8004d3c <_read_r+0x20>)
 8004d20:	4604      	mov	r4, r0
 8004d22:	4608      	mov	r0, r1
 8004d24:	4611      	mov	r1, r2
 8004d26:	2200      	movs	r2, #0
 8004d28:	602a      	str	r2, [r5, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f7fb fe22 	bl	8000974 <_read>
 8004d30:	1c43      	adds	r3, r0, #1
 8004d32:	d102      	bne.n	8004d3a <_read_r+0x1e>
 8004d34:	682b      	ldr	r3, [r5, #0]
 8004d36:	b103      	cbz	r3, 8004d3a <_read_r+0x1e>
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	bd38      	pop	{r3, r4, r5, pc}
 8004d3c:	20000254 	.word	0x20000254

08004d40 <_init>:
 8004d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d42:	bf00      	nop
 8004d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d46:	bc08      	pop	{r3}
 8004d48:	469e      	mov	lr, r3
 8004d4a:	4770      	bx	lr

08004d4c <_fini>:
 8004d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4e:	bf00      	nop
 8004d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d52:	bc08      	pop	{r3}
 8004d54:	469e      	mov	lr, r3
 8004d56:	4770      	bx	lr
