
Serial03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003690  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003888  08003888  00013888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039a4  080039a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080039a4  080039a4  000139a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039ac  080039ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039ac  080039ac  000139ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039b0  080039b0  000139b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080039b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000070  08003a24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003a24  00020124  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5fc  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000178c  00000000  00000000  0002a69a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0002be28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  0002c570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a74  00000000  00000000  0002cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d9b  00000000  00000000  000536a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1019  00000000  00000000  0005d43f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e458  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d74  00000000  00000000  0014e4a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	08003870 	.word	0x08003870

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	08003870 	.word	0x08003870

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // Interrupção
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART4)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a0d      	ldr	r2, [pc, #52]	; (8000580 <HAL_UART_RxCpltCallback+0x44>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d114      	bne.n	8000578 <HAL_UART_RxCpltCallback+0x3c>
	{
		x++;
 800054e:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <HAL_UART_RxCpltCallback+0x48>)
 8000550:	edd3 7a00 	vldr	s15, [r3]
 8000554:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000558:	ee77 7a87 	vadd.f32	s15, s15, s14
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <HAL_UART_RxCpltCallback+0x48>)
 800055e:	edc3 7a00 	vstr	s15, [r3]
		dados = atol(buffer); //Quando ocorrer uma recepção em UART4, a interrupção é chamada, o valor de x é incrementado e os dados recebidos em buffer são atribuídos à variável dados, sendo convertidos de string para long int por meio da função atol
 8000562:	4809      	ldr	r0, [pc, #36]	; (8000588 <HAL_UART_RxCpltCallback+0x4c>)
 8000564:	f003 f8c2 	bl	80036ec <atol>
 8000568:	4603      	mov	r3, r0
 800056a:	4a08      	ldr	r2, [pc, #32]	; (800058c <HAL_UART_RxCpltCallback+0x50>)
 800056c:	6013      	str	r3, [r2, #0]
		dados = dados+1;
 800056e:	4b07      	ldr	r3, [pc, #28]	; (800058c <HAL_UART_RxCpltCallback+0x50>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	3301      	adds	r3, #1
 8000574:	4a05      	ldr	r2, [pc, #20]	; (800058c <HAL_UART_RxCpltCallback+0x50>)
 8000576:	6013      	str	r3, [r2, #0]
	}
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40004c00 	.word	0x40004c00
 8000584:	2000008c 	.word	0x2000008c
 8000588:	20000094 	.word	0x20000094
 800058c:	20000090 	.word	0x20000090

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 f9b3 	bl	80008fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f80e 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f898 	bl	80006d0 <MX_GPIO_Init>
  MX_UART4_Init();
 80005a0:	f000 f866 	bl	8000670 <MX_UART4_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive_IT(&huart4, buffer, 4);
 80005a4:	2204      	movs	r2, #4
 80005a6:	4902      	ldr	r1, [pc, #8]	; (80005b0 <main+0x20>)
 80005a8:	4802      	ldr	r0, [pc, #8]	; (80005b4 <main+0x24>)
 80005aa:	f001 fe5f 	bl	800226c <HAL_UART_Receive_IT>
 80005ae:	e7f9      	b.n	80005a4 <main+0x14>
 80005b0:	20000094 	.word	0x20000094
 80005b4:	20000098 	.word	0x20000098

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	2234      	movs	r2, #52	; 0x34
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 f8be 	bl	8003748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <SystemClock_Config+0xb0>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	4a21      	ldr	r2, [pc, #132]	; (8000668 <SystemClock_Config+0xb0>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	; 0x40
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <SystemClock_Config+0xb0>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f4:	4b1d      	ldr	r3, [pc, #116]	; (800066c <SystemClock_Config+0xb4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005fc:	4a1b      	ldr	r2, [pc, #108]	; (800066c <SystemClock_Config+0xb4>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b19      	ldr	r3, [pc, #100]	; (800066c <SystemClock_Config+0xb4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000610:	2302      	movs	r3, #2
 8000612:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000618:	2310      	movs	r3, #16
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800061c:	2300      	movs	r3, #0
 800061e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 031c 	add.w	r3, r7, #28
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fd17 	bl	8001058 <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000630:	f000 f866 	bl	8000700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f000 ffb0 	bl	80015b4 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800065a:	f000 f851 	bl	8000700 <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3750      	adds	r7, #80	; 0x50
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_UART4_Init+0x58>)
 8000676:	4a15      	ldr	r2, [pc, #84]	; (80006cc <MX_UART4_Init+0x5c>)
 8000678:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_UART4_Init+0x58>)
 800067c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000680:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_UART4_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_UART4_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_UART4_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_UART4_Init+0x58>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_UART4_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_UART4_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_UART4_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_UART4_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_UART4_Init+0x58>)
 80006b4:	f001 fd8c 	bl	80021d0 <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80006be:	f000 f81f 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000098 	.word	0x20000098
 80006cc:	40004c00 	.word	0x40004c00

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_GPIO_Init+0x2c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a08      	ldr	r2, [pc, #32]	; (80006fc <MX_GPIO_Init+0x2c>)
 80006dc:	f043 0308 	orr.w	r3, r3, #8
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_GPIO_Init+0x2c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800

08000700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
}
 8000706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000708:	e7fe      	b.n	8000708 <Error_Handler+0x8>
	...

0800070c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <HAL_MspInit+0x44>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <HAL_MspInit+0x44>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071c:	6413      	str	r3, [r2, #64]	; 0x40
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <HAL_MspInit+0x44>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_MspInit+0x44>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	4a08      	ldr	r2, [pc, #32]	; (8000750 <HAL_MspInit+0x44>)
 8000730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000734:	6453      	str	r3, [r2, #68]	; 0x44
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_MspInit+0x44>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800

08000754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b0ae      	sub	sp, #184	; 0xb8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2290      	movs	r2, #144	; 0x90
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f002 ffe7 	bl	8003748 <memset>
  if(huart->Instance==UART4)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a25      	ldr	r2, [pc, #148]	; (8000814 <HAL_UART_MspInit+0xc0>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d143      	bne.n	800080c <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000788:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800078a:	2300      	movs	r3, #0
 800078c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4618      	mov	r0, r3
 8000794:	f001 f8f4 	bl	8001980 <HAL_RCCEx_PeriphCLKConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800079e:	f7ff ffaf 	bl	8000700 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80007a2:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <HAL_UART_MspInit+0xc4>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	4a1c      	ldr	r2, [pc, #112]	; (8000818 <HAL_UART_MspInit+0xc4>)
 80007a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
 80007ae:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <HAL_UART_MspInit+0xc4>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <HAL_UART_MspInit+0xc4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a16      	ldr	r2, [pc, #88]	; (8000818 <HAL_UART_MspInit+0xc4>)
 80007c0:	f043 0308 	orr.w	r3, r3, #8
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <HAL_UART_MspInit+0xc4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0308 	and.w	r3, r3, #8
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007d2:	2303      	movs	r3, #3
 80007d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e4:	2303      	movs	r3, #3
 80007e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80007ea:	2308      	movs	r3, #8
 80007ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80007f4:	4619      	mov	r1, r3
 80007f6:	4809      	ldr	r0, [pc, #36]	; (800081c <HAL_UART_MspInit+0xc8>)
 80007f8:	f000 fa82 	bl	8000d00 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	2034      	movs	r0, #52	; 0x34
 8000802:	f000 f9b4 	bl	8000b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000806:	2034      	movs	r0, #52	; 0x34
 8000808:	f000 f9cd 	bl	8000ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800080c:	bf00      	nop
 800080e:	37b8      	adds	r7, #184	; 0xb8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40004c00 	.word	0x40004c00
 8000818:	40023800 	.word	0x40023800
 800081c:	40020c00 	.word	0x40020c00

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <NMI_Handler+0x4>

08000826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <MemManage_Handler+0x4>

08000832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <UsageFault_Handler+0x4>

0800083e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086c:	f000 f884 	bl	8000978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}

08000874 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <UART4_IRQHandler+0x10>)
 800087a:	f001 fd3b 	bl	80022f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000098 	.word	0x20000098

08000888 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <SystemInit+0x20>)
 800088e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000892:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <SystemInit+0x20>)
 8000894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008b0:	480d      	ldr	r0, [pc, #52]	; (80008e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008b2:	490e      	ldr	r1, [pc, #56]	; (80008ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008b4:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b8:	e002      	b.n	80008c0 <LoopCopyDataInit>

080008ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008be:	3304      	adds	r3, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c4:	d3f9      	bcc.n	80008ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c6:	4a0b      	ldr	r2, [pc, #44]	; (80008f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008c8:	4c0b      	ldr	r4, [pc, #44]	; (80008f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008cc:	e001      	b.n	80008d2 <LoopFillZerobss>

080008ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d0:	3204      	adds	r2, #4

080008d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d4:	d3fb      	bcc.n	80008ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008d6:	f7ff ffd7 	bl	8000888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008da:	f002 ff11 	bl	8003700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008de:	f7ff fe57 	bl	8000590 <main>
  bx  lr    
 80008e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008e4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008f0:	080039b4 	.word	0x080039b4
  ldr r2, =_sbss
 80008f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008f8:	20000124 	.word	0x20000124

080008fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC_IRQHandler>

080008fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000902:	2003      	movs	r0, #3
 8000904:	f000 f928 	bl	8000b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000908:	200f      	movs	r0, #15
 800090a:	f000 f805 	bl	8000918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800090e:	f7ff fefd 	bl	800070c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	bd80      	pop	{r7, pc}

08000918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_InitTick+0x54>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_InitTick+0x58>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000932:	fbb2 f3f3 	udiv	r3, r2, r3
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f943 	bl	8000bc2 <HAL_SYSTICK_Config>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e00e      	b.n	8000964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d80a      	bhi.n	8000962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	f000 f90b 	bl	8000b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000958:	4a06      	ldr	r2, [pc, #24]	; (8000974 <HAL_InitTick+0x5c>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	e000      	b.n	8000964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000000 	.word	0x20000000
 8000970:	20000008 	.word	0x20000008
 8000974:	20000004 	.word	0x20000004

08000978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_IncTick+0x20>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_IncTick+0x24>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_IncTick+0x24>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000008 	.word	0x20000008
 800099c:	20000120 	.word	0x20000120

080009a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return uwTick;
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <HAL_GetTick+0x14>)
 80009a6:	681b      	ldr	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000120 	.word	0x20000120

080009b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <__NVIC_SetPriorityGrouping+0x40>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d4:	4013      	ands	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009e2:	4313      	orrs	r3, r2
 80009e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e6:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <__NVIC_SetPriorityGrouping+0x40>)
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	60d3      	str	r3, [r2, #12]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00
 80009fc:	05fa0000 	.word	0x05fa0000

08000a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <__NVIC_GetPriorityGrouping+0x18>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	f003 0307 	and.w	r3, r3, #7
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	db0b      	blt.n	8000a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	f003 021f 	and.w	r2, r3, #31
 8000a34:	4907      	ldr	r1, [pc, #28]	; (8000a54 <__NVIC_EnableIRQ+0x38>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	095b      	lsrs	r3, r3, #5
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000e100 	.word	0xe000e100

08000a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db0a      	blt.n	8000a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	490c      	ldr	r1, [pc, #48]	; (8000aa4 <__NVIC_SetPriority+0x4c>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a80:	e00a      	b.n	8000a98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4908      	ldr	r1, [pc, #32]	; (8000aa8 <__NVIC_SetPriority+0x50>)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	0112      	lsls	r2, r2, #4
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	440b      	add	r3, r1
 8000a96:	761a      	strb	r2, [r3, #24]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000e100 	.word	0xe000e100
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f1c3 0307 	rsb	r3, r3, #7
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	bf28      	it	cs
 8000aca:	2304      	movcs	r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d902      	bls.n	8000adc <NVIC_EncodePriority+0x30>
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3b03      	subs	r3, #3
 8000ada:	e000      	b.n	8000ade <NVIC_EncodePriority+0x32>
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43da      	mvns	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	401a      	ands	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af4:	f04f 31ff 	mov.w	r1, #4294967295
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43d9      	mvns	r1, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	4313      	orrs	r3, r2
         );
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3724      	adds	r7, #36	; 0x24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b24:	d301      	bcc.n	8000b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00f      	b.n	8000b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <SysTick_Config+0x40>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b32:	210f      	movs	r1, #15
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	f7ff ff8e 	bl	8000a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <SysTick_Config+0x40>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <SysTick_Config+0x40>)
 8000b44:	2207      	movs	r2, #7
 8000b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	e000e010 	.word	0xe000e010

08000b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff29 	bl	80009b8 <__NVIC_SetPriorityGrouping>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
 8000b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b80:	f7ff ff3e 	bl	8000a00 <__NVIC_GetPriorityGrouping>
 8000b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	6978      	ldr	r0, [r7, #20]
 8000b8c:	f7ff ff8e 	bl	8000aac <NVIC_EncodePriority>
 8000b90:	4602      	mov	r2, r0
 8000b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff5d 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b9e:	bf00      	nop
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff31 	bl	8000a1c <__NVIC_EnableIRQ>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ffa2 	bl	8000b14 <SysTick_Config>
 8000bd0:	4603      	mov	r3, r0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b084      	sub	sp, #16
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000be8:	f7ff feda 	bl	80009a0 <HAL_GetTick>
 8000bec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d008      	beq.n	8000c0c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2280      	movs	r2, #128	; 0x80
 8000bfe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e052      	b.n	8000cb2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f022 0216 	bic.w	r2, r2, #22
 8000c1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	695a      	ldr	r2, [r3, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c2a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d103      	bne.n	8000c3c <HAL_DMA_Abort+0x62>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d007      	beq.n	8000c4c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f022 0208 	bic.w	r2, r2, #8
 8000c4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f022 0201 	bic.w	r2, r2, #1
 8000c5a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c5c:	e013      	b.n	8000c86 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c5e:	f7ff fe9f 	bl	80009a0 <HAL_GetTick>
 8000c62:	4602      	mov	r2, r0
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	2b05      	cmp	r3, #5
 8000c6a:	d90c      	bls.n	8000c86 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2220      	movs	r2, #32
 8000c70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2203      	movs	r2, #3
 8000c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000c82:	2303      	movs	r3, #3
 8000c84:	e015      	b.n	8000cb2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1e4      	bne.n	8000c5e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c98:	223f      	movs	r2, #63	; 0x3f
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d004      	beq.n	8000cd8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2280      	movs	r2, #128	; 0x80
 8000cd2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e00c      	b.n	8000cf2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2205      	movs	r2, #5
 8000cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 0201 	bic.w	r2, r2, #1
 8000cee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	e175      	b.n	800100c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d20:	2201      	movs	r2, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	f040 8164 	bne.w	8001006 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d005      	beq.n	8000d56 <HAL_GPIO_Init+0x56>
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d130      	bne.n	8000db8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	2203      	movs	r2, #3
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	091b      	lsrs	r3, r3, #4
 8000da2:	f003 0201 	and.w	r2, r3, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d017      	beq.n	8000df4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d123      	bne.n	8000e48 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	08da      	lsrs	r2, r3, #3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3208      	adds	r2, #8
 8000e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	691a      	ldr	r2, [r3, #16]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	08da      	lsrs	r2, r3, #3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3208      	adds	r2, #8
 8000e42:	69b9      	ldr	r1, [r7, #24]
 8000e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0203 	and.w	r2, r3, #3
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80be 	beq.w	8001006 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	4b66      	ldr	r3, [pc, #408]	; (8001024 <HAL_GPIO_Init+0x324>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a65      	ldr	r2, [pc, #404]	; (8001024 <HAL_GPIO_Init+0x324>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b63      	ldr	r3, [pc, #396]	; (8001024 <HAL_GPIO_Init+0x324>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ea2:	4a61      	ldr	r2, [pc, #388]	; (8001028 <HAL_GPIO_Init+0x328>)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a58      	ldr	r2, [pc, #352]	; (800102c <HAL_GPIO_Init+0x32c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d037      	beq.n	8000f3e <HAL_GPIO_Init+0x23e>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a57      	ldr	r2, [pc, #348]	; (8001030 <HAL_GPIO_Init+0x330>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d031      	beq.n	8000f3a <HAL_GPIO_Init+0x23a>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a56      	ldr	r2, [pc, #344]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d02b      	beq.n	8000f36 <HAL_GPIO_Init+0x236>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a55      	ldr	r2, [pc, #340]	; (8001038 <HAL_GPIO_Init+0x338>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d025      	beq.n	8000f32 <HAL_GPIO_Init+0x232>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a54      	ldr	r2, [pc, #336]	; (800103c <HAL_GPIO_Init+0x33c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d01f      	beq.n	8000f2e <HAL_GPIO_Init+0x22e>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a53      	ldr	r2, [pc, #332]	; (8001040 <HAL_GPIO_Init+0x340>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d019      	beq.n	8000f2a <HAL_GPIO_Init+0x22a>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a52      	ldr	r2, [pc, #328]	; (8001044 <HAL_GPIO_Init+0x344>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0x226>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a51      	ldr	r2, [pc, #324]	; (8001048 <HAL_GPIO_Init+0x348>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00d      	beq.n	8000f22 <HAL_GPIO_Init+0x222>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a50      	ldr	r2, [pc, #320]	; (800104c <HAL_GPIO_Init+0x34c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x21e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4f      	ldr	r2, [pc, #316]	; (8001050 <HAL_GPIO_Init+0x350>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d101      	bne.n	8000f1a <HAL_GPIO_Init+0x21a>
 8000f16:	2309      	movs	r3, #9
 8000f18:	e012      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f1a:	230a      	movs	r3, #10
 8000f1c:	e010      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f1e:	2308      	movs	r3, #8
 8000f20:	e00e      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f22:	2307      	movs	r3, #7
 8000f24:	e00c      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f26:	2306      	movs	r3, #6
 8000f28:	e00a      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f2a:	2305      	movs	r3, #5
 8000f2c:	e008      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f2e:	2304      	movs	r3, #4
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f32:	2303      	movs	r3, #3
 8000f34:	e004      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e002      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	69fa      	ldr	r2, [r7, #28]
 8000f42:	f002 0203 	and.w	r2, r2, #3
 8000f46:	0092      	lsls	r2, r2, #2
 8000f48:	4093      	lsls	r3, r2
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f50:	4935      	ldr	r1, [pc, #212]	; (8001028 <HAL_GPIO_Init+0x328>)
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3302      	adds	r3, #2
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f5e:	4b3d      	ldr	r3, [pc, #244]	; (8001054 <HAL_GPIO_Init+0x354>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f82:	4a34      	ldr	r2, [pc, #208]	; (8001054 <HAL_GPIO_Init+0x354>)
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f88:	4b32      	ldr	r3, [pc, #200]	; (8001054 <HAL_GPIO_Init+0x354>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fac:	4a29      	ldr	r2, [pc, #164]	; (8001054 <HAL_GPIO_Init+0x354>)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fb2:	4b28      	ldr	r3, [pc, #160]	; (8001054 <HAL_GPIO_Init+0x354>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fd6:	4a1f      	ldr	r2, [pc, #124]	; (8001054 <HAL_GPIO_Init+0x354>)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <HAL_GPIO_Init+0x354>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001000:	4a14      	ldr	r2, [pc, #80]	; (8001054 <HAL_GPIO_Init+0x354>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3301      	adds	r3, #1
 800100a:	61fb      	str	r3, [r7, #28]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	2b0f      	cmp	r3, #15
 8001010:	f67f ae86 	bls.w	8000d20 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3724      	adds	r7, #36	; 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	40013800 	.word	0x40013800
 800102c:	40020000 	.word	0x40020000
 8001030:	40020400 	.word	0x40020400
 8001034:	40020800 	.word	0x40020800
 8001038:	40020c00 	.word	0x40020c00
 800103c:	40021000 	.word	0x40021000
 8001040:	40021400 	.word	0x40021400
 8001044:	40021800 	.word	0x40021800
 8001048:	40021c00 	.word	0x40021c00
 800104c:	40022000 	.word	0x40022000
 8001050:	40022400 	.word	0x40022400
 8001054:	40013c00 	.word	0x40013c00

08001058 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001060:	2300      	movs	r3, #0
 8001062:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e29b      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 8087 	beq.w	800118a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800107c:	4b96      	ldr	r3, [pc, #600]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 030c 	and.w	r3, r3, #12
 8001084:	2b04      	cmp	r3, #4
 8001086:	d00c      	beq.n	80010a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001088:	4b93      	ldr	r3, [pc, #588]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 030c 	and.w	r3, r3, #12
 8001090:	2b08      	cmp	r3, #8
 8001092:	d112      	bne.n	80010ba <HAL_RCC_OscConfig+0x62>
 8001094:	4b90      	ldr	r3, [pc, #576]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010a0:	d10b      	bne.n	80010ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a2:	4b8d      	ldr	r3, [pc, #564]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d06c      	beq.n	8001188 <HAL_RCC_OscConfig+0x130>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d168      	bne.n	8001188 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e275      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c2:	d106      	bne.n	80010d2 <HAL_RCC_OscConfig+0x7a>
 80010c4:	4b84      	ldr	r3, [pc, #528]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a83      	ldr	r2, [pc, #524]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80010ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	e02e      	b.n	8001130 <HAL_RCC_OscConfig+0xd8>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x9c>
 80010da:	4b7f      	ldr	r3, [pc, #508]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a7e      	ldr	r2, [pc, #504]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80010e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	4b7c      	ldr	r3, [pc, #496]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a7b      	ldr	r2, [pc, #492]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80010ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e01d      	b.n	8001130 <HAL_RCC_OscConfig+0xd8>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0xc0>
 80010fe:	4b76      	ldr	r3, [pc, #472]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a75      	ldr	r2, [pc, #468]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	4b73      	ldr	r3, [pc, #460]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a72      	ldr	r2, [pc, #456]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e00b      	b.n	8001130 <HAL_RCC_OscConfig+0xd8>
 8001118:	4b6f      	ldr	r3, [pc, #444]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a6e      	ldr	r2, [pc, #440]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 800111e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	4b6c      	ldr	r3, [pc, #432]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a6b      	ldr	r2, [pc, #428]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 800112a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d013      	beq.n	8001160 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001138:	f7ff fc32 	bl	80009a0 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001140:	f7ff fc2e 	bl	80009a0 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b64      	cmp	r3, #100	; 0x64
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e229      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001152:	4b61      	ldr	r3, [pc, #388]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f0      	beq.n	8001140 <HAL_RCC_OscConfig+0xe8>
 800115e:	e014      	b.n	800118a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001160:	f7ff fc1e 	bl	80009a0 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001168:	f7ff fc1a 	bl	80009a0 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b64      	cmp	r3, #100	; 0x64
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e215      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117a:	4b57      	ldr	r3, [pc, #348]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f0      	bne.n	8001168 <HAL_RCC_OscConfig+0x110>
 8001186:	e000      	b.n	800118a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d069      	beq.n	800126a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001196:	4b50      	ldr	r3, [pc, #320]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 030c 	and.w	r3, r3, #12
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00b      	beq.n	80011ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011a2:	4b4d      	ldr	r3, [pc, #308]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d11c      	bne.n	80011e8 <HAL_RCC_OscConfig+0x190>
 80011ae:	4b4a      	ldr	r3, [pc, #296]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d116      	bne.n	80011e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ba:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d005      	beq.n	80011d2 <HAL_RCC_OscConfig+0x17a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d001      	beq.n	80011d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e1e9      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d2:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	493d      	ldr	r1, [pc, #244]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e6:	e040      	b.n	800126a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d023      	beq.n	8001238 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f0:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a38      	ldr	r2, [pc, #224]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fc:	f7ff fbd0 	bl	80009a0 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001204:	f7ff fbcc 	bl	80009a0 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e1c7      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001216:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f0      	beq.n	8001204 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001222:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	4929      	ldr	r1, [pc, #164]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001232:	4313      	orrs	r3, r2
 8001234:	600b      	str	r3, [r1, #0]
 8001236:	e018      	b.n	800126a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a26      	ldr	r2, [pc, #152]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 800123e:	f023 0301 	bic.w	r3, r3, #1
 8001242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001244:	f7ff fbac 	bl	80009a0 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800124c:	f7ff fba8 	bl	80009a0 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e1a3      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125e:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f0      	bne.n	800124c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d038      	beq.n	80012e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d019      	beq.n	80012b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001282:	4a15      	ldr	r2, [pc, #84]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800128a:	f7ff fb89 	bl	80009a0 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001292:	f7ff fb85 	bl	80009a0 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e180      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80012a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0f0      	beq.n	8001292 <HAL_RCC_OscConfig+0x23a>
 80012b0:	e01a      	b.n	80012e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80012b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b6:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80012b8:	f023 0301 	bic.w	r3, r3, #1
 80012bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012be:	f7ff fb6f 	bl	80009a0 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c4:	e00a      	b.n	80012dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c6:	f7ff fb6b 	bl	80009a0 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d903      	bls.n	80012dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e166      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
 80012d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012dc:	4b92      	ldr	r3, [pc, #584]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80012de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1ee      	bne.n	80012c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80a4 	beq.w	800143e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f6:	4b8c      	ldr	r3, [pc, #560]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10d      	bne.n	800131e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	4b89      	ldr	r3, [pc, #548]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	4a88      	ldr	r2, [pc, #544]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130c:	6413      	str	r3, [r2, #64]	; 0x40
 800130e:	4b86      	ldr	r3, [pc, #536]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800131a:	2301      	movs	r3, #1
 800131c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800131e:	4b83      	ldr	r3, [pc, #524]	; (800152c <HAL_RCC_OscConfig+0x4d4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001326:	2b00      	cmp	r3, #0
 8001328:	d118      	bne.n	800135c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800132a:	4b80      	ldr	r3, [pc, #512]	; (800152c <HAL_RCC_OscConfig+0x4d4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a7f      	ldr	r2, [pc, #508]	; (800152c <HAL_RCC_OscConfig+0x4d4>)
 8001330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001336:	f7ff fb33 	bl	80009a0 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800133e:	f7ff fb2f 	bl	80009a0 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b64      	cmp	r3, #100	; 0x64
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e12a      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001350:	4b76      	ldr	r3, [pc, #472]	; (800152c <HAL_RCC_OscConfig+0x4d4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d106      	bne.n	8001372 <HAL_RCC_OscConfig+0x31a>
 8001364:	4b70      	ldr	r3, [pc, #448]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001368:	4a6f      	ldr	r2, [pc, #444]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6713      	str	r3, [r2, #112]	; 0x70
 8001370:	e02d      	b.n	80013ce <HAL_RCC_OscConfig+0x376>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0x33c>
 800137a:	4b6b      	ldr	r3, [pc, #428]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 800137c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137e:	4a6a      	ldr	r2, [pc, #424]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001380:	f023 0301 	bic.w	r3, r3, #1
 8001384:	6713      	str	r3, [r2, #112]	; 0x70
 8001386:	4b68      	ldr	r3, [pc, #416]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138a:	4a67      	ldr	r2, [pc, #412]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 800138c:	f023 0304 	bic.w	r3, r3, #4
 8001390:	6713      	str	r3, [r2, #112]	; 0x70
 8001392:	e01c      	b.n	80013ce <HAL_RCC_OscConfig+0x376>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b05      	cmp	r3, #5
 800139a:	d10c      	bne.n	80013b6 <HAL_RCC_OscConfig+0x35e>
 800139c:	4b62      	ldr	r3, [pc, #392]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 800139e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a0:	4a61      	ldr	r2, [pc, #388]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6713      	str	r3, [r2, #112]	; 0x70
 80013a8:	4b5f      	ldr	r3, [pc, #380]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80013aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ac:	4a5e      	ldr	r2, [pc, #376]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6713      	str	r3, [r2, #112]	; 0x70
 80013b4:	e00b      	b.n	80013ce <HAL_RCC_OscConfig+0x376>
 80013b6:	4b5c      	ldr	r3, [pc, #368]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80013b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ba:	4a5b      	ldr	r2, [pc, #364]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80013bc:	f023 0301 	bic.w	r3, r3, #1
 80013c0:	6713      	str	r3, [r2, #112]	; 0x70
 80013c2:	4b59      	ldr	r3, [pc, #356]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80013c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c6:	4a58      	ldr	r2, [pc, #352]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80013c8:	f023 0304 	bic.w	r3, r3, #4
 80013cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d015      	beq.n	8001402 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d6:	f7ff fae3 	bl	80009a0 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013dc:	e00a      	b.n	80013f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013de:	f7ff fadf 	bl	80009a0 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e0d8      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f4:	4b4c      	ldr	r3, [pc, #304]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0ee      	beq.n	80013de <HAL_RCC_OscConfig+0x386>
 8001400:	e014      	b.n	800142c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001402:	f7ff facd 	bl	80009a0 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001408:	e00a      	b.n	8001420 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800140a:	f7ff fac9 	bl	80009a0 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	f241 3288 	movw	r2, #5000	; 0x1388
 8001418:	4293      	cmp	r3, r2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e0c2      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001420:	4b41      	ldr	r3, [pc, #260]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1ee      	bne.n	800140a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d105      	bne.n	800143e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001432:	4b3d      	ldr	r3, [pc, #244]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a3c      	ldr	r2, [pc, #240]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 80ae 	beq.w	80015a4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001448:	4b37      	ldr	r3, [pc, #220]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 030c 	and.w	r3, r3, #12
 8001450:	2b08      	cmp	r3, #8
 8001452:	d06d      	beq.n	8001530 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d14b      	bne.n	80014f4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145c:	4b32      	ldr	r3, [pc, #200]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a31      	ldr	r2, [pc, #196]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001468:	f7ff fa9a 	bl	80009a0 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001470:	f7ff fa96 	bl	80009a0 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e091      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001482:	4b29      	ldr	r3, [pc, #164]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69da      	ldr	r2, [r3, #28]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	019b      	lsls	r3, r3, #6
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	085b      	lsrs	r3, r3, #1
 80014a6:	3b01      	subs	r3, #1
 80014a8:	041b      	lsls	r3, r3, #16
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b0:	061b      	lsls	r3, r3, #24
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	071b      	lsls	r3, r3, #28
 80014ba:	491b      	ldr	r1, [pc, #108]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a18      	ldr	r2, [pc, #96]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80014c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fa68 	bl	80009a0 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d4:	f7ff fa64 	bl	80009a0 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e05f      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x47c>
 80014f2:	e057      	b.n	80015a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80014fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff fa4e 	bl	80009a0 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001508:	f7ff fa4a 	bl	80009a0 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e045      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151a:	4b03      	ldr	r3, [pc, #12]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x4b0>
 8001526:	e03d      	b.n	80015a4 <HAL_RCC_OscConfig+0x54c>
 8001528:	40023800 	.word	0x40023800
 800152c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001530:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <HAL_RCC_OscConfig+0x558>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d030      	beq.n	80015a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001548:	429a      	cmp	r2, r3
 800154a:	d129      	bne.n	80015a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001556:	429a      	cmp	r2, r3
 8001558:	d122      	bne.n	80015a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001560:	4013      	ands	r3, r2
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001566:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001568:	4293      	cmp	r3, r2
 800156a:	d119      	bne.n	80015a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	085b      	lsrs	r3, r3, #1
 8001578:	3b01      	subs	r3, #1
 800157a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800157c:	429a      	cmp	r2, r3
 800157e:	d10f      	bne.n	80015a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800158c:	429a      	cmp	r2, r3
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800

080015b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0d0      	b.n	800176e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015cc:	4b6a      	ldr	r3, [pc, #424]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 030f 	and.w	r3, r3, #15
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d910      	bls.n	80015fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015da:	4b67      	ldr	r3, [pc, #412]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 020f 	bic.w	r2, r3, #15
 80015e2:	4965      	ldr	r1, [pc, #404]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ea:	4b63      	ldr	r3, [pc, #396]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d001      	beq.n	80015fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0b8      	b.n	800176e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d020      	beq.n	800164a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001614:	4b59      	ldr	r3, [pc, #356]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	4a58      	ldr	r2, [pc, #352]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 800161a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800161e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800162c:	4b53      	ldr	r3, [pc, #332]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	4a52      	ldr	r2, [pc, #328]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001636:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001638:	4b50      	ldr	r3, [pc, #320]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	494d      	ldr	r1, [pc, #308]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001646:	4313      	orrs	r3, r2
 8001648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d040      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d107      	bne.n	800166e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	4b47      	ldr	r3, [pc, #284]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d115      	bne.n	8001696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e07f      	b.n	800176e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d107      	bne.n	8001686 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001676:	4b41      	ldr	r3, [pc, #260]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d109      	bne.n	8001696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e073      	b.n	800176e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001686:	4b3d      	ldr	r3, [pc, #244]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e06b      	b.n	800176e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001696:	4b39      	ldr	r3, [pc, #228]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f023 0203 	bic.w	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4936      	ldr	r1, [pc, #216]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016a8:	f7ff f97a 	bl	80009a0 <HAL_GetTick>
 80016ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b0:	f7ff f976 	bl	80009a0 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e053      	b.n	800176e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c6:	4b2d      	ldr	r3, [pc, #180]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 020c 	and.w	r2, r3, #12
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d1eb      	bne.n	80016b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d8:	4b27      	ldr	r3, [pc, #156]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 030f 	and.w	r3, r3, #15
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d210      	bcs.n	8001708 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e6:	4b24      	ldr	r3, [pc, #144]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 020f 	bic.w	r2, r3, #15
 80016ee:	4922      	ldr	r1, [pc, #136]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e032      	b.n	800176e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d008      	beq.n	8001726 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	4916      	ldr	r1, [pc, #88]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001722:	4313      	orrs	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d009      	beq.n	8001746 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	490e      	ldr	r1, [pc, #56]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001746:	f000 f821 	bl	800178c <HAL_RCC_GetSysClockFreq>
 800174a:	4602      	mov	r2, r0
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	490a      	ldr	r1, [pc, #40]	; (8001780 <HAL_RCC_ClockConfig+0x1cc>)
 8001758:	5ccb      	ldrb	r3, [r1, r3]
 800175a:	fa22 f303 	lsr.w	r3, r2, r3
 800175e:	4a09      	ldr	r2, [pc, #36]	; (8001784 <HAL_RCC_ClockConfig+0x1d0>)
 8001760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_RCC_ClockConfig+0x1d4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff f8d6 	bl	8000918 <HAL_InitTick>

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023c00 	.word	0x40023c00
 800177c:	40023800 	.word	0x40023800
 8001780:	08003888 	.word	0x08003888
 8001784:	20000000 	.word	0x20000000
 8001788:	20000004 	.word	0x20000004

0800178c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800178c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001790:	b090      	sub	sp, #64	; 0x40
 8001792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	637b      	str	r3, [r7, #52]	; 0x34
 8001798:	2300      	movs	r3, #0
 800179a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800179c:	2300      	movs	r3, #0
 800179e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017a4:	4b59      	ldr	r3, [pc, #356]	; (800190c <HAL_RCC_GetSysClockFreq+0x180>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d00d      	beq.n	80017cc <HAL_RCC_GetSysClockFreq+0x40>
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	f200 80a1 	bhi.w	80018f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <HAL_RCC_GetSysClockFreq+0x34>
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d003      	beq.n	80017c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017be:	e09b      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017c0:	4b53      	ldr	r3, [pc, #332]	; (8001910 <HAL_RCC_GetSysClockFreq+0x184>)
 80017c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017c4:	e09b      	b.n	80018fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017c6:	4b53      	ldr	r3, [pc, #332]	; (8001914 <HAL_RCC_GetSysClockFreq+0x188>)
 80017c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017ca:	e098      	b.n	80018fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017cc:	4b4f      	ldr	r3, [pc, #316]	; (800190c <HAL_RCC_GetSysClockFreq+0x180>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017d4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80017d6:	4b4d      	ldr	r3, [pc, #308]	; (800190c <HAL_RCC_GetSysClockFreq+0x180>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d028      	beq.n	8001834 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e2:	4b4a      	ldr	r3, [pc, #296]	; (800190c <HAL_RCC_GetSysClockFreq+0x180>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	099b      	lsrs	r3, r3, #6
 80017e8:	2200      	movs	r2, #0
 80017ea:	623b      	str	r3, [r7, #32]
 80017ec:	627a      	str	r2, [r7, #36]	; 0x24
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017f4:	2100      	movs	r1, #0
 80017f6:	4b47      	ldr	r3, [pc, #284]	; (8001914 <HAL_RCC_GetSysClockFreq+0x188>)
 80017f8:	fb03 f201 	mul.w	r2, r3, r1
 80017fc:	2300      	movs	r3, #0
 80017fe:	fb00 f303 	mul.w	r3, r0, r3
 8001802:	4413      	add	r3, r2
 8001804:	4a43      	ldr	r2, [pc, #268]	; (8001914 <HAL_RCC_GetSysClockFreq+0x188>)
 8001806:	fba0 1202 	umull	r1, r2, r0, r2
 800180a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800180c:	460a      	mov	r2, r1
 800180e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001812:	4413      	add	r3, r2
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001818:	2200      	movs	r2, #0
 800181a:	61bb      	str	r3, [r7, #24]
 800181c:	61fa      	str	r2, [r7, #28]
 800181e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001822:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001826:	f7fe fd07 	bl	8000238 <__aeabi_uldivmod>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4613      	mov	r3, r2
 8001830:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001832:	e053      	b.n	80018dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001834:	4b35      	ldr	r3, [pc, #212]	; (800190c <HAL_RCC_GetSysClockFreq+0x180>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	099b      	lsrs	r3, r3, #6
 800183a:	2200      	movs	r2, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	617a      	str	r2, [r7, #20]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001846:	f04f 0b00 	mov.w	fp, #0
 800184a:	4652      	mov	r2, sl
 800184c:	465b      	mov	r3, fp
 800184e:	f04f 0000 	mov.w	r0, #0
 8001852:	f04f 0100 	mov.w	r1, #0
 8001856:	0159      	lsls	r1, r3, #5
 8001858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800185c:	0150      	lsls	r0, r2, #5
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	ebb2 080a 	subs.w	r8, r2, sl
 8001866:	eb63 090b 	sbc.w	r9, r3, fp
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	f04f 0300 	mov.w	r3, #0
 8001872:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001876:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800187a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800187e:	ebb2 0408 	subs.w	r4, r2, r8
 8001882:	eb63 0509 	sbc.w	r5, r3, r9
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	00eb      	lsls	r3, r5, #3
 8001890:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001894:	00e2      	lsls	r2, r4, #3
 8001896:	4614      	mov	r4, r2
 8001898:	461d      	mov	r5, r3
 800189a:	eb14 030a 	adds.w	r3, r4, sl
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	eb45 030b 	adc.w	r3, r5, fp
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018b2:	4629      	mov	r1, r5
 80018b4:	028b      	lsls	r3, r1, #10
 80018b6:	4621      	mov	r1, r4
 80018b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018bc:	4621      	mov	r1, r4
 80018be:	028a      	lsls	r2, r1, #10
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c6:	2200      	movs	r2, #0
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	60fa      	str	r2, [r7, #12]
 80018cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018d0:	f7fe fcb2 	bl	8000238 <__aeabi_uldivmod>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4613      	mov	r3, r2
 80018da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_RCC_GetSysClockFreq+0x180>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	3301      	adds	r3, #1
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80018ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018f6:	e002      	b.n	80018fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <HAL_RCC_GetSysClockFreq+0x184>)
 80018fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001900:	4618      	mov	r0, r3
 8001902:	3740      	adds	r7, #64	; 0x40
 8001904:	46bd      	mov	sp, r7
 8001906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	00f42400 	.word	0x00f42400
 8001914:	017d7840 	.word	0x017d7840

08001918 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_RCC_GetHCLKFreq+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000000 	.word	0x20000000

08001930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001934:	f7ff fff0 	bl	8001918 <HAL_RCC_GetHCLKFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	0a9b      	lsrs	r3, r3, #10
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	4903      	ldr	r1, [pc, #12]	; (8001954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	08003898 	.word	0x08003898

08001958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800195c:	f7ff ffdc 	bl	8001918 <HAL_RCC_GetHCLKFreq>
 8001960:	4602      	mov	r2, r0
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	0b5b      	lsrs	r3, r3, #13
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	4903      	ldr	r1, [pc, #12]	; (800197c <HAL_RCC_GetPCLK2Freq+0x24>)
 800196e:	5ccb      	ldrb	r3, [r1, r3]
 8001970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001974:	4618      	mov	r0, r3
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	08003898 	.word	0x08003898

08001980 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d012      	beq.n	80019ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80019a8:	4b69      	ldr	r3, [pc, #420]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	4a68      	ldr	r2, [pc, #416]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019b2:	6093      	str	r3, [r2, #8]
 80019b4:	4b66      	ldr	r3, [pc, #408]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019bc:	4964      	ldr	r1, [pc, #400]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80019ca:	2301      	movs	r3, #1
 80019cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d017      	beq.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80019da:	4b5d      	ldr	r3, [pc, #372]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e8:	4959      	ldr	r1, [pc, #356]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019f8:	d101      	bne.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80019fa:	2301      	movs	r3, #1
 80019fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001a06:	2301      	movs	r3, #1
 8001a08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d017      	beq.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a16:	4b4e      	ldr	r3, [pc, #312]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	494a      	ldr	r1, [pc, #296]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a34:	d101      	bne.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001a36:	2301      	movs	r3, #1
 8001a38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001a42:	2301      	movs	r3, #1
 8001a44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001a52:	2301      	movs	r3, #1
 8001a54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0320 	and.w	r3, r3, #32
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 808b 	beq.w	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a64:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	4a39      	ldr	r2, [pc, #228]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a70:	4b37      	ldr	r3, [pc, #220]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a7c:	4b35      	ldr	r3, [pc, #212]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a34      	ldr	r2, [pc, #208]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a88:	f7fe ff8a 	bl	80009a0 <HAL_GetTick>
 8001a8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a90:	f7fe ff86 	bl	80009a0 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	; 0x64
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e38f      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001aa2:	4b2c      	ldr	r3, [pc, #176]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001aae:	4b28      	ldr	r3, [pc, #160]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ab6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d035      	beq.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d02e      	beq.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001acc:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ad4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ad6:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ada:	4a1d      	ldr	r2, [pc, #116]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ae2:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae6:	4a1a      	ldr	r2, [pc, #104]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001aee:	4a18      	ldr	r2, [pc, #96]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001af4:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d114      	bne.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7fe ff4e 	bl	80009a0 <HAL_GetTick>
 8001b04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b06:	e00a      	b.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b08:	f7fe ff4a 	bl	80009a0 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e351      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0ee      	beq.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b36:	d111      	bne.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001b46:	400b      	ands	r3, r1
 8001b48:	4901      	ldr	r1, [pc, #4]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
 8001b4e:	e00b      	b.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40007000 	.word	0x40007000
 8001b58:	0ffffcff 	.word	0x0ffffcff
 8001b5c:	4bac      	ldr	r3, [pc, #688]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	4aab      	ldr	r2, [pc, #684]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001b66:	6093      	str	r3, [r2, #8]
 8001b68:	4ba9      	ldr	r3, [pc, #676]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b74:	49a6      	ldr	r1, [pc, #664]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d010      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b86:	4ba2      	ldr	r3, [pc, #648]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b8c:	4aa0      	ldr	r2, [pc, #640]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b96:	4b9e      	ldr	r3, [pc, #632]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b98:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba0:	499b      	ldr	r1, [pc, #620]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00a      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bb4:	4b96      	ldr	r3, [pc, #600]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bc2:	4993      	ldr	r1, [pc, #588]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00a      	beq.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001bd6:	4b8e      	ldr	r3, [pc, #568]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001be4:	498a      	ldr	r1, [pc, #552]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00a      	beq.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001bf8:	4b85      	ldr	r3, [pc, #532]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c06:	4982      	ldr	r1, [pc, #520]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00a      	beq.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001c1a:	4b7d      	ldr	r3, [pc, #500]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c28:	4979      	ldr	r1, [pc, #484]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00a      	beq.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c3c:	4b74      	ldr	r3, [pc, #464]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c42:	f023 0203 	bic.w	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	4971      	ldr	r1, [pc, #452]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00a      	beq.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c5e:	4b6c      	ldr	r3, [pc, #432]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c64:	f023 020c 	bic.w	r2, r3, #12
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c6c:	4968      	ldr	r1, [pc, #416]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00a      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c80:	4b63      	ldr	r3, [pc, #396]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	4960      	ldr	r1, [pc, #384]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00a      	beq.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ca2:	4b5b      	ldr	r3, [pc, #364]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb0:	4957      	ldr	r1, [pc, #348]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00a      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001cc4:	4b52      	ldr	r3, [pc, #328]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd2:	494f      	ldr	r1, [pc, #316]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00a      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001ce6:	4b4a      	ldr	r3, [pc, #296]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	4946      	ldr	r1, [pc, #280]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00a      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001d08:	4b41      	ldr	r3, [pc, #260]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	493e      	ldr	r1, [pc, #248]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00a      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001d2a:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d38:	4935      	ldr	r1, [pc, #212]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00a      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d4c:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d52:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d5a:	492d      	ldr	r1, [pc, #180]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d011      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d6e:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d74:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d7c:	4924      	ldr	r1, [pc, #144]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00a      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001dae:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dbc:	4914      	ldr	r1, [pc, #80]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00b      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001de0:	490b      	ldr	r1, [pc, #44]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00f      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e04:	4902      	ldr	r1, [pc, #8]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e0c:	e002      	b.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00b      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001e20:	4b8a      	ldr	r3, [pc, #552]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e26:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e30:	4986      	ldr	r1, [pc, #536]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00b      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001e44:	4b81      	ldr	r3, [pc, #516]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e4a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e54:	497d      	ldr	r1, [pc, #500]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d006      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 80d6 	beq.w	800201c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001e70:	4b76      	ldr	r3, [pc, #472]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a75      	ldr	r2, [pc, #468]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e7c:	f7fe fd90 	bl	80009a0 <HAL_GetTick>
 8001e80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e84:	f7fe fd8c 	bl	80009a0 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	; 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e195      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e96:	4b6d      	ldr	r3, [pc, #436]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d021      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d11d      	bne.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001eb6:	4b65      	ldr	r3, [pc, #404]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ebc:	0c1b      	lsrs	r3, r3, #16
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001ec4:	4b61      	ldr	r3, [pc, #388]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eca:	0e1b      	lsrs	r3, r3, #24
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	019a      	lsls	r2, r3, #6
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	041b      	lsls	r3, r3, #16
 8001edc:	431a      	orrs	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	061b      	lsls	r3, r3, #24
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	071b      	lsls	r3, r3, #28
 8001eea:	4958      	ldr	r1, [pc, #352]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d004      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f06:	d00a      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d02e      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f1c:	d129      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001f1e:	4b4b      	ldr	r3, [pc, #300]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f24:	0c1b      	lsrs	r3, r3, #16
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f2c:	4b47      	ldr	r3, [pc, #284]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f32:	0f1b      	lsrs	r3, r3, #28
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	019a      	lsls	r2, r3, #6
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	041b      	lsls	r3, r3, #16
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	061b      	lsls	r3, r3, #24
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	071b      	lsls	r3, r3, #28
 8001f52:	493e      	ldr	r1, [pc, #248]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001f5a:	4b3c      	ldr	r3, [pc, #240]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f60:	f023 021f 	bic.w	r2, r3, #31
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	4938      	ldr	r1, [pc, #224]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d01d      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f7e:	4b33      	ldr	r3, [pc, #204]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f84:	0e1b      	lsrs	r3, r3, #24
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f8c:	4b2f      	ldr	r3, [pc, #188]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f92:	0f1b      	lsrs	r3, r3, #28
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	019a      	lsls	r2, r3, #6
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	041b      	lsls	r3, r3, #16
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	061b      	lsls	r3, r3, #24
 8001fac:	431a      	orrs	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	071b      	lsls	r3, r3, #28
 8001fb2:	4926      	ldr	r1, [pc, #152]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d011      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	019a      	lsls	r2, r3, #6
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	041b      	lsls	r3, r3, #16
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	061b      	lsls	r3, r3, #24
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	071b      	lsls	r3, r3, #28
 8001fe2:	491a      	ldr	r1, [pc, #104]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001fea:	4b18      	ldr	r3, [pc, #96]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a17      	ldr	r2, [pc, #92]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ff0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ff6:	f7fe fcd3 	bl	80009a0 <HAL_GetTick>
 8001ffa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ffe:	f7fe fccf 	bl	80009a0 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b64      	cmp	r3, #100	; 0x64
 800200a:	d901      	bls.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e0d8      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002010:	4b0e      	ldr	r3, [pc, #56]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	2b01      	cmp	r3, #1
 8002020:	f040 80ce 	bne.w	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a08      	ldr	r2, [pc, #32]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800202a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800202e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002030:	f7fe fcb6 	bl	80009a0 <HAL_GetTick>
 8002034:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002036:	e00b      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002038:	f7fe fcb2 	bl	80009a0 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	; 0x64
 8002044:	d904      	bls.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e0bb      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002050:	4b5e      	ldr	r3, [pc, #376]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800205c:	d0ec      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206e:	2b00      	cmp	r3, #0
 8002070:	d009      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800207a:	2b00      	cmp	r3, #0
 800207c:	d02e      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d12a      	bne.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002086:	4b51      	ldr	r3, [pc, #324]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208c:	0c1b      	lsrs	r3, r3, #16
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002094:	4b4d      	ldr	r3, [pc, #308]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209a:	0f1b      	lsrs	r3, r3, #28
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	019a      	lsls	r2, r3, #6
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	041b      	lsls	r3, r3, #16
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	061b      	lsls	r3, r3, #24
 80020b4:	431a      	orrs	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	071b      	lsls	r3, r3, #28
 80020ba:	4944      	ldr	r1, [pc, #272]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80020c2:	4b42      	ldr	r3, [pc, #264]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	3b01      	subs	r3, #1
 80020d2:	021b      	lsls	r3, r3, #8
 80020d4:	493d      	ldr	r1, [pc, #244]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d022      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020f0:	d11d      	bne.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80020f2:	4b36      	ldr	r3, [pc, #216]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f8:	0e1b      	lsrs	r3, r3, #24
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002100:	4b32      	ldr	r3, [pc, #200]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002106:	0f1b      	lsrs	r3, r3, #28
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	019a      	lsls	r2, r3, #6
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	431a      	orrs	r2, r3
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	061b      	lsls	r3, r3, #24
 8002120:	431a      	orrs	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	071b      	lsls	r3, r3, #28
 8002126:	4929      	ldr	r1, [pc, #164]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d028      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800213a:	4b24      	ldr	r3, [pc, #144]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800213c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002140:	0e1b      	lsrs	r3, r3, #24
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002148:	4b20      	ldr	r3, [pc, #128]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	0c1b      	lsrs	r3, r3, #16
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	019a      	lsls	r2, r3, #6
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	041b      	lsls	r3, r3, #16
 8002160:	431a      	orrs	r2, r3
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	061b      	lsls	r3, r3, #24
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	071b      	lsls	r3, r3, #28
 800216e:	4917      	ldr	r1, [pc, #92]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800217c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	4911      	ldr	r1, [pc, #68]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002196:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002198:	f7fe fc02 	bl	80009a0 <HAL_GetTick>
 800219c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80021a0:	f7fe fbfe 	bl	80009a0 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e007      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021be:	d1ef      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40023800 	.word	0x40023800

080021d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e040      	b.n	8002264 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7fe faae 	bl	8000754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2224      	movs	r2, #36	; 0x24
 80021fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0201 	bic.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fb82 	bl	8002918 <UART_SetConfig>
 8002214:	4603      	mov	r3, r0
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e022      	b.n	8002264 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fdda 	bl	8002de0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800223a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800224a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 fe61 	bl	8002f24 <UART_CheckIdleState>
 8002262:	4603      	mov	r3, r0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	4613      	mov	r3, r2
 8002278:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002280:	2b20      	cmp	r3, #32
 8002282:	d132      	bne.n	80022ea <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <HAL_UART_Receive_IT+0x24>
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e02b      	b.n	80022ec <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d018      	beq.n	80022da <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	e853 3f00 	ldrex	r3, [r3]
 80022b4:	613b      	str	r3, [r7, #16]
   return(result);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	623b      	str	r3, [r7, #32]
 80022c8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ca:	69f9      	ldr	r1, [r7, #28]
 80022cc:	6a3a      	ldr	r2, [r7, #32]
 80022ce:	e841 2300 	strex	r3, r2, [r1]
 80022d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1e6      	bne.n	80022a8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	461a      	mov	r2, r3
 80022de:	68b9      	ldr	r1, [r7, #8]
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 ff33 	bl	800314c <UART_Start_Receive_IT>
 80022e6:	4603      	mov	r3, r0
 80022e8:	e000      	b.n	80022ec <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80022ea:	2302      	movs	r3, #2
  }
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3728      	adds	r7, #40	; 0x28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b0ba      	sub	sp, #232	; 0xe8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800231a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800231e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002322:	4013      	ands	r3, r2
 8002324:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002328:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800232c:	2b00      	cmp	r3, #0
 800232e:	d115      	bne.n	800235c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002334:	f003 0320 	and.w	r3, r3, #32
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00f      	beq.n	800235c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800233c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b00      	cmp	r3, #0
 8002346:	d009      	beq.n	800235c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 82ac 	beq.w	80028aa <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	4798      	blx	r3
      }
      return;
 800235a:	e2a6      	b.n	80028aa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800235c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 8117 	beq.w	8002594 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002372:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002376:	4b85      	ldr	r3, [pc, #532]	; (800258c <HAL_UART_IRQHandler+0x298>)
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 810a 	beq.w	8002594 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d011      	beq.n	80023b0 <HAL_UART_IRQHandler+0xbc>
 800238c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00b      	beq.n	80023b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2201      	movs	r2, #1
 800239e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023a6:	f043 0201 	orr.w	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d011      	beq.n	80023e0 <HAL_UART_IRQHandler+0xec>
 80023bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00b      	beq.n	80023e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2202      	movs	r2, #2
 80023ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023d6:	f043 0204 	orr.w	r2, r3, #4
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d011      	beq.n	8002410 <HAL_UART_IRQHandler+0x11c>
 80023ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00b      	beq.n	8002410 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2204      	movs	r2, #4
 80023fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002406:	f043 0202 	orr.w	r2, r3, #2
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d017      	beq.n	800244c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800241c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b00      	cmp	r3, #0
 8002426:	d105      	bne.n	8002434 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800242c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00b      	beq.n	800244c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2208      	movs	r2, #8
 800243a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002442:	f043 0208 	orr.w	r2, r3, #8
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800244c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002454:	2b00      	cmp	r3, #0
 8002456:	d012      	beq.n	800247e <HAL_UART_IRQHandler+0x18a>
 8002458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800245c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00c      	beq.n	800247e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800246c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002474:	f043 0220 	orr.w	r2, r3, #32
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 8212 	beq.w	80028ae <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800248a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00d      	beq.n	80024b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800249a:	f003 0320 	and.w	r3, r3, #32
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d007      	beq.n	80024b2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c6:	2b40      	cmp	r3, #64	; 0x40
 80024c8:	d005      	beq.n	80024d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80024ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d04f      	beq.n	8002576 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fefe 	bl	80032d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e6:	2b40      	cmp	r3, #64	; 0x40
 80024e8:	d141      	bne.n	800256e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3308      	adds	r3, #8
 80024f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024f8:	e853 3f00 	ldrex	r3, [r3]
 80024fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002500:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002508:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3308      	adds	r3, #8
 8002512:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002516:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800251a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800251e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002522:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002526:	e841 2300 	strex	r3, r2, [r1]
 800252a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800252e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1d9      	bne.n	80024ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800253a:	2b00      	cmp	r3, #0
 800253c:	d013      	beq.n	8002566 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002542:	4a13      	ldr	r2, [pc, #76]	; (8002590 <HAL_UART_IRQHandler+0x29c>)
 8002544:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe fbb5 	bl	8000cba <HAL_DMA_Abort_IT>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d017      	beq.n	8002586 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002560:	4610      	mov	r0, r2
 8002562:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002564:	e00f      	b.n	8002586 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f9b6 	bl	80028d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800256c:	e00b      	b.n	8002586 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f9b2 	bl	80028d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002574:	e007      	b.n	8002586 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f9ae 	bl	80028d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002584:	e193      	b.n	80028ae <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002586:	bf00      	nop
    return;
 8002588:	e191      	b.n	80028ae <HAL_UART_IRQHandler+0x5ba>
 800258a:	bf00      	nop
 800258c:	04000120 	.word	0x04000120
 8002590:	080033a1 	.word	0x080033a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002598:	2b01      	cmp	r3, #1
 800259a:	f040 814c 	bne.w	8002836 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800259e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 8145 	beq.w	8002836 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80025ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 813e 	beq.w	8002836 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2210      	movs	r2, #16
 80025c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025cc:	2b40      	cmp	r3, #64	; 0x40
 80025ce:	f040 80b6 	bne.w	800273e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80025de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 8165 	beq.w	80028b2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80025ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025f2:	429a      	cmp	r2, r3
 80025f4:	f080 815d 	bcs.w	80028b2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800260c:	f000 8086 	beq.w	800271c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002618:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800261c:	e853 3f00 	ldrex	r3, [r3]
 8002620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800262c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	461a      	mov	r2, r3
 8002636:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800263a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800263e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002642:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002646:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800264a:	e841 2300 	strex	r3, r2, [r1]
 800264e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002652:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1da      	bne.n	8002610 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	3308      	adds	r3, #8
 8002660:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002664:	e853 3f00 	ldrex	r3, [r3]
 8002668:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800266a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3308      	adds	r3, #8
 800267a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800267e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002682:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002684:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002686:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800268a:	e841 2300 	strex	r3, r2, [r1]
 800268e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1e1      	bne.n	800265a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	3308      	adds	r3, #8
 800269c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026a0:	e853 3f00 	ldrex	r3, [r3]
 80026a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80026a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	3308      	adds	r3, #8
 80026b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80026ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80026c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026c2:	e841 2300 	strex	r3, r2, [r1]
 80026c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80026c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1e3      	bne.n	8002696 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e4:	e853 3f00 	ldrex	r3, [r3]
 80026e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80026ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ec:	f023 0310 	bic.w	r3, r3, #16
 80026f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	461a      	mov	r2, r3
 80026fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8002700:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002702:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002704:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002706:	e841 2300 	strex	r3, r2, [r1]
 800270a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800270c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1e4      	bne.n	80026dc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fa5f 	bl	8000bda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800272e:	b29b      	uxth	r3, r3
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	b29b      	uxth	r3, r3
 8002734:	4619      	mov	r1, r3
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f8d8 	bl	80028ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800273c:	e0b9      	b.n	80028b2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800274a:	b29b      	uxth	r3, r3
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80ab 	beq.w	80028b6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8002760:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80a6 	beq.w	80028b6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002772:	e853 3f00 	ldrex	r3, [r3]
 8002776:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800277e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800278c:	647b      	str	r3, [r7, #68]	; 0x44
 800278e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002790:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002794:	e841 2300 	strex	r3, r2, [r1]
 8002798:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800279a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1e4      	bne.n	800276a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	3308      	adds	r3, #8
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	e853 3f00 	ldrex	r3, [r3]
 80027ae:	623b      	str	r3, [r7, #32]
   return(result);
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	f023 0301 	bic.w	r3, r3, #1
 80027b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3308      	adds	r3, #8
 80027c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80027c4:	633a      	str	r2, [r7, #48]	; 0x30
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027cc:	e841 2300 	strex	r3, r2, [r1]
 80027d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80027d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1e3      	bne.n	80027a0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2220      	movs	r2, #32
 80027dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	e853 3f00 	ldrex	r3, [r3]
 80027f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f023 0310 	bic.w	r3, r3, #16
 8002800:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800280e:	61fb      	str	r3, [r7, #28]
 8002810:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002812:	69b9      	ldr	r1, [r7, #24]
 8002814:	69fa      	ldr	r2, [r7, #28]
 8002816:	e841 2300 	strex	r3, r2, [r1]
 800281a:	617b      	str	r3, [r7, #20]
   return(result);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1e4      	bne.n	80027ec <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2202      	movs	r2, #2
 8002826:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002828:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800282c:	4619      	mov	r1, r3
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f85c 	bl	80028ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002834:	e03f      	b.n	80028b6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800283a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00e      	beq.n	8002860 <HAL_UART_IRQHandler+0x56c>
 8002842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d008      	beq.n	8002860 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002856:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f853 	bl	8002904 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800285e:	e02d      	b.n	80028bc <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00e      	beq.n	800288a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800286c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01c      	beq.n	80028ba <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	4798      	blx	r3
    }
    return;
 8002888:	e017      	b.n	80028ba <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800288a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800288e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	d012      	beq.n	80028bc <HAL_UART_IRQHandler+0x5c8>
 8002896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800289a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00c      	beq.n	80028bc <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fd92 	bl	80033cc <UART_EndTransmit_IT>
    return;
 80028a8:	e008      	b.n	80028bc <HAL_UART_IRQHandler+0x5c8>
      return;
 80028aa:	bf00      	nop
 80028ac:	e006      	b.n	80028bc <HAL_UART_IRQHandler+0x5c8>
    return;
 80028ae:	bf00      	nop
 80028b0:	e004      	b.n	80028bc <HAL_UART_IRQHandler+0x5c8>
      return;
 80028b2:	bf00      	nop
 80028b4:	e002      	b.n	80028bc <HAL_UART_IRQHandler+0x5c8>
      return;
 80028b6:	bf00      	nop
 80028b8:	e000      	b.n	80028bc <HAL_UART_IRQHandler+0x5c8>
    return;
 80028ba:	bf00      	nop
  }

}
 80028bc:	37e8      	adds	r7, #232	; 0xe8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop

080028c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	431a      	orrs	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	4313      	orrs	r3, r2
 800293a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4ba6      	ldr	r3, [pc, #664]	; (8002bdc <UART_SetConfig+0x2c4>)
 8002944:	4013      	ands	r3, r2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	6979      	ldr	r1, [r7, #20]
 800294c:	430b      	orrs	r3, r1
 800294e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	4313      	orrs	r3, r2
 8002974:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	430a      	orrs	r2, r1
 8002988:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a94      	ldr	r2, [pc, #592]	; (8002be0 <UART_SetConfig+0x2c8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d120      	bne.n	80029d6 <UART_SetConfig+0xbe>
 8002994:	4b93      	ldr	r3, [pc, #588]	; (8002be4 <UART_SetConfig+0x2cc>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d816      	bhi.n	80029d0 <UART_SetConfig+0xb8>
 80029a2:	a201      	add	r2, pc, #4	; (adr r2, 80029a8 <UART_SetConfig+0x90>)
 80029a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a8:	080029b9 	.word	0x080029b9
 80029ac:	080029c5 	.word	0x080029c5
 80029b0:	080029bf 	.word	0x080029bf
 80029b4:	080029cb 	.word	0x080029cb
 80029b8:	2301      	movs	r3, #1
 80029ba:	77fb      	strb	r3, [r7, #31]
 80029bc:	e150      	b.n	8002c60 <UART_SetConfig+0x348>
 80029be:	2302      	movs	r3, #2
 80029c0:	77fb      	strb	r3, [r7, #31]
 80029c2:	e14d      	b.n	8002c60 <UART_SetConfig+0x348>
 80029c4:	2304      	movs	r3, #4
 80029c6:	77fb      	strb	r3, [r7, #31]
 80029c8:	e14a      	b.n	8002c60 <UART_SetConfig+0x348>
 80029ca:	2308      	movs	r3, #8
 80029cc:	77fb      	strb	r3, [r7, #31]
 80029ce:	e147      	b.n	8002c60 <UART_SetConfig+0x348>
 80029d0:	2310      	movs	r3, #16
 80029d2:	77fb      	strb	r3, [r7, #31]
 80029d4:	e144      	b.n	8002c60 <UART_SetConfig+0x348>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a83      	ldr	r2, [pc, #524]	; (8002be8 <UART_SetConfig+0x2d0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d132      	bne.n	8002a46 <UART_SetConfig+0x12e>
 80029e0:	4b80      	ldr	r3, [pc, #512]	; (8002be4 <UART_SetConfig+0x2cc>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	d828      	bhi.n	8002a40 <UART_SetConfig+0x128>
 80029ee:	a201      	add	r2, pc, #4	; (adr r2, 80029f4 <UART_SetConfig+0xdc>)
 80029f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f4:	08002a29 	.word	0x08002a29
 80029f8:	08002a41 	.word	0x08002a41
 80029fc:	08002a41 	.word	0x08002a41
 8002a00:	08002a41 	.word	0x08002a41
 8002a04:	08002a35 	.word	0x08002a35
 8002a08:	08002a41 	.word	0x08002a41
 8002a0c:	08002a41 	.word	0x08002a41
 8002a10:	08002a41 	.word	0x08002a41
 8002a14:	08002a2f 	.word	0x08002a2f
 8002a18:	08002a41 	.word	0x08002a41
 8002a1c:	08002a41 	.word	0x08002a41
 8002a20:	08002a41 	.word	0x08002a41
 8002a24:	08002a3b 	.word	0x08002a3b
 8002a28:	2300      	movs	r3, #0
 8002a2a:	77fb      	strb	r3, [r7, #31]
 8002a2c:	e118      	b.n	8002c60 <UART_SetConfig+0x348>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	77fb      	strb	r3, [r7, #31]
 8002a32:	e115      	b.n	8002c60 <UART_SetConfig+0x348>
 8002a34:	2304      	movs	r3, #4
 8002a36:	77fb      	strb	r3, [r7, #31]
 8002a38:	e112      	b.n	8002c60 <UART_SetConfig+0x348>
 8002a3a:	2308      	movs	r3, #8
 8002a3c:	77fb      	strb	r3, [r7, #31]
 8002a3e:	e10f      	b.n	8002c60 <UART_SetConfig+0x348>
 8002a40:	2310      	movs	r3, #16
 8002a42:	77fb      	strb	r3, [r7, #31]
 8002a44:	e10c      	b.n	8002c60 <UART_SetConfig+0x348>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a68      	ldr	r2, [pc, #416]	; (8002bec <UART_SetConfig+0x2d4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d120      	bne.n	8002a92 <UART_SetConfig+0x17a>
 8002a50:	4b64      	ldr	r3, [pc, #400]	; (8002be4 <UART_SetConfig+0x2cc>)
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a5a:	2b30      	cmp	r3, #48	; 0x30
 8002a5c:	d013      	beq.n	8002a86 <UART_SetConfig+0x16e>
 8002a5e:	2b30      	cmp	r3, #48	; 0x30
 8002a60:	d814      	bhi.n	8002a8c <UART_SetConfig+0x174>
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d009      	beq.n	8002a7a <UART_SetConfig+0x162>
 8002a66:	2b20      	cmp	r3, #32
 8002a68:	d810      	bhi.n	8002a8c <UART_SetConfig+0x174>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <UART_SetConfig+0x15c>
 8002a6e:	2b10      	cmp	r3, #16
 8002a70:	d006      	beq.n	8002a80 <UART_SetConfig+0x168>
 8002a72:	e00b      	b.n	8002a8c <UART_SetConfig+0x174>
 8002a74:	2300      	movs	r3, #0
 8002a76:	77fb      	strb	r3, [r7, #31]
 8002a78:	e0f2      	b.n	8002c60 <UART_SetConfig+0x348>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	77fb      	strb	r3, [r7, #31]
 8002a7e:	e0ef      	b.n	8002c60 <UART_SetConfig+0x348>
 8002a80:	2304      	movs	r3, #4
 8002a82:	77fb      	strb	r3, [r7, #31]
 8002a84:	e0ec      	b.n	8002c60 <UART_SetConfig+0x348>
 8002a86:	2308      	movs	r3, #8
 8002a88:	77fb      	strb	r3, [r7, #31]
 8002a8a:	e0e9      	b.n	8002c60 <UART_SetConfig+0x348>
 8002a8c:	2310      	movs	r3, #16
 8002a8e:	77fb      	strb	r3, [r7, #31]
 8002a90:	e0e6      	b.n	8002c60 <UART_SetConfig+0x348>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a56      	ldr	r2, [pc, #344]	; (8002bf0 <UART_SetConfig+0x2d8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d120      	bne.n	8002ade <UART_SetConfig+0x1c6>
 8002a9c:	4b51      	ldr	r3, [pc, #324]	; (8002be4 <UART_SetConfig+0x2cc>)
 8002a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002aa6:	2bc0      	cmp	r3, #192	; 0xc0
 8002aa8:	d013      	beq.n	8002ad2 <UART_SetConfig+0x1ba>
 8002aaa:	2bc0      	cmp	r3, #192	; 0xc0
 8002aac:	d814      	bhi.n	8002ad8 <UART_SetConfig+0x1c0>
 8002aae:	2b80      	cmp	r3, #128	; 0x80
 8002ab0:	d009      	beq.n	8002ac6 <UART_SetConfig+0x1ae>
 8002ab2:	2b80      	cmp	r3, #128	; 0x80
 8002ab4:	d810      	bhi.n	8002ad8 <UART_SetConfig+0x1c0>
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <UART_SetConfig+0x1a8>
 8002aba:	2b40      	cmp	r3, #64	; 0x40
 8002abc:	d006      	beq.n	8002acc <UART_SetConfig+0x1b4>
 8002abe:	e00b      	b.n	8002ad8 <UART_SetConfig+0x1c0>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	77fb      	strb	r3, [r7, #31]
 8002ac4:	e0cc      	b.n	8002c60 <UART_SetConfig+0x348>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	77fb      	strb	r3, [r7, #31]
 8002aca:	e0c9      	b.n	8002c60 <UART_SetConfig+0x348>
 8002acc:	2304      	movs	r3, #4
 8002ace:	77fb      	strb	r3, [r7, #31]
 8002ad0:	e0c6      	b.n	8002c60 <UART_SetConfig+0x348>
 8002ad2:	2308      	movs	r3, #8
 8002ad4:	77fb      	strb	r3, [r7, #31]
 8002ad6:	e0c3      	b.n	8002c60 <UART_SetConfig+0x348>
 8002ad8:	2310      	movs	r3, #16
 8002ada:	77fb      	strb	r3, [r7, #31]
 8002adc:	e0c0      	b.n	8002c60 <UART_SetConfig+0x348>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a44      	ldr	r2, [pc, #272]	; (8002bf4 <UART_SetConfig+0x2dc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d125      	bne.n	8002b34 <UART_SetConfig+0x21c>
 8002ae8:	4b3e      	ldr	r3, [pc, #248]	; (8002be4 <UART_SetConfig+0x2cc>)
 8002aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002af6:	d017      	beq.n	8002b28 <UART_SetConfig+0x210>
 8002af8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002afc:	d817      	bhi.n	8002b2e <UART_SetConfig+0x216>
 8002afe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b02:	d00b      	beq.n	8002b1c <UART_SetConfig+0x204>
 8002b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b08:	d811      	bhi.n	8002b2e <UART_SetConfig+0x216>
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <UART_SetConfig+0x1fe>
 8002b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b12:	d006      	beq.n	8002b22 <UART_SetConfig+0x20a>
 8002b14:	e00b      	b.n	8002b2e <UART_SetConfig+0x216>
 8002b16:	2300      	movs	r3, #0
 8002b18:	77fb      	strb	r3, [r7, #31]
 8002b1a:	e0a1      	b.n	8002c60 <UART_SetConfig+0x348>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	77fb      	strb	r3, [r7, #31]
 8002b20:	e09e      	b.n	8002c60 <UART_SetConfig+0x348>
 8002b22:	2304      	movs	r3, #4
 8002b24:	77fb      	strb	r3, [r7, #31]
 8002b26:	e09b      	b.n	8002c60 <UART_SetConfig+0x348>
 8002b28:	2308      	movs	r3, #8
 8002b2a:	77fb      	strb	r3, [r7, #31]
 8002b2c:	e098      	b.n	8002c60 <UART_SetConfig+0x348>
 8002b2e:	2310      	movs	r3, #16
 8002b30:	77fb      	strb	r3, [r7, #31]
 8002b32:	e095      	b.n	8002c60 <UART_SetConfig+0x348>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a2f      	ldr	r2, [pc, #188]	; (8002bf8 <UART_SetConfig+0x2e0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d125      	bne.n	8002b8a <UART_SetConfig+0x272>
 8002b3e:	4b29      	ldr	r3, [pc, #164]	; (8002be4 <UART_SetConfig+0x2cc>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b4c:	d017      	beq.n	8002b7e <UART_SetConfig+0x266>
 8002b4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b52:	d817      	bhi.n	8002b84 <UART_SetConfig+0x26c>
 8002b54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b58:	d00b      	beq.n	8002b72 <UART_SetConfig+0x25a>
 8002b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b5e:	d811      	bhi.n	8002b84 <UART_SetConfig+0x26c>
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <UART_SetConfig+0x254>
 8002b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b68:	d006      	beq.n	8002b78 <UART_SetConfig+0x260>
 8002b6a:	e00b      	b.n	8002b84 <UART_SetConfig+0x26c>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	77fb      	strb	r3, [r7, #31]
 8002b70:	e076      	b.n	8002c60 <UART_SetConfig+0x348>
 8002b72:	2302      	movs	r3, #2
 8002b74:	77fb      	strb	r3, [r7, #31]
 8002b76:	e073      	b.n	8002c60 <UART_SetConfig+0x348>
 8002b78:	2304      	movs	r3, #4
 8002b7a:	77fb      	strb	r3, [r7, #31]
 8002b7c:	e070      	b.n	8002c60 <UART_SetConfig+0x348>
 8002b7e:	2308      	movs	r3, #8
 8002b80:	77fb      	strb	r3, [r7, #31]
 8002b82:	e06d      	b.n	8002c60 <UART_SetConfig+0x348>
 8002b84:	2310      	movs	r3, #16
 8002b86:	77fb      	strb	r3, [r7, #31]
 8002b88:	e06a      	b.n	8002c60 <UART_SetConfig+0x348>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a1b      	ldr	r2, [pc, #108]	; (8002bfc <UART_SetConfig+0x2e4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d138      	bne.n	8002c06 <UART_SetConfig+0x2ee>
 8002b94:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <UART_SetConfig+0x2cc>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002b9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ba2:	d017      	beq.n	8002bd4 <UART_SetConfig+0x2bc>
 8002ba4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ba8:	d82a      	bhi.n	8002c00 <UART_SetConfig+0x2e8>
 8002baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bae:	d00b      	beq.n	8002bc8 <UART_SetConfig+0x2b0>
 8002bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb4:	d824      	bhi.n	8002c00 <UART_SetConfig+0x2e8>
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <UART_SetConfig+0x2aa>
 8002bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bbe:	d006      	beq.n	8002bce <UART_SetConfig+0x2b6>
 8002bc0:	e01e      	b.n	8002c00 <UART_SetConfig+0x2e8>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	77fb      	strb	r3, [r7, #31]
 8002bc6:	e04b      	b.n	8002c60 <UART_SetConfig+0x348>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	77fb      	strb	r3, [r7, #31]
 8002bcc:	e048      	b.n	8002c60 <UART_SetConfig+0x348>
 8002bce:	2304      	movs	r3, #4
 8002bd0:	77fb      	strb	r3, [r7, #31]
 8002bd2:	e045      	b.n	8002c60 <UART_SetConfig+0x348>
 8002bd4:	2308      	movs	r3, #8
 8002bd6:	77fb      	strb	r3, [r7, #31]
 8002bd8:	e042      	b.n	8002c60 <UART_SetConfig+0x348>
 8002bda:	bf00      	nop
 8002bdc:	efff69f3 	.word	0xefff69f3
 8002be0:	40011000 	.word	0x40011000
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40004400 	.word	0x40004400
 8002bec:	40004800 	.word	0x40004800
 8002bf0:	40004c00 	.word	0x40004c00
 8002bf4:	40005000 	.word	0x40005000
 8002bf8:	40011400 	.word	0x40011400
 8002bfc:	40007800 	.word	0x40007800
 8002c00:	2310      	movs	r3, #16
 8002c02:	77fb      	strb	r3, [r7, #31]
 8002c04:	e02c      	b.n	8002c60 <UART_SetConfig+0x348>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a72      	ldr	r2, [pc, #456]	; (8002dd4 <UART_SetConfig+0x4bc>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d125      	bne.n	8002c5c <UART_SetConfig+0x344>
 8002c10:	4b71      	ldr	r3, [pc, #452]	; (8002dd8 <UART_SetConfig+0x4c0>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c1e:	d017      	beq.n	8002c50 <UART_SetConfig+0x338>
 8002c20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c24:	d817      	bhi.n	8002c56 <UART_SetConfig+0x33e>
 8002c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c2a:	d00b      	beq.n	8002c44 <UART_SetConfig+0x32c>
 8002c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c30:	d811      	bhi.n	8002c56 <UART_SetConfig+0x33e>
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <UART_SetConfig+0x326>
 8002c36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c3a:	d006      	beq.n	8002c4a <UART_SetConfig+0x332>
 8002c3c:	e00b      	b.n	8002c56 <UART_SetConfig+0x33e>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	77fb      	strb	r3, [r7, #31]
 8002c42:	e00d      	b.n	8002c60 <UART_SetConfig+0x348>
 8002c44:	2302      	movs	r3, #2
 8002c46:	77fb      	strb	r3, [r7, #31]
 8002c48:	e00a      	b.n	8002c60 <UART_SetConfig+0x348>
 8002c4a:	2304      	movs	r3, #4
 8002c4c:	77fb      	strb	r3, [r7, #31]
 8002c4e:	e007      	b.n	8002c60 <UART_SetConfig+0x348>
 8002c50:	2308      	movs	r3, #8
 8002c52:	77fb      	strb	r3, [r7, #31]
 8002c54:	e004      	b.n	8002c60 <UART_SetConfig+0x348>
 8002c56:	2310      	movs	r3, #16
 8002c58:	77fb      	strb	r3, [r7, #31]
 8002c5a:	e001      	b.n	8002c60 <UART_SetConfig+0x348>
 8002c5c:	2310      	movs	r3, #16
 8002c5e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c68:	d15b      	bne.n	8002d22 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002c6a:	7ffb      	ldrb	r3, [r7, #31]
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d828      	bhi.n	8002cc2 <UART_SetConfig+0x3aa>
 8002c70:	a201      	add	r2, pc, #4	; (adr r2, 8002c78 <UART_SetConfig+0x360>)
 8002c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c76:	bf00      	nop
 8002c78:	08002c9d 	.word	0x08002c9d
 8002c7c:	08002ca5 	.word	0x08002ca5
 8002c80:	08002cad 	.word	0x08002cad
 8002c84:	08002cc3 	.word	0x08002cc3
 8002c88:	08002cb3 	.word	0x08002cb3
 8002c8c:	08002cc3 	.word	0x08002cc3
 8002c90:	08002cc3 	.word	0x08002cc3
 8002c94:	08002cc3 	.word	0x08002cc3
 8002c98:	08002cbb 	.word	0x08002cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c9c:	f7fe fe48 	bl	8001930 <HAL_RCC_GetPCLK1Freq>
 8002ca0:	61b8      	str	r0, [r7, #24]
        break;
 8002ca2:	e013      	b.n	8002ccc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ca4:	f7fe fe58 	bl	8001958 <HAL_RCC_GetPCLK2Freq>
 8002ca8:	61b8      	str	r0, [r7, #24]
        break;
 8002caa:	e00f      	b.n	8002ccc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cac:	4b4b      	ldr	r3, [pc, #300]	; (8002ddc <UART_SetConfig+0x4c4>)
 8002cae:	61bb      	str	r3, [r7, #24]
        break;
 8002cb0:	e00c      	b.n	8002ccc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cb2:	f7fe fd6b 	bl	800178c <HAL_RCC_GetSysClockFreq>
 8002cb6:	61b8      	str	r0, [r7, #24]
        break;
 8002cb8:	e008      	b.n	8002ccc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cbe:	61bb      	str	r3, [r7, #24]
        break;
 8002cc0:	e004      	b.n	8002ccc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	77bb      	strb	r3, [r7, #30]
        break;
 8002cca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d074      	beq.n	8002dbc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	005a      	lsls	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	085b      	lsrs	r3, r3, #1
 8002cdc:	441a      	add	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	2b0f      	cmp	r3, #15
 8002cec:	d916      	bls.n	8002d1c <UART_SetConfig+0x404>
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf4:	d212      	bcs.n	8002d1c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	f023 030f 	bic.w	r3, r3, #15
 8002cfe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	085b      	lsrs	r3, r3, #1
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	89fb      	ldrh	r3, [r7, #14]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	89fa      	ldrh	r2, [r7, #14]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	e04f      	b.n	8002dbc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	77bb      	strb	r3, [r7, #30]
 8002d20:	e04c      	b.n	8002dbc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d22:	7ffb      	ldrb	r3, [r7, #31]
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d828      	bhi.n	8002d7a <UART_SetConfig+0x462>
 8002d28:	a201      	add	r2, pc, #4	; (adr r2, 8002d30 <UART_SetConfig+0x418>)
 8002d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2e:	bf00      	nop
 8002d30:	08002d55 	.word	0x08002d55
 8002d34:	08002d5d 	.word	0x08002d5d
 8002d38:	08002d65 	.word	0x08002d65
 8002d3c:	08002d7b 	.word	0x08002d7b
 8002d40:	08002d6b 	.word	0x08002d6b
 8002d44:	08002d7b 	.word	0x08002d7b
 8002d48:	08002d7b 	.word	0x08002d7b
 8002d4c:	08002d7b 	.word	0x08002d7b
 8002d50:	08002d73 	.word	0x08002d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d54:	f7fe fdec 	bl	8001930 <HAL_RCC_GetPCLK1Freq>
 8002d58:	61b8      	str	r0, [r7, #24]
        break;
 8002d5a:	e013      	b.n	8002d84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d5c:	f7fe fdfc 	bl	8001958 <HAL_RCC_GetPCLK2Freq>
 8002d60:	61b8      	str	r0, [r7, #24]
        break;
 8002d62:	e00f      	b.n	8002d84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d64:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <UART_SetConfig+0x4c4>)
 8002d66:	61bb      	str	r3, [r7, #24]
        break;
 8002d68:	e00c      	b.n	8002d84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d6a:	f7fe fd0f 	bl	800178c <HAL_RCC_GetSysClockFreq>
 8002d6e:	61b8      	str	r0, [r7, #24]
        break;
 8002d70:	e008      	b.n	8002d84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d76:	61bb      	str	r3, [r7, #24]
        break;
 8002d78:	e004      	b.n	8002d84 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	77bb      	strb	r3, [r7, #30]
        break;
 8002d82:	bf00      	nop
    }

    if (pclk != 0U)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d018      	beq.n	8002dbc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	085a      	lsrs	r2, r3, #1
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	441a      	add	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b0f      	cmp	r3, #15
 8002da2:	d909      	bls.n	8002db8 <UART_SetConfig+0x4a0>
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002daa:	d205      	bcs.n	8002db8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60da      	str	r2, [r3, #12]
 8002db6:	e001      	b.n	8002dbc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002dc8:	7fbb      	ldrb	r3, [r7, #30]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3720      	adds	r7, #32
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40007c00 	.word	0x40007c00
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	00f42400 	.word	0x00f42400

08002de0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d01a      	beq.n	8002ef6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ede:	d10a      	bne.n	8002ef6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	605a      	str	r2, [r3, #4]
  }
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f34:	f7fd fd34 	bl	80009a0 <HAL_GetTick>
 8002f38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d10e      	bne.n	8002f66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f831 	bl	8002fbe <UART_WaitOnFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e027      	b.n	8002fb6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d10e      	bne.n	8002f92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f81b 	bl	8002fbe <UART_WaitOnFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e011      	b.n	8002fb6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b09c      	sub	sp, #112	; 0x70
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	603b      	str	r3, [r7, #0]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fce:	e0a7      	b.n	8003120 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd6:	f000 80a3 	beq.w	8003120 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fda:	f7fd fce1 	bl	80009a0 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d302      	bcc.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x32>
 8002fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d13f      	bne.n	8003070 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff8:	e853 3f00 	ldrex	r3, [r3]
 8002ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003000:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003004:	667b      	str	r3, [r7, #100]	; 0x64
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800300e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003010:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003012:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003014:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003016:	e841 2300 	strex	r3, r2, [r1]
 800301a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800301c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1e6      	bne.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3308      	adds	r3, #8
 8003028:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800302c:	e853 3f00 	ldrex	r3, [r3]
 8003030:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003034:	f023 0301 	bic.w	r3, r3, #1
 8003038:	663b      	str	r3, [r7, #96]	; 0x60
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3308      	adds	r3, #8
 8003040:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003042:	64ba      	str	r2, [r7, #72]	; 0x48
 8003044:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003046:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800304a:	e841 2300 	strex	r3, r2, [r1]
 800304e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1e5      	bne.n	8003022 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e068      	b.n	8003142 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b00      	cmp	r3, #0
 800307c:	d050      	beq.n	8003120 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800308c:	d148      	bne.n	8003120 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003096:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a0:	e853 3f00 	ldrex	r3, [r3]
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b6:	637b      	str	r3, [r7, #52]	; 0x34
 80030b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030be:	e841 2300 	strex	r3, r2, [r1]
 80030c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1e6      	bne.n	8003098 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	3308      	adds	r3, #8
 80030d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	e853 3f00 	ldrex	r3, [r3]
 80030d8:	613b      	str	r3, [r7, #16]
   return(result);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f023 0301 	bic.w	r3, r3, #1
 80030e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3308      	adds	r3, #8
 80030e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80030ea:	623a      	str	r2, [r7, #32]
 80030ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ee:	69f9      	ldr	r1, [r7, #28]
 80030f0:	6a3a      	ldr	r2, [r7, #32]
 80030f2:	e841 2300 	strex	r3, r2, [r1]
 80030f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e5      	bne.n	80030ca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2220      	movs	r2, #32
 8003102:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e010      	b.n	8003142 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69da      	ldr	r2, [r3, #28]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	4013      	ands	r3, r2
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	429a      	cmp	r2, r3
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	429a      	cmp	r2, r3
 800313c:	f43f af48 	beq.w	8002fd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3770      	adds	r7, #112	; 0x70
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800314c:	b480      	push	{r7}
 800314e:	b097      	sub	sp, #92	; 0x5c
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	4613      	mov	r3, r2
 8003158:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	88fa      	ldrh	r2, [r7, #6]
 8003164:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	88fa      	ldrh	r2, [r7, #6]
 800316c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800317e:	d10e      	bne.n	800319e <UART_Start_Receive_IT+0x52>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <UART_Start_Receive_IT+0x48>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800318e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003192:	e02d      	b.n	80031f0 <UART_Start_Receive_IT+0xa4>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	22ff      	movs	r2, #255	; 0xff
 8003198:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800319c:	e028      	b.n	80031f0 <UART_Start_Receive_IT+0xa4>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10d      	bne.n	80031c2 <UART_Start_Receive_IT+0x76>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d104      	bne.n	80031b8 <UART_Start_Receive_IT+0x6c>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	22ff      	movs	r2, #255	; 0xff
 80031b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031b6:	e01b      	b.n	80031f0 <UART_Start_Receive_IT+0xa4>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	227f      	movs	r2, #127	; 0x7f
 80031bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031c0:	e016      	b.n	80031f0 <UART_Start_Receive_IT+0xa4>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031ca:	d10d      	bne.n	80031e8 <UART_Start_Receive_IT+0x9c>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d104      	bne.n	80031de <UART_Start_Receive_IT+0x92>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	227f      	movs	r2, #127	; 0x7f
 80031d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031dc:	e008      	b.n	80031f0 <UART_Start_Receive_IT+0xa4>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	223f      	movs	r2, #63	; 0x3f
 80031e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031e6:	e003      	b.n	80031f0 <UART_Start_Receive_IT+0xa4>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2222      	movs	r2, #34	; 0x22
 80031fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3308      	adds	r3, #8
 8003206:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800320a:	e853 3f00 	ldrex	r3, [r3]
 800320e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	657b      	str	r3, [r7, #84]	; 0x54
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3308      	adds	r3, #8
 800321e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003220:	64ba      	str	r2, [r7, #72]	; 0x48
 8003222:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003224:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003228:	e841 2300 	strex	r3, r2, [r1]
 800322c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800322e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1e5      	bne.n	8003200 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323c:	d107      	bne.n	800324e <UART_Start_Receive_IT+0x102>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d103      	bne.n	800324e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4a21      	ldr	r2, [pc, #132]	; (80032d0 <UART_Start_Receive_IT+0x184>)
 800324a:	669a      	str	r2, [r3, #104]	; 0x68
 800324c:	e002      	b.n	8003254 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4a20      	ldr	r2, [pc, #128]	; (80032d4 <UART_Start_Receive_IT+0x188>)
 8003252:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d019      	beq.n	8003290 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	e853 3f00 	ldrex	r3, [r3]
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003270:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800327a:	637b      	str	r3, [r7, #52]	; 0x34
 800327c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003280:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003282:	e841 2300 	strex	r3, r2, [r1]
 8003286:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1e6      	bne.n	800325c <UART_Start_Receive_IT+0x110>
 800328e:	e018      	b.n	80032c2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	e853 3f00 	ldrex	r3, [r3]
 800329c:	613b      	str	r3, [r7, #16]
   return(result);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f043 0320 	orr.w	r3, r3, #32
 80032a4:	653b      	str	r3, [r7, #80]	; 0x50
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ae:	623b      	str	r3, [r7, #32]
 80032b0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b2:	69f9      	ldr	r1, [r7, #28]
 80032b4:	6a3a      	ldr	r2, [r7, #32]
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1e6      	bne.n	8003290 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	375c      	adds	r7, #92	; 0x5c
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	08003587 	.word	0x08003587
 80032d4:	08003421 	.word	0x08003421

080032d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032d8:	b480      	push	{r7}
 80032da:	b095      	sub	sp, #84	; 0x54
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e8:	e853 3f00 	ldrex	r3, [r3]
 80032ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003300:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003302:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003304:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003306:	e841 2300 	strex	r3, r2, [r1]
 800330a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1e6      	bne.n	80032e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3308      	adds	r3, #8
 8003318:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	e853 3f00 	ldrex	r3, [r3]
 8003320:	61fb      	str	r3, [r7, #28]
   return(result);
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	64bb      	str	r3, [r7, #72]	; 0x48
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3308      	adds	r3, #8
 8003330:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003332:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003334:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e5      	bne.n	8003312 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334a:	2b01      	cmp	r3, #1
 800334c:	d118      	bne.n	8003380 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	e853 3f00 	ldrex	r3, [r3]
 800335a:	60bb      	str	r3, [r7, #8]
   return(result);
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f023 0310 	bic.w	r3, r3, #16
 8003362:	647b      	str	r3, [r7, #68]	; 0x44
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003370:	6979      	ldr	r1, [r7, #20]
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	e841 2300 	strex	r3, r2, [r1]
 8003378:	613b      	str	r3, [r7, #16]
   return(result);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1e6      	bne.n	800334e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003394:	bf00      	nop
 8003396:	3754      	adds	r7, #84	; 0x54
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f7ff fa8a 	bl	80028d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033c4:	bf00      	nop
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	61bb      	str	r3, [r7, #24]
 80033f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f6:	6979      	ldr	r1, [r7, #20]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	e841 2300 	strex	r3, r2, [r1]
 80033fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1e6      	bne.n	80033d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff fa56 	bl	80028c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003418:	bf00      	nop
 800341a:	3720      	adds	r7, #32
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b096      	sub	sp, #88	; 0x58
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800342e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003438:	2b22      	cmp	r3, #34	; 0x22
 800343a:	f040 8098 	bne.w	800356e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003448:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800344c:	b2d9      	uxtb	r1, r3
 800344e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003452:	b2da      	uxtb	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003458:	400a      	ands	r2, r1
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d17b      	bne.n	800357e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348e:	e853 3f00 	ldrex	r3, [r3]
 8003492:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003496:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800349a:	653b      	str	r3, [r7, #80]	; 0x50
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034a4:	647b      	str	r3, [r7, #68]	; 0x44
 80034a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034ac:	e841 2300 	strex	r3, r2, [r1]
 80034b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e6      	bne.n	8003486 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3308      	adds	r3, #8
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	e853 3f00 	ldrex	r3, [r3]
 80034c6:	623b      	str	r3, [r7, #32]
   return(result);
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	f023 0301 	bic.w	r3, r3, #1
 80034ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3308      	adds	r3, #8
 80034d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034d8:	633a      	str	r2, [r7, #48]	; 0x30
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e0:	e841 2300 	strex	r3, r2, [r1]
 80034e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1e5      	bne.n	80034b8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003504:	2b01      	cmp	r3, #1
 8003506:	d12e      	bne.n	8003566 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	e853 3f00 	ldrex	r3, [r3]
 800351a:	60fb      	str	r3, [r7, #12]
   return(result);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0310 	bic.w	r3, r3, #16
 8003522:	64bb      	str	r3, [r7, #72]	; 0x48
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003530:	69b9      	ldr	r1, [r7, #24]
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	e841 2300 	strex	r3, r2, [r1]
 8003538:	617b      	str	r3, [r7, #20]
   return(result);
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e6      	bne.n	800350e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	2b10      	cmp	r3, #16
 800354c:	d103      	bne.n	8003556 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2210      	movs	r2, #16
 8003554:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800355c:	4619      	mov	r1, r3
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff f9c4 	bl	80028ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003564:	e00b      	b.n	800357e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fc ffe8 	bl	800053c <HAL_UART_RxCpltCallback>
}
 800356c:	e007      	b.n	800357e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699a      	ldr	r2, [r3, #24]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0208 	orr.w	r2, r2, #8
 800357c:	619a      	str	r2, [r3, #24]
}
 800357e:	bf00      	nop
 8003580:	3758      	adds	r7, #88	; 0x58
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b096      	sub	sp, #88	; 0x58
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003594:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800359e:	2b22      	cmp	r3, #34	; 0x22
 80035a0:	f040 8098 	bne.w	80036d4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80035b4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80035b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80035bc:	4013      	ands	r3, r2
 80035be:	b29a      	uxth	r2, r3
 80035c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035c2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	1c9a      	adds	r2, r3, #2
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d17b      	bne.n	80036e4 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f4:	e853 3f00 	ldrex	r3, [r3]
 80035f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003600:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800360a:	643b      	str	r3, [r7, #64]	; 0x40
 800360c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003610:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003612:	e841 2300 	strex	r3, r2, [r1]
 8003616:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1e6      	bne.n	80035ec <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3308      	adds	r3, #8
 8003624:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	e853 3f00 	ldrex	r3, [r3]
 800362c:	61fb      	str	r3, [r7, #28]
   return(result);
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	64bb      	str	r3, [r7, #72]	; 0x48
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3308      	adds	r3, #8
 800363c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800363e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003640:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003642:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003646:	e841 2300 	strex	r3, r2, [r1]
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1e5      	bne.n	800361e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2220      	movs	r2, #32
 8003656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800366a:	2b01      	cmp	r3, #1
 800366c:	d12e      	bne.n	80036cc <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	e853 3f00 	ldrex	r3, [r3]
 8003680:	60bb      	str	r3, [r7, #8]
   return(result);
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f023 0310 	bic.w	r3, r3, #16
 8003688:	647b      	str	r3, [r7, #68]	; 0x44
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003692:	61bb      	str	r3, [r7, #24]
 8003694:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003696:	6979      	ldr	r1, [r7, #20]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	e841 2300 	strex	r3, r2, [r1]
 800369e:	613b      	str	r3, [r7, #16]
   return(result);
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1e6      	bne.n	8003674 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b10      	cmp	r3, #16
 80036b2:	d103      	bne.n	80036bc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2210      	movs	r2, #16
 80036ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80036c2:	4619      	mov	r1, r3
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff f911 	bl	80028ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80036ca:	e00b      	b.n	80036e4 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7fc ff35 	bl	800053c <HAL_UART_RxCpltCallback>
}
 80036d2:	e007      	b.n	80036e4 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0208 	orr.w	r2, r2, #8
 80036e2:	619a      	str	r2, [r3, #24]
}
 80036e4:	bf00      	nop
 80036e6:	3758      	adds	r7, #88	; 0x58
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <atol>:
 80036ec:	220a      	movs	r2, #10
 80036ee:	2100      	movs	r1, #0
 80036f0:	f000 b8b4 	b.w	800385c <strtol>

080036f4 <__errno>:
 80036f4:	4b01      	ldr	r3, [pc, #4]	; (80036fc <__errno+0x8>)
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	2000000c 	.word	0x2000000c

08003700 <__libc_init_array>:
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	4d0d      	ldr	r5, [pc, #52]	; (8003738 <__libc_init_array+0x38>)
 8003704:	4c0d      	ldr	r4, [pc, #52]	; (800373c <__libc_init_array+0x3c>)
 8003706:	1b64      	subs	r4, r4, r5
 8003708:	10a4      	asrs	r4, r4, #2
 800370a:	2600      	movs	r6, #0
 800370c:	42a6      	cmp	r6, r4
 800370e:	d109      	bne.n	8003724 <__libc_init_array+0x24>
 8003710:	4d0b      	ldr	r5, [pc, #44]	; (8003740 <__libc_init_array+0x40>)
 8003712:	4c0c      	ldr	r4, [pc, #48]	; (8003744 <__libc_init_array+0x44>)
 8003714:	f000 f8ac 	bl	8003870 <_init>
 8003718:	1b64      	subs	r4, r4, r5
 800371a:	10a4      	asrs	r4, r4, #2
 800371c:	2600      	movs	r6, #0
 800371e:	42a6      	cmp	r6, r4
 8003720:	d105      	bne.n	800372e <__libc_init_array+0x2e>
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	f855 3b04 	ldr.w	r3, [r5], #4
 8003728:	4798      	blx	r3
 800372a:	3601      	adds	r6, #1
 800372c:	e7ee      	b.n	800370c <__libc_init_array+0xc>
 800372e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003732:	4798      	blx	r3
 8003734:	3601      	adds	r6, #1
 8003736:	e7f2      	b.n	800371e <__libc_init_array+0x1e>
 8003738:	080039ac 	.word	0x080039ac
 800373c:	080039ac 	.word	0x080039ac
 8003740:	080039ac 	.word	0x080039ac
 8003744:	080039b0 	.word	0x080039b0

08003748 <memset>:
 8003748:	4402      	add	r2, r0
 800374a:	4603      	mov	r3, r0
 800374c:	4293      	cmp	r3, r2
 800374e:	d100      	bne.n	8003752 <memset+0xa>
 8003750:	4770      	bx	lr
 8003752:	f803 1b01 	strb.w	r1, [r3], #1
 8003756:	e7f9      	b.n	800374c <memset+0x4>

08003758 <_strtol_l.constprop.0>:
 8003758:	2b01      	cmp	r3, #1
 800375a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800375e:	d001      	beq.n	8003764 <_strtol_l.constprop.0+0xc>
 8003760:	2b24      	cmp	r3, #36	; 0x24
 8003762:	d906      	bls.n	8003772 <_strtol_l.constprop.0+0x1a>
 8003764:	f7ff ffc6 	bl	80036f4 <__errno>
 8003768:	2316      	movs	r3, #22
 800376a:	6003      	str	r3, [r0, #0]
 800376c:	2000      	movs	r0, #0
 800376e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003772:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003858 <_strtol_l.constprop.0+0x100>
 8003776:	460d      	mov	r5, r1
 8003778:	462e      	mov	r6, r5
 800377a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800377e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003782:	f017 0708 	ands.w	r7, r7, #8
 8003786:	d1f7      	bne.n	8003778 <_strtol_l.constprop.0+0x20>
 8003788:	2c2d      	cmp	r4, #45	; 0x2d
 800378a:	d132      	bne.n	80037f2 <_strtol_l.constprop.0+0x9a>
 800378c:	782c      	ldrb	r4, [r5, #0]
 800378e:	2701      	movs	r7, #1
 8003790:	1cb5      	adds	r5, r6, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d05b      	beq.n	800384e <_strtol_l.constprop.0+0xf6>
 8003796:	2b10      	cmp	r3, #16
 8003798:	d109      	bne.n	80037ae <_strtol_l.constprop.0+0x56>
 800379a:	2c30      	cmp	r4, #48	; 0x30
 800379c:	d107      	bne.n	80037ae <_strtol_l.constprop.0+0x56>
 800379e:	782c      	ldrb	r4, [r5, #0]
 80037a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80037a4:	2c58      	cmp	r4, #88	; 0x58
 80037a6:	d14d      	bne.n	8003844 <_strtol_l.constprop.0+0xec>
 80037a8:	786c      	ldrb	r4, [r5, #1]
 80037aa:	2310      	movs	r3, #16
 80037ac:	3502      	adds	r5, #2
 80037ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80037b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80037b6:	f04f 0c00 	mov.w	ip, #0
 80037ba:	fbb8 f9f3 	udiv	r9, r8, r3
 80037be:	4666      	mov	r6, ip
 80037c0:	fb03 8a19 	mls	sl, r3, r9, r8
 80037c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80037c8:	f1be 0f09 	cmp.w	lr, #9
 80037cc:	d816      	bhi.n	80037fc <_strtol_l.constprop.0+0xa4>
 80037ce:	4674      	mov	r4, lr
 80037d0:	42a3      	cmp	r3, r4
 80037d2:	dd24      	ble.n	800381e <_strtol_l.constprop.0+0xc6>
 80037d4:	f1bc 0f00 	cmp.w	ip, #0
 80037d8:	db1e      	blt.n	8003818 <_strtol_l.constprop.0+0xc0>
 80037da:	45b1      	cmp	r9, r6
 80037dc:	d31c      	bcc.n	8003818 <_strtol_l.constprop.0+0xc0>
 80037de:	d101      	bne.n	80037e4 <_strtol_l.constprop.0+0x8c>
 80037e0:	45a2      	cmp	sl, r4
 80037e2:	db19      	blt.n	8003818 <_strtol_l.constprop.0+0xc0>
 80037e4:	fb06 4603 	mla	r6, r6, r3, r4
 80037e8:	f04f 0c01 	mov.w	ip, #1
 80037ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80037f0:	e7e8      	b.n	80037c4 <_strtol_l.constprop.0+0x6c>
 80037f2:	2c2b      	cmp	r4, #43	; 0x2b
 80037f4:	bf04      	itt	eq
 80037f6:	782c      	ldrbeq	r4, [r5, #0]
 80037f8:	1cb5      	addeq	r5, r6, #2
 80037fa:	e7ca      	b.n	8003792 <_strtol_l.constprop.0+0x3a>
 80037fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003800:	f1be 0f19 	cmp.w	lr, #25
 8003804:	d801      	bhi.n	800380a <_strtol_l.constprop.0+0xb2>
 8003806:	3c37      	subs	r4, #55	; 0x37
 8003808:	e7e2      	b.n	80037d0 <_strtol_l.constprop.0+0x78>
 800380a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800380e:	f1be 0f19 	cmp.w	lr, #25
 8003812:	d804      	bhi.n	800381e <_strtol_l.constprop.0+0xc6>
 8003814:	3c57      	subs	r4, #87	; 0x57
 8003816:	e7db      	b.n	80037d0 <_strtol_l.constprop.0+0x78>
 8003818:	f04f 3cff 	mov.w	ip, #4294967295
 800381c:	e7e6      	b.n	80037ec <_strtol_l.constprop.0+0x94>
 800381e:	f1bc 0f00 	cmp.w	ip, #0
 8003822:	da05      	bge.n	8003830 <_strtol_l.constprop.0+0xd8>
 8003824:	2322      	movs	r3, #34	; 0x22
 8003826:	6003      	str	r3, [r0, #0]
 8003828:	4646      	mov	r6, r8
 800382a:	b942      	cbnz	r2, 800383e <_strtol_l.constprop.0+0xe6>
 800382c:	4630      	mov	r0, r6
 800382e:	e79e      	b.n	800376e <_strtol_l.constprop.0+0x16>
 8003830:	b107      	cbz	r7, 8003834 <_strtol_l.constprop.0+0xdc>
 8003832:	4276      	negs	r6, r6
 8003834:	2a00      	cmp	r2, #0
 8003836:	d0f9      	beq.n	800382c <_strtol_l.constprop.0+0xd4>
 8003838:	f1bc 0f00 	cmp.w	ip, #0
 800383c:	d000      	beq.n	8003840 <_strtol_l.constprop.0+0xe8>
 800383e:	1e69      	subs	r1, r5, #1
 8003840:	6011      	str	r1, [r2, #0]
 8003842:	e7f3      	b.n	800382c <_strtol_l.constprop.0+0xd4>
 8003844:	2430      	movs	r4, #48	; 0x30
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1b1      	bne.n	80037ae <_strtol_l.constprop.0+0x56>
 800384a:	2308      	movs	r3, #8
 800384c:	e7af      	b.n	80037ae <_strtol_l.constprop.0+0x56>
 800384e:	2c30      	cmp	r4, #48	; 0x30
 8003850:	d0a5      	beq.n	800379e <_strtol_l.constprop.0+0x46>
 8003852:	230a      	movs	r3, #10
 8003854:	e7ab      	b.n	80037ae <_strtol_l.constprop.0+0x56>
 8003856:	bf00      	nop
 8003858:	080038a1 	.word	0x080038a1

0800385c <strtol>:
 800385c:	4613      	mov	r3, r2
 800385e:	460a      	mov	r2, r1
 8003860:	4601      	mov	r1, r0
 8003862:	4802      	ldr	r0, [pc, #8]	; (800386c <strtol+0x10>)
 8003864:	6800      	ldr	r0, [r0, #0]
 8003866:	f7ff bf77 	b.w	8003758 <_strtol_l.constprop.0>
 800386a:	bf00      	nop
 800386c:	2000000c 	.word	0x2000000c

08003870 <_init>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	bf00      	nop
 8003874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003876:	bc08      	pop	{r3}
 8003878:	469e      	mov	lr, r3
 800387a:	4770      	bx	lr

0800387c <_fini>:
 800387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387e:	bf00      	nop
 8003880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003882:	bc08      	pop	{r3}
 8003884:	469e      	mov	lr, r3
 8003886:	4770      	bx	lr
