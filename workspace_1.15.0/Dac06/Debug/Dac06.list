
Dac06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003254  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800344c  0800344c  0001344c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003464  08003464  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003464  08003464  00013464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800346c  0800346c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800346c  0800346c  0001346c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003470  08003470  00013470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08003480  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003480  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a35d  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017dc  00000000  00000000  0002a397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  0002bb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002c5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262f3  00000000  00000000  0002cf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4aa  00000000  00000000  00053213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1e71  00000000  00000000  0005e6bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015052e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a8c  00000000  00000000  00150580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003434 	.word	0x08003434

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003434 	.word	0x08003434

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fa4f 	bl	80009e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f820 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f90e 	bl	8000768 <MX_GPIO_Init>
  MX_DMA_Init();
 800054c:	f000 f8ee 	bl	800072c <MX_DMA_Init>
  MX_TIM2_Init();
 8000550:	f000 f876 	bl	8000640 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_4, &duty, 1); //Inicializa o PWM com DMA com dutycycle baseadono valor da variável duty
 8000554:	2301      	movs	r3, #1
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <main+0x44>)
 8000558:	210c      	movs	r1, #12
 800055a:	480a      	ldr	r0, [pc, #40]	; (8000584 <main+0x48>)
 800055c:	f001 fe10 	bl	8002180 <HAL_TIM_PWM_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  duty++;
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <main+0x44>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	4a06      	ldr	r2, [pc, #24]	; (8000580 <main+0x44>)
 8000568:	6013      	str	r3, [r2, #0]
	  if(duty>189){duty=0;}
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <main+0x44>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2bbd      	cmp	r3, #189	; 0xbd
 8000570:	d902      	bls.n	8000578 <main+0x3c>
 8000572:	4b03      	ldr	r3, [pc, #12]	; (8000580 <main+0x44>)
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
	  HAL_Delay(5);
 8000578:	2005      	movs	r0, #5
 800057a:	f000 fa8f 	bl	8000a9c <HAL_Delay>
	  duty++;
 800057e:	e7ef      	b.n	8000560 <main+0x24>
 8000580:	20000028 	.word	0x20000028
 8000584:	2000002c 	.word	0x2000002c

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	2234      	movs	r2, #52	; 0x34
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 ff44 	bl	8003424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <SystemClock_Config+0xb0>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <SystemClock_Config+0xb0>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <SystemClock_Config+0xb0>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <SystemClock_Config+0xb4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005cc:	4a1b      	ldr	r2, [pc, #108]	; (800063c <SystemClock_Config+0xb4>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b19      	ldr	r3, [pc, #100]	; (800063c <SystemClock_Config+0xb4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e0:	2302      	movs	r3, #2
 80005e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e4:	2301      	movs	r3, #1
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e8:	2310      	movs	r3, #16
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ec:	2300      	movs	r3, #0
 80005ee:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 031c 	add.w	r3, r7, #28
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 f8ab 	bl	8001750 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000600:	f000 f8ca 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f001 fb44 	bl	8001cac <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800062a:	f000 f8b5 	bl	8000798 <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3750      	adds	r7, #80	; 0x50
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08e      	sub	sp, #56	; 0x38
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000660:	463b      	mov	r3, r7
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]
 800066e:	615a      	str	r2, [r3, #20]
 8000670:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000672:	4b2d      	ldr	r3, [pc, #180]	; (8000728 <MX_TIM2_Init+0xe8>)
 8000674:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000678:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 800067a:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <MX_TIM2_Init+0xe8>)
 800067c:	2201      	movs	r2, #1
 800067e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000680:	4b29      	ldr	r3, [pc, #164]	; (8000728 <MX_TIM2_Init+0xe8>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 190-1;
 8000686:	4b28      	ldr	r3, [pc, #160]	; (8000728 <MX_TIM2_Init+0xe8>)
 8000688:	22bd      	movs	r2, #189	; 0xbd
 800068a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068c:	4b26      	ldr	r3, [pc, #152]	; (8000728 <MX_TIM2_Init+0xe8>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000692:	4b25      	ldr	r3, [pc, #148]	; (8000728 <MX_TIM2_Init+0xe8>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000698:	4823      	ldr	r0, [pc, #140]	; (8000728 <MX_TIM2_Init+0xe8>)
 800069a:	f001 fcb9 	bl	8002010 <HAL_TIM_Base_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80006a4:	f000 f878 	bl	8000798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006b2:	4619      	mov	r1, r3
 80006b4:	481c      	ldr	r0, [pc, #112]	; (8000728 <MX_TIM2_Init+0xe8>)
 80006b6:	f002 f88b 	bl	80027d0 <HAL_TIM_ConfigClockSource>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80006c0:	f000 f86a 	bl	8000798 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006c4:	4818      	ldr	r0, [pc, #96]	; (8000728 <MX_TIM2_Init+0xe8>)
 80006c6:	f001 fcfa 	bl	80020be <HAL_TIM_PWM_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80006d0:	f000 f862 	bl	8000798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4619      	mov	r1, r3
 80006e2:	4811      	ldr	r0, [pc, #68]	; (8000728 <MX_TIM2_Init+0xe8>)
 80006e4:	f002 fdec 	bl	80032c0 <HAL_TIMEx_MasterConfigSynchronization>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80006ee:	f000 f853 	bl	8000798 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f2:	2360      	movs	r3, #96	; 0x60
 80006f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	220c      	movs	r2, #12
 8000706:	4619      	mov	r1, r3
 8000708:	4807      	ldr	r0, [pc, #28]	; (8000728 <MX_TIM2_Init+0xe8>)
 800070a:	f001 ff4d 	bl	80025a8 <HAL_TIM_PWM_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000714:	f000 f840 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <MX_TIM2_Init+0xe8>)
 800071a:	f000 f8bd 	bl	8000898 <HAL_TIM_MspPostInit>

}
 800071e:	bf00      	nop
 8000720:	3738      	adds	r7, #56	; 0x38
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	2000002c 	.word	0x2000002c

0800072c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_DMA_Init+0x38>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a0b      	ldr	r2, [pc, #44]	; (8000764 <MX_DMA_Init+0x38>)
 8000738:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_DMA_Init+0x38>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2011      	movs	r0, #17
 8000750:	f000 faa3 	bl	8000c9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000754:	2011      	movs	r0, #17
 8000756:	f000 fabc 	bl	8000cd2 <HAL_NVIC_EnableIRQ>

}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_GPIO_Init+0x2c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <MX_GPIO_Init+0x2c>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_GPIO_Init+0x2c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>
	...

080007a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <HAL_MspInit+0x44>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <HAL_MspInit+0x44>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b4:	6413      	str	r3, [r2, #64]	; 0x40
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_MspInit+0x44>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_MspInit+0x44>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_MspInit+0x44>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007cc:	6453      	str	r3, [r2, #68]	; 0x44
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_MspInit+0x44>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800

080007ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007fc:	d142      	bne.n	8000884 <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <HAL_TIM_Base_MspInit+0xa0>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a22      	ldr	r2, [pc, #136]	; (800088c <HAL_TIM_Base_MspInit+0xa0>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <HAL_TIM_Base_MspInit+0xa0>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8000816:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <HAL_TIM_Base_MspInit+0xa4>)
 8000818:	4a1e      	ldr	r2, [pc, #120]	; (8000894 <HAL_TIM_Base_MspInit+0xa8>)
 800081a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <HAL_TIM_Base_MspInit+0xa4>)
 800081e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000822:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000824:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <HAL_TIM_Base_MspInit+0xa4>)
 8000826:	2240      	movs	r2, #64	; 0x40
 8000828:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <HAL_TIM_Base_MspInit+0xa4>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <HAL_TIM_Base_MspInit+0xa4>)
 8000832:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000836:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_TIM_Base_MspInit+0xa4>)
 800083a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800083e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <HAL_TIM_Base_MspInit+0xa4>)
 8000842:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000846:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <HAL_TIM_Base_MspInit+0xa4>)
 800084a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800084e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <HAL_TIM_Base_MspInit+0xa4>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <HAL_TIM_Base_MspInit+0xa4>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <HAL_TIM_Base_MspInit+0xa4>)
 800085e:	f000 fa53 	bl	8000d08 <HAL_DMA_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8000868:	f7ff ff96 	bl	8000798 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <HAL_TIM_Base_MspInit+0xa4>)
 8000870:	629a      	str	r2, [r3, #40]	; 0x28
 8000872:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_TIM_Base_MspInit+0xa4>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a05      	ldr	r2, [pc, #20]	; (8000890 <HAL_TIM_Base_MspInit+0xa4>)
 800087c:	631a      	str	r2, [r3, #48]	; 0x30
 800087e:	4a04      	ldr	r2, [pc, #16]	; (8000890 <HAL_TIM_Base_MspInit+0xa4>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	20000078 	.word	0x20000078
 8000894:	400260a0 	.word	0x400260a0

08000898 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008b8:	d11b      	bne.n	80008f2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_TIM_MspPostInit+0x64>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <HAL_TIM_MspPostInit+0x64>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <HAL_TIM_MspPostInit+0x64>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008d2:	2308      	movs	r3, #8
 80008d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008e2:	2301      	movs	r3, #1
 80008e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	4619      	mov	r1, r3
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <HAL_TIM_MspPostInit+0x68>)
 80008ee:	f000 fd83 	bl	80013f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80008f2:	bf00      	nop
 80008f4:	3720      	adds	r7, #32
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <NMI_Handler+0x4>

0800090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <HardFault_Handler+0x4>

08000910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <MemManage_Handler+0x4>

08000916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <UsageFault_Handler+0x4>

08000922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000950:	f000 f884 	bl	8000a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 800095c:	4802      	ldr	r0, [pc, #8]	; (8000968 <DMA1_Stream6_IRQHandler+0x10>)
 800095e:	f000 fae1 	bl	8000f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000078 	.word	0x20000078

0800096c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <SystemInit+0x20>)
 8000972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <SystemInit+0x20>)
 8000978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800097c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000990:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000996:	490e      	ldr	r1, [pc, #56]	; (80009d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000998:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800099c:	e002      	b.n	80009a4 <LoopCopyDataInit>

0800099e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a2:	3304      	adds	r3, #4

080009a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a8:	d3f9      	bcc.n	800099e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009aa:	4a0b      	ldr	r2, [pc, #44]	; (80009d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009ac:	4c0b      	ldr	r4, [pc, #44]	; (80009dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b0:	e001      	b.n	80009b6 <LoopFillZerobss>

080009b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b4:	3204      	adds	r2, #4

080009b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b8:	d3fb      	bcc.n	80009b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009ba:	f7ff ffd7 	bl	800096c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009be:	f002 fd0d 	bl	80033dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009c2:	f7ff fdbb 	bl	800053c <main>
  bx  lr    
 80009c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009c8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009d4:	08003474 	.word	0x08003474
  ldr r2, =_sbss
 80009d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009dc:	200000dc 	.word	0x200000dc

080009e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC_IRQHandler>

080009e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e6:	2003      	movs	r0, #3
 80009e8:	f000 f94c 	bl	8000c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ec:	200f      	movs	r0, #15
 80009ee:	f000 f805 	bl	80009fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f2:	f7ff fed7 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	bd80      	pop	{r7, pc}

080009fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x54>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_InitTick+0x58>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f967 	bl	8000cee <HAL_SYSTICK_Config>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00e      	b.n	8000a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d80a      	bhi.n	8000a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a30:	2200      	movs	r2, #0
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295
 8000a38:	f000 f92f 	bl	8000c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <HAL_InitTick+0x5c>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	e000      	b.n	8000a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000004 	.word	0x20000004

08000a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x20>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x24>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_IncTick+0x24>)
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	200000d8 	.word	0x200000d8

08000a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <HAL_GetTick+0x14>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	200000d8 	.word	0x200000d8

08000a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa4:	f7ff ffee 	bl	8000a84 <HAL_GetTick>
 8000aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab4:	d005      	beq.n	8000ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <HAL_Delay+0x44>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4413      	add	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ac2:	bf00      	nop
 8000ac4:	f7ff ffde 	bl	8000a84 <HAL_GetTick>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d8f7      	bhi.n	8000ac4 <HAL_Delay+0x28>
  {
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000008 	.word	0x20000008

08000ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <__NVIC_SetPriorityGrouping+0x40>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b00:	4013      	ands	r3, r2
 8000b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <__NVIC_SetPriorityGrouping+0x40>)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00
 8000b28:	05fa0000 	.word	0x05fa0000

08000b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <__NVIC_GetPriorityGrouping+0x18>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	f003 0307 	and.w	r3, r3, #7
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	db0b      	blt.n	8000b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	f003 021f 	and.w	r2, r3, #31
 8000b60:	4907      	ldr	r1, [pc, #28]	; (8000b80 <__NVIC_EnableIRQ+0x38>)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	095b      	lsrs	r3, r3, #5
 8000b68:	2001      	movs	r0, #1
 8000b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000e100 	.word	0xe000e100

08000b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	db0a      	blt.n	8000bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	490c      	ldr	r1, [pc, #48]	; (8000bd0 <__NVIC_SetPriority+0x4c>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	0112      	lsls	r2, r2, #4
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	440b      	add	r3, r1
 8000ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bac:	e00a      	b.n	8000bc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4908      	ldr	r1, [pc, #32]	; (8000bd4 <__NVIC_SetPriority+0x50>)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	f003 030f 	and.w	r3, r3, #15
 8000bba:	3b04      	subs	r3, #4
 8000bbc:	0112      	lsls	r2, r2, #4
 8000bbe:	b2d2      	uxtb	r2, r2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	761a      	strb	r2, [r3, #24]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000e100 	.word	0xe000e100
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b089      	sub	sp, #36	; 0x24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	f1c3 0307 	rsb	r3, r3, #7
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	bf28      	it	cs
 8000bf6:	2304      	movcs	r3, #4
 8000bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	2b06      	cmp	r3, #6
 8000c00:	d902      	bls.n	8000c08 <NVIC_EncodePriority+0x30>
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3b03      	subs	r3, #3
 8000c06:	e000      	b.n	8000c0a <NVIC_EncodePriority+0x32>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43da      	mvns	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c20:	f04f 31ff 	mov.w	r1, #4294967295
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	43d9      	mvns	r1, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	4313      	orrs	r3, r2
         );
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3724      	adds	r7, #36	; 0x24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
	...

08000c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c50:	d301      	bcc.n	8000c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00f      	b.n	8000c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c56:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <SysTick_Config+0x40>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5e:	210f      	movs	r1, #15
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f7ff ff8e 	bl	8000b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <SysTick_Config+0x40>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <SysTick_Config+0x40>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	e000e010 	.word	0xe000e010

08000c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ff29 	bl	8000ae4 <__NVIC_SetPriorityGrouping>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
 8000ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cac:	f7ff ff3e 	bl	8000b2c <__NVIC_GetPriorityGrouping>
 8000cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	6978      	ldr	r0, [r7, #20]
 8000cb8:	f7ff ff8e 	bl	8000bd8 <NVIC_EncodePriority>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff5d 	bl	8000b84 <__NVIC_SetPriority>
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff31 	bl	8000b48 <__NVIC_EnableIRQ>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ffa2 	bl	8000c40 <SysTick_Config>
 8000cfc:	4603      	mov	r3, r0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d14:	f7ff feb6 	bl	8000a84 <HAL_GetTick>
 8000d18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d101      	bne.n	8000d24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e099      	b.n	8000e58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2202      	movs	r2, #2
 8000d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f022 0201 	bic.w	r2, r2, #1
 8000d42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d44:	e00f      	b.n	8000d66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d46:	f7ff fe9d 	bl	8000a84 <HAL_GetTick>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	2b05      	cmp	r3, #5
 8000d52:	d908      	bls.n	8000d66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2220      	movs	r2, #32
 8000d58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e078      	b.n	8000e58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1e8      	bne.n	8000d46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	4b38      	ldr	r3, [pc, #224]	; (8000e60 <HAL_DMA_Init+0x158>)
 8000d80:	4013      	ands	r3, r2
 8000d82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a1b      	ldr	r3, [r3, #32]
 8000db0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbc:	2b04      	cmp	r3, #4
 8000dbe:	d107      	bne.n	8000dd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	f023 0307 	bic.w	r3, r3, #7
 8000de6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	d117      	bne.n	8000e2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d00e      	beq.n	8000e2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 fa77 	bl	8001300 <DMA_CheckFifoParam>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d008      	beq.n	8000e2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2240      	movs	r2, #64	; 0x40
 8000e1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2201      	movs	r2, #1
 8000e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e26:	2301      	movs	r3, #1
 8000e28:	e016      	b.n	8000e58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 fa2e 	bl	8001294 <DMA_CalcBaseAndBitshift>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e40:	223f      	movs	r2, #63	; 0x3f
 8000e42:	409a      	lsls	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2201      	movs	r2, #1
 8000e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	e010803f 	.word	0xe010803f

08000e64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d101      	bne.n	8000e8a <HAL_DMA_Start_IT+0x26>
 8000e86:	2302      	movs	r3, #2
 8000e88:	e048      	b.n	8000f1c <HAL_DMA_Start_IT+0xb8>
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d137      	bne.n	8000f0e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	68b9      	ldr	r1, [r7, #8]
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	f000 f9c0 	bl	8001238 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ebc:	223f      	movs	r2, #63	; 0x3f
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f042 0216 	orr.w	r2, r2, #22
 8000ed2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	695a      	ldr	r2, [r3, #20]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ee2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d007      	beq.n	8000efc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f042 0208 	orr.w	r2, r2, #8
 8000efa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 0201 	orr.w	r2, r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	e005      	b.n	8000f1a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f16:	2302      	movs	r3, #2
 8000f18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8000f30:	4b8e      	ldr	r3, [pc, #568]	; (800116c <HAL_DMA_IRQHandler+0x248>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a8e      	ldr	r2, [pc, #568]	; (8001170 <HAL_DMA_IRQHandler+0x24c>)
 8000f36:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3a:	0a9b      	lsrs	r3, r3, #10
 8000f3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f4e:	2208      	movs	r2, #8
 8000f50:	409a      	lsls	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4013      	ands	r3, r2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d01a      	beq.n	8000f90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d013      	beq.n	8000f90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0204 	bic.w	r2, r2, #4
 8000f76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f7c:	2208      	movs	r2, #8
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f88:	f043 0201 	orr.w	r2, r3, #1
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f94:	2201      	movs	r2, #1
 8000f96:	409a      	lsls	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d012      	beq.n	8000fc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00b      	beq.n	8000fc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fbe:	f043 0202 	orr.w	r2, r3, #2
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fca:	2204      	movs	r2, #4
 8000fcc:	409a      	lsls	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d012      	beq.n	8000ffc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00b      	beq.n	8000ffc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fe8:	2204      	movs	r2, #4
 8000fea:	409a      	lsls	r2, r3
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ff4:	f043 0204 	orr.w	r2, r3, #4
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001000:	2210      	movs	r2, #16
 8001002:	409a      	lsls	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4013      	ands	r3, r2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d043      	beq.n	8001094 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	2b00      	cmp	r3, #0
 8001018:	d03c      	beq.n	8001094 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800101e:	2210      	movs	r2, #16
 8001020:	409a      	lsls	r2, r3
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d018      	beq.n	8001066 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d108      	bne.n	8001054 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	2b00      	cmp	r3, #0
 8001048:	d024      	beq.n	8001094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	4798      	blx	r3
 8001052:	e01f      	b.n	8001094 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001058:	2b00      	cmp	r3, #0
 800105a:	d01b      	beq.n	8001094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	4798      	blx	r3
 8001064:	e016      	b.n	8001094 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001070:	2b00      	cmp	r3, #0
 8001072:	d107      	bne.n	8001084 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0208 	bic.w	r2, r2, #8
 8001082:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001098:	2220      	movs	r2, #32
 800109a:	409a      	lsls	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4013      	ands	r3, r2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f000 808f 	beq.w	80011c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0310 	and.w	r3, r3, #16
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 8087 	beq.w	80011c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ba:	2220      	movs	r2, #32
 80010bc:	409a      	lsls	r2, r3
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b05      	cmp	r3, #5
 80010cc:	d136      	bne.n	800113c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0216 	bic.w	r2, r2, #22
 80010dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	695a      	ldr	r2, [r3, #20]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d103      	bne.n	80010fe <HAL_DMA_IRQHandler+0x1da>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d007      	beq.n	800110e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0208 	bic.w	r2, r2, #8
 800110c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001112:	223f      	movs	r2, #63	; 0x3f
 8001114:	409a      	lsls	r2, r3
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800112e:	2b00      	cmp	r3, #0
 8001130:	d07e      	beq.n	8001230 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	4798      	blx	r3
        }
        return;
 800113a:	e079      	b.n	8001230 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d01d      	beq.n	8001186 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10d      	bne.n	8001174 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115c:	2b00      	cmp	r3, #0
 800115e:	d031      	beq.n	80011c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	4798      	blx	r3
 8001168:	e02c      	b.n	80011c4 <HAL_DMA_IRQHandler+0x2a0>
 800116a:	bf00      	nop
 800116c:	20000000 	.word	0x20000000
 8001170:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001178:	2b00      	cmp	r3, #0
 800117a:	d023      	beq.n	80011c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	4798      	blx	r3
 8001184:	e01e      	b.n	80011c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10f      	bne.n	80011b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0210 	bic.w	r2, r2, #16
 80011a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d032      	beq.n	8001232 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d022      	beq.n	800121e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2205      	movs	r2, #5
 80011dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0201 	bic.w	r2, r2, #1
 80011ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	3301      	adds	r3, #1
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d307      	bcc.n	800120c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f2      	bne.n	80011f0 <HAL_DMA_IRQHandler+0x2cc>
 800120a:	e000      	b.n	800120e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800120c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2201      	movs	r2, #1
 8001212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	2b00      	cmp	r3, #0
 8001224:	d005      	beq.n	8001232 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	4798      	blx	r3
 800122e:	e000      	b.n	8001232 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001230:	bf00      	nop
    }
  }
}
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001254:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2b40      	cmp	r3, #64	; 0x40
 8001264:	d108      	bne.n	8001278 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001276:	e007      	b.n	8001288 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	60da      	str	r2, [r3, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	3b10      	subs	r3, #16
 80012a4:	4a13      	ldr	r2, [pc, #76]	; (80012f4 <DMA_CalcBaseAndBitshift+0x60>)
 80012a6:	fba2 2303 	umull	r2, r3, r2, r3
 80012aa:	091b      	lsrs	r3, r3, #4
 80012ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <DMA_CalcBaseAndBitshift+0x64>)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d908      	bls.n	80012d4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <DMA_CalcBaseAndBitshift+0x68>)
 80012ca:	4013      	ands	r3, r2
 80012cc:	1d1a      	adds	r2, r3, #4
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	659a      	str	r2, [r3, #88]	; 0x58
 80012d2:	e006      	b.n	80012e2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <DMA_CalcBaseAndBitshift+0x68>)
 80012dc:	4013      	ands	r3, r2
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	aaaaaaab 	.word	0xaaaaaaab
 80012f8:	0800345c 	.word	0x0800345c
 80012fc:	fffffc00 	.word	0xfffffc00

08001300 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001310:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d11f      	bne.n	800135a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	2b03      	cmp	r3, #3
 800131e:	d856      	bhi.n	80013ce <DMA_CheckFifoParam+0xce>
 8001320:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <DMA_CheckFifoParam+0x28>)
 8001322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001326:	bf00      	nop
 8001328:	08001339 	.word	0x08001339
 800132c:	0800134b 	.word	0x0800134b
 8001330:	08001339 	.word	0x08001339
 8001334:	080013cf 	.word	0x080013cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d046      	beq.n	80013d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001348:	e043      	b.n	80013d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001352:	d140      	bne.n	80013d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001358:	e03d      	b.n	80013d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001362:	d121      	bne.n	80013a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2b03      	cmp	r3, #3
 8001368:	d837      	bhi.n	80013da <DMA_CheckFifoParam+0xda>
 800136a:	a201      	add	r2, pc, #4	; (adr r2, 8001370 <DMA_CheckFifoParam+0x70>)
 800136c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001370:	08001381 	.word	0x08001381
 8001374:	08001387 	.word	0x08001387
 8001378:	08001381 	.word	0x08001381
 800137c:	08001399 	.word	0x08001399
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	73fb      	strb	r3, [r7, #15]
      break;
 8001384:	e030      	b.n	80013e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d025      	beq.n	80013de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001396:	e022      	b.n	80013de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013a0:	d11f      	bne.n	80013e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80013a6:	e01c      	b.n	80013e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d903      	bls.n	80013b6 <DMA_CheckFifoParam+0xb6>
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d003      	beq.n	80013bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80013b4:	e018      	b.n	80013e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	73fb      	strb	r3, [r7, #15]
      break;
 80013ba:	e015      	b.n	80013e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00e      	beq.n	80013e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
      break;
 80013cc:	e00b      	b.n	80013e6 <DMA_CheckFifoParam+0xe6>
      break;
 80013ce:	bf00      	nop
 80013d0:	e00a      	b.n	80013e8 <DMA_CheckFifoParam+0xe8>
      break;
 80013d2:	bf00      	nop
 80013d4:	e008      	b.n	80013e8 <DMA_CheckFifoParam+0xe8>
      break;
 80013d6:	bf00      	nop
 80013d8:	e006      	b.n	80013e8 <DMA_CheckFifoParam+0xe8>
      break;
 80013da:	bf00      	nop
 80013dc:	e004      	b.n	80013e8 <DMA_CheckFifoParam+0xe8>
      break;
 80013de:	bf00      	nop
 80013e0:	e002      	b.n	80013e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80013e2:	bf00      	nop
 80013e4:	e000      	b.n	80013e8 <DMA_CheckFifoParam+0xe8>
      break;
 80013e6:	bf00      	nop
    }
  } 
  
  return status; 
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop

080013f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
 8001416:	e175      	b.n	8001704 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001418:	2201      	movs	r2, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	429a      	cmp	r2, r3
 8001432:	f040 8164 	bne.w	80016fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	2b01      	cmp	r3, #1
 8001440:	d005      	beq.n	800144e <HAL_GPIO_Init+0x56>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d130      	bne.n	80014b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	2203      	movs	r2, #3
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	68da      	ldr	r2, [r3, #12]
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001484:	2201      	movs	r2, #1
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	091b      	lsrs	r3, r3, #4
 800149a:	f003 0201 	and.w	r2, r3, #1
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d017      	beq.n	80014ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	2203      	movs	r2, #3
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d123      	bne.n	8001540 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	08da      	lsrs	r2, r3, #3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3208      	adds	r2, #8
 8001500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	220f      	movs	r2, #15
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	08da      	lsrs	r2, r3, #3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3208      	adds	r2, #8
 800153a:	69b9      	ldr	r1, [r7, #24]
 800153c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	2203      	movs	r2, #3
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0203 	and.w	r2, r3, #3
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 80be 	beq.w	80016fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	4b66      	ldr	r3, [pc, #408]	; (800171c <HAL_GPIO_Init+0x324>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a65      	ldr	r2, [pc, #404]	; (800171c <HAL_GPIO_Init+0x324>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b63      	ldr	r3, [pc, #396]	; (800171c <HAL_GPIO_Init+0x324>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800159a:	4a61      	ldr	r2, [pc, #388]	; (8001720 <HAL_GPIO_Init+0x328>)
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	3302      	adds	r3, #2
 80015a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	220f      	movs	r2, #15
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a58      	ldr	r2, [pc, #352]	; (8001724 <HAL_GPIO_Init+0x32c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d037      	beq.n	8001636 <HAL_GPIO_Init+0x23e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a57      	ldr	r2, [pc, #348]	; (8001728 <HAL_GPIO_Init+0x330>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d031      	beq.n	8001632 <HAL_GPIO_Init+0x23a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a56      	ldr	r2, [pc, #344]	; (800172c <HAL_GPIO_Init+0x334>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d02b      	beq.n	800162e <HAL_GPIO_Init+0x236>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a55      	ldr	r2, [pc, #340]	; (8001730 <HAL_GPIO_Init+0x338>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d025      	beq.n	800162a <HAL_GPIO_Init+0x232>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a54      	ldr	r2, [pc, #336]	; (8001734 <HAL_GPIO_Init+0x33c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d01f      	beq.n	8001626 <HAL_GPIO_Init+0x22e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a53      	ldr	r2, [pc, #332]	; (8001738 <HAL_GPIO_Init+0x340>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d019      	beq.n	8001622 <HAL_GPIO_Init+0x22a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a52      	ldr	r2, [pc, #328]	; (800173c <HAL_GPIO_Init+0x344>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d013      	beq.n	800161e <HAL_GPIO_Init+0x226>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a51      	ldr	r2, [pc, #324]	; (8001740 <HAL_GPIO_Init+0x348>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d00d      	beq.n	800161a <HAL_GPIO_Init+0x222>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a50      	ldr	r2, [pc, #320]	; (8001744 <HAL_GPIO_Init+0x34c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d007      	beq.n	8001616 <HAL_GPIO_Init+0x21e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4f      	ldr	r2, [pc, #316]	; (8001748 <HAL_GPIO_Init+0x350>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d101      	bne.n	8001612 <HAL_GPIO_Init+0x21a>
 800160e:	2309      	movs	r3, #9
 8001610:	e012      	b.n	8001638 <HAL_GPIO_Init+0x240>
 8001612:	230a      	movs	r3, #10
 8001614:	e010      	b.n	8001638 <HAL_GPIO_Init+0x240>
 8001616:	2308      	movs	r3, #8
 8001618:	e00e      	b.n	8001638 <HAL_GPIO_Init+0x240>
 800161a:	2307      	movs	r3, #7
 800161c:	e00c      	b.n	8001638 <HAL_GPIO_Init+0x240>
 800161e:	2306      	movs	r3, #6
 8001620:	e00a      	b.n	8001638 <HAL_GPIO_Init+0x240>
 8001622:	2305      	movs	r3, #5
 8001624:	e008      	b.n	8001638 <HAL_GPIO_Init+0x240>
 8001626:	2304      	movs	r3, #4
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x240>
 800162a:	2303      	movs	r3, #3
 800162c:	e004      	b.n	8001638 <HAL_GPIO_Init+0x240>
 800162e:	2302      	movs	r3, #2
 8001630:	e002      	b.n	8001638 <HAL_GPIO_Init+0x240>
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <HAL_GPIO_Init+0x240>
 8001636:	2300      	movs	r3, #0
 8001638:	69fa      	ldr	r2, [r7, #28]
 800163a:	f002 0203 	and.w	r2, r2, #3
 800163e:	0092      	lsls	r2, r2, #2
 8001640:	4093      	lsls	r3, r2
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001648:	4935      	ldr	r1, [pc, #212]	; (8001720 <HAL_GPIO_Init+0x328>)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	3302      	adds	r3, #2
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001656:	4b3d      	ldr	r3, [pc, #244]	; (800174c <HAL_GPIO_Init+0x354>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800167a:	4a34      	ldr	r2, [pc, #208]	; (800174c <HAL_GPIO_Init+0x354>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001680:	4b32      	ldr	r3, [pc, #200]	; (800174c <HAL_GPIO_Init+0x354>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016a4:	4a29      	ldr	r2, [pc, #164]	; (800174c <HAL_GPIO_Init+0x354>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016aa:	4b28      	ldr	r3, [pc, #160]	; (800174c <HAL_GPIO_Init+0x354>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ce:	4a1f      	ldr	r2, [pc, #124]	; (800174c <HAL_GPIO_Init+0x354>)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016d4:	4b1d      	ldr	r3, [pc, #116]	; (800174c <HAL_GPIO_Init+0x354>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016f8:	4a14      	ldr	r2, [pc, #80]	; (800174c <HAL_GPIO_Init+0x354>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3301      	adds	r3, #1
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	2b0f      	cmp	r3, #15
 8001708:	f67f ae86 	bls.w	8001418 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40013800 	.word	0x40013800
 8001724:	40020000 	.word	0x40020000
 8001728:	40020400 	.word	0x40020400
 800172c:	40020800 	.word	0x40020800
 8001730:	40020c00 	.word	0x40020c00
 8001734:	40021000 	.word	0x40021000
 8001738:	40021400 	.word	0x40021400
 800173c:	40021800 	.word	0x40021800
 8001740:	40021c00 	.word	0x40021c00
 8001744:	40022000 	.word	0x40022000
 8001748:	40022400 	.word	0x40022400
 800174c:	40013c00 	.word	0x40013c00

08001750 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001758:	2300      	movs	r3, #0
 800175a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e29b      	b.n	8001c9e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 8087 	beq.w	8001882 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001774:	4b96      	ldr	r3, [pc, #600]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b04      	cmp	r3, #4
 800177e:	d00c      	beq.n	800179a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001780:	4b93      	ldr	r3, [pc, #588]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 030c 	and.w	r3, r3, #12
 8001788:	2b08      	cmp	r3, #8
 800178a:	d112      	bne.n	80017b2 <HAL_RCC_OscConfig+0x62>
 800178c:	4b90      	ldr	r3, [pc, #576]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001794:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001798:	d10b      	bne.n	80017b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179a:	4b8d      	ldr	r3, [pc, #564]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d06c      	beq.n	8001880 <HAL_RCC_OscConfig+0x130>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d168      	bne.n	8001880 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e275      	b.n	8001c9e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ba:	d106      	bne.n	80017ca <HAL_RCC_OscConfig+0x7a>
 80017bc:	4b84      	ldr	r3, [pc, #528]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a83      	ldr	r2, [pc, #524]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 80017c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	e02e      	b.n	8001828 <HAL_RCC_OscConfig+0xd8>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10c      	bne.n	80017ec <HAL_RCC_OscConfig+0x9c>
 80017d2:	4b7f      	ldr	r3, [pc, #508]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a7e      	ldr	r2, [pc, #504]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 80017d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b7c      	ldr	r3, [pc, #496]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a7b      	ldr	r2, [pc, #492]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 80017e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	e01d      	b.n	8001828 <HAL_RCC_OscConfig+0xd8>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017f4:	d10c      	bne.n	8001810 <HAL_RCC_OscConfig+0xc0>
 80017f6:	4b76      	ldr	r3, [pc, #472]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a75      	ldr	r2, [pc, #468]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 80017fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	4b73      	ldr	r3, [pc, #460]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a72      	ldr	r2, [pc, #456]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 8001808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e00b      	b.n	8001828 <HAL_RCC_OscConfig+0xd8>
 8001810:	4b6f      	ldr	r3, [pc, #444]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a6e      	ldr	r2, [pc, #440]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 8001816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b6c      	ldr	r3, [pc, #432]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a6b      	ldr	r2, [pc, #428]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 8001822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d013      	beq.n	8001858 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff f928 	bl	8000a84 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001838:	f7ff f924 	bl	8000a84 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b64      	cmp	r3, #100	; 0x64
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e229      	b.n	8001c9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	4b61      	ldr	r3, [pc, #388]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0xe8>
 8001856:	e014      	b.n	8001882 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff f914 	bl	8000a84 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001860:	f7ff f910 	bl	8000a84 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b64      	cmp	r3, #100	; 0x64
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e215      	b.n	8001c9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001872:	4b57      	ldr	r3, [pc, #348]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x110>
 800187e:	e000      	b.n	8001882 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d069      	beq.n	8001962 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800188e:	4b50      	ldr	r3, [pc, #320]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 030c 	and.w	r3, r3, #12
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00b      	beq.n	80018b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800189a:	4b4d      	ldr	r3, [pc, #308]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 030c 	and.w	r3, r3, #12
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d11c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x190>
 80018a6:	4b4a      	ldr	r3, [pc, #296]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d116      	bne.n	80018e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b2:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d005      	beq.n	80018ca <HAL_RCC_OscConfig+0x17a>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d001      	beq.n	80018ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e1e9      	b.n	8001c9e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ca:	4b41      	ldr	r3, [pc, #260]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	493d      	ldr	r1, [pc, #244]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018de:	e040      	b.n	8001962 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d023      	beq.n	8001930 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e8:	4b39      	ldr	r3, [pc, #228]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a38      	ldr	r2, [pc, #224]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff f8c6 	bl	8000a84 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fc:	f7ff f8c2 	bl	8000a84 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e1c7      	b.n	8001c9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190e:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191a:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4929      	ldr	r1, [pc, #164]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]
 800192e:	e018      	b.n	8001962 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001930:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a26      	ldr	r2, [pc, #152]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 8001936:	f023 0301 	bic.w	r3, r3, #1
 800193a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff f8a2 	bl	8000a84 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001944:	f7ff f89e 	bl	8000a84 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e1a3      	b.n	8001c9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001956:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b00      	cmp	r3, #0
 800196c:	d038      	beq.n	80019e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d019      	beq.n	80019aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 8001978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800197a:	4a15      	ldr	r2, [pc, #84]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001982:	f7ff f87f 	bl	8000a84 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198a:	f7ff f87b 	bl	8000a84 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e180      	b.n	8001c9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 800199e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f0      	beq.n	800198a <HAL_RCC_OscConfig+0x23a>
 80019a8:	e01a      	b.n	80019e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 80019ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ae:	4a08      	ldr	r2, [pc, #32]	; (80019d0 <HAL_RCC_OscConfig+0x280>)
 80019b0:	f023 0301 	bic.w	r3, r3, #1
 80019b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b6:	f7ff f865 	bl	8000a84 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019bc:	e00a      	b.n	80019d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019be:	f7ff f861 	bl	8000a84 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d903      	bls.n	80019d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e166      	b.n	8001c9e <HAL_RCC_OscConfig+0x54e>
 80019d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d4:	4b92      	ldr	r3, [pc, #584]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 80019d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1ee      	bne.n	80019be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 80a4 	beq.w	8001b36 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ee:	4b8c      	ldr	r3, [pc, #560]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10d      	bne.n	8001a16 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	4b89      	ldr	r3, [pc, #548]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	4a88      	ldr	r2, [pc, #544]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	6413      	str	r3, [r2, #64]	; 0x40
 8001a06:	4b86      	ldr	r3, [pc, #536]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a12:	2301      	movs	r3, #1
 8001a14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a16:	4b83      	ldr	r3, [pc, #524]	; (8001c24 <HAL_RCC_OscConfig+0x4d4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d118      	bne.n	8001a54 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a22:	4b80      	ldr	r3, [pc, #512]	; (8001c24 <HAL_RCC_OscConfig+0x4d4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a7f      	ldr	r2, [pc, #508]	; (8001c24 <HAL_RCC_OscConfig+0x4d4>)
 8001a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff f829 	bl	8000a84 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a36:	f7ff f825 	bl	8000a84 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b64      	cmp	r3, #100	; 0x64
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e12a      	b.n	8001c9e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a48:	4b76      	ldr	r3, [pc, #472]	; (8001c24 <HAL_RCC_OscConfig+0x4d4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d106      	bne.n	8001a6a <HAL_RCC_OscConfig+0x31a>
 8001a5c:	4b70      	ldr	r3, [pc, #448]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	4a6f      	ldr	r2, [pc, #444]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6713      	str	r3, [r2, #112]	; 0x70
 8001a68:	e02d      	b.n	8001ac6 <HAL_RCC_OscConfig+0x376>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x33c>
 8001a72:	4b6b      	ldr	r3, [pc, #428]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a76:	4a6a      	ldr	r2, [pc, #424]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001a78:	f023 0301 	bic.w	r3, r3, #1
 8001a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7e:	4b68      	ldr	r3, [pc, #416]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a82:	4a67      	ldr	r2, [pc, #412]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001a84:	f023 0304 	bic.w	r3, r3, #4
 8001a88:	6713      	str	r3, [r2, #112]	; 0x70
 8001a8a:	e01c      	b.n	8001ac6 <HAL_RCC_OscConfig+0x376>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b05      	cmp	r3, #5
 8001a92:	d10c      	bne.n	8001aae <HAL_RCC_OscConfig+0x35e>
 8001a94:	4b62      	ldr	r3, [pc, #392]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a98:	4a61      	ldr	r2, [pc, #388]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001a9a:	f043 0304 	orr.w	r3, r3, #4
 8001a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa0:	4b5f      	ldr	r3, [pc, #380]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa4:	4a5e      	ldr	r2, [pc, #376]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8001aac:	e00b      	b.n	8001ac6 <HAL_RCC_OscConfig+0x376>
 8001aae:	4b5c      	ldr	r3, [pc, #368]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab2:	4a5b      	ldr	r2, [pc, #364]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001ab4:	f023 0301 	bic.w	r3, r3, #1
 8001ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aba:	4b59      	ldr	r3, [pc, #356]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abe:	4a58      	ldr	r2, [pc, #352]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001ac0:	f023 0304 	bic.w	r3, r3, #4
 8001ac4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d015      	beq.n	8001afa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ace:	f7fe ffd9 	bl	8000a84 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad4:	e00a      	b.n	8001aec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad6:	f7fe ffd5 	bl	8000a84 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e0d8      	b.n	8001c9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aec:	4b4c      	ldr	r3, [pc, #304]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0ee      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x386>
 8001af8:	e014      	b.n	8001b24 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afa:	f7fe ffc3 	bl	8000a84 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b00:	e00a      	b.n	8001b18 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b02:	f7fe ffbf 	bl	8000a84 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e0c2      	b.n	8001c9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b18:	4b41      	ldr	r3, [pc, #260]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1ee      	bne.n	8001b02 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b24:	7dfb      	ldrb	r3, [r7, #23]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d105      	bne.n	8001b36 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	4a3c      	ldr	r2, [pc, #240]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80ae 	beq.w	8001c9c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b40:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 030c 	and.w	r3, r3, #12
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d06d      	beq.n	8001c28 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d14b      	bne.n	8001bec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b54:	4b32      	ldr	r3, [pc, #200]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a31      	ldr	r2, [pc, #196]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001b5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b60:	f7fe ff90 	bl	8000a84 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b68:	f7fe ff8c 	bl	8000a84 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e091      	b.n	8001c9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7a:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69da      	ldr	r2, [r3, #28]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	019b      	lsls	r3, r3, #6
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	085b      	lsrs	r3, r3, #1
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	041b      	lsls	r3, r3, #16
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	061b      	lsls	r3, r3, #24
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	071b      	lsls	r3, r3, #28
 8001bb2:	491b      	ldr	r1, [pc, #108]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bb8:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a18      	ldr	r2, [pc, #96]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7fe ff5e 	bl	8000a84 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7fe ff5a 	bl	8000a84 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e05f      	b.n	8001c9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x47c>
 8001bea:	e057      	b.n	8001c9c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7fe ff44 	bl	8000a84 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c00:	f7fe ff40 	bl	8000a84 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e045      	b.n	8001c9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c12:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_RCC_OscConfig+0x4d0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4b0>
 8001c1e:	e03d      	b.n	8001c9c <HAL_RCC_OscConfig+0x54c>
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c28:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <HAL_RCC_OscConfig+0x558>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d030      	beq.n	8001c98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d129      	bne.n	8001c98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d122      	bne.n	8001c98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c58:	4013      	ands	r3, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c5e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d119      	bne.n	8001c98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6e:	085b      	lsrs	r3, r3, #1
 8001c70:	3b01      	subs	r3, #1
 8001c72:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d10f      	bne.n	8001c98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d107      	bne.n	8001c98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800

08001cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0d0      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b6a      	ldr	r3, [pc, #424]	; (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 030f 	and.w	r3, r3, #15
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d910      	bls.n	8001cf4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b67      	ldr	r3, [pc, #412]	; (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 020f 	bic.w	r2, r3, #15
 8001cda:	4965      	ldr	r1, [pc, #404]	; (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b63      	ldr	r3, [pc, #396]	; (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0b8      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d020      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d0c:	4b59      	ldr	r3, [pc, #356]	; (8001e74 <HAL_RCC_ClockConfig+0x1c8>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	4a58      	ldr	r2, [pc, #352]	; (8001e74 <HAL_RCC_ClockConfig+0x1c8>)
 8001d12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d24:	4b53      	ldr	r3, [pc, #332]	; (8001e74 <HAL_RCC_ClockConfig+0x1c8>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	4a52      	ldr	r2, [pc, #328]	; (8001e74 <HAL_RCC_ClockConfig+0x1c8>)
 8001d2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d30:	4b50      	ldr	r3, [pc, #320]	; (8001e74 <HAL_RCC_ClockConfig+0x1c8>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	494d      	ldr	r1, [pc, #308]	; (8001e74 <HAL_RCC_ClockConfig+0x1c8>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d040      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	4b47      	ldr	r3, [pc, #284]	; (8001e74 <HAL_RCC_ClockConfig+0x1c8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d115      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e07f      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6e:	4b41      	ldr	r3, [pc, #260]	; (8001e74 <HAL_RCC_ClockConfig+0x1c8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e073      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <HAL_RCC_ClockConfig+0x1c8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e06b      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d8e:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <HAL_RCC_ClockConfig+0x1c8>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f023 0203 	bic.w	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4936      	ldr	r1, [pc, #216]	; (8001e74 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001da0:	f7fe fe70 	bl	8000a84 <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da8:	f7fe fe6c 	bl	8000a84 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e053      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	4b2d      	ldr	r3, [pc, #180]	; (8001e74 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 020c 	and.w	r2, r3, #12
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d1eb      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd0:	4b27      	ldr	r3, [pc, #156]	; (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d210      	bcs.n	8001e00 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dde:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f023 020f 	bic.w	r2, r3, #15
 8001de6:	4922      	ldr	r1, [pc, #136]	; (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dee:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <HAL_RCC_ClockConfig+0x1c4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d001      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e032      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d008      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e0c:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <HAL_RCC_ClockConfig+0x1c8>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	4916      	ldr	r1, [pc, #88]	; (8001e74 <HAL_RCC_ClockConfig+0x1c8>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d009      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e2a:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_RCC_ClockConfig+0x1c8>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	490e      	ldr	r1, [pc, #56]	; (8001e74 <HAL_RCC_ClockConfig+0x1c8>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e3e:	f000 f821 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8001e42:	4602      	mov	r2, r0
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <HAL_RCC_ClockConfig+0x1c8>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	490a      	ldr	r1, [pc, #40]	; (8001e78 <HAL_RCC_ClockConfig+0x1cc>)
 8001e50:	5ccb      	ldrb	r3, [r1, r3]
 8001e52:	fa22 f303 	lsr.w	r3, r2, r3
 8001e56:	4a09      	ldr	r2, [pc, #36]	; (8001e7c <HAL_RCC_ClockConfig+0x1d0>)
 8001e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_RCC_ClockConfig+0x1d4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fdcc 	bl	80009fc <HAL_InitTick>

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023c00 	.word	0x40023c00
 8001e74:	40023800 	.word	0x40023800
 8001e78:	0800344c 	.word	0x0800344c
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000004 	.word	0x20000004

08001e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e88:	b090      	sub	sp, #64	; 0x40
 8001e8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e90:	2300      	movs	r3, #0
 8001e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e94:	2300      	movs	r3, #0
 8001e96:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e9c:	4b59      	ldr	r3, [pc, #356]	; (8002004 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d00d      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	f200 80a1 	bhi.w	8001ff0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d003      	beq.n	8001ebe <HAL_RCC_GetSysClockFreq+0x3a>
 8001eb6:	e09b      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eb8:	4b53      	ldr	r3, [pc, #332]	; (8002008 <HAL_RCC_GetSysClockFreq+0x184>)
 8001eba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ebc:	e09b      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ebe:	4b53      	ldr	r3, [pc, #332]	; (800200c <HAL_RCC_GetSysClockFreq+0x188>)
 8001ec0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ec2:	e098      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ec4:	4b4f      	ldr	r3, [pc, #316]	; (8002004 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ecc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ece:	4b4d      	ldr	r3, [pc, #308]	; (8002004 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d028      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eda:	4b4a      	ldr	r3, [pc, #296]	; (8002004 <HAL_RCC_GetSysClockFreq+0x180>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	099b      	lsrs	r3, r3, #6
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	623b      	str	r3, [r7, #32]
 8001ee4:	627a      	str	r2, [r7, #36]	; 0x24
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001eec:	2100      	movs	r1, #0
 8001eee:	4b47      	ldr	r3, [pc, #284]	; (800200c <HAL_RCC_GetSysClockFreq+0x188>)
 8001ef0:	fb03 f201 	mul.w	r2, r3, r1
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	fb00 f303 	mul.w	r3, r0, r3
 8001efa:	4413      	add	r3, r2
 8001efc:	4a43      	ldr	r2, [pc, #268]	; (800200c <HAL_RCC_GetSysClockFreq+0x188>)
 8001efe:	fba0 1202 	umull	r1, r2, r0, r2
 8001f02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f04:	460a      	mov	r2, r1
 8001f06:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f0a:	4413      	add	r3, r2
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f10:	2200      	movs	r2, #0
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	61fa      	str	r2, [r7, #28]
 8001f16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f1e:	f7fe f98b 	bl	8000238 <__aeabi_uldivmod>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4613      	mov	r3, r2
 8001f28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f2a:	e053      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f2c:	4b35      	ldr	r3, [pc, #212]	; (8002004 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	099b      	lsrs	r3, r3, #6
 8001f32:	2200      	movs	r2, #0
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	617a      	str	r2, [r7, #20]
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f3e:	f04f 0b00 	mov.w	fp, #0
 8001f42:	4652      	mov	r2, sl
 8001f44:	465b      	mov	r3, fp
 8001f46:	f04f 0000 	mov.w	r0, #0
 8001f4a:	f04f 0100 	mov.w	r1, #0
 8001f4e:	0159      	lsls	r1, r3, #5
 8001f50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f54:	0150      	lsls	r0, r2, #5
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	ebb2 080a 	subs.w	r8, r2, sl
 8001f5e:	eb63 090b 	sbc.w	r9, r3, fp
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f76:	ebb2 0408 	subs.w	r4, r2, r8
 8001f7a:	eb63 0509 	sbc.w	r5, r3, r9
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	00eb      	lsls	r3, r5, #3
 8001f88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f8c:	00e2      	lsls	r2, r4, #3
 8001f8e:	4614      	mov	r4, r2
 8001f90:	461d      	mov	r5, r3
 8001f92:	eb14 030a 	adds.w	r3, r4, sl
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	eb45 030b 	adc.w	r3, r5, fp
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001faa:	4629      	mov	r1, r5
 8001fac:	028b      	lsls	r3, r1, #10
 8001fae:	4621      	mov	r1, r4
 8001fb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fb4:	4621      	mov	r1, r4
 8001fb6:	028a      	lsls	r2, r1, #10
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	60fa      	str	r2, [r7, #12]
 8001fc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fc8:	f7fe f936 	bl	8000238 <__aeabi_uldivmod>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	0c1b      	lsrs	r3, r3, #16
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001fe4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fee:	e002      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ff2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3740      	adds	r7, #64	; 0x40
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	00f42400 	.word	0x00f42400
 800200c:	017d7840 	.word	0x017d7840

08002010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e049      	b.n	80020b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7fe fbd8 	bl	80007ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2202      	movs	r2, #2
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3304      	adds	r3, #4
 800204c:	4619      	mov	r1, r3
 800204e:	4610      	mov	r0, r2
 8002050:	f000 fd78 	bl	8002b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e049      	b.n	8002164 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d106      	bne.n	80020ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f841 	bl	800216c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2202      	movs	r2, #2
 80020ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3304      	adds	r3, #4
 80020fa:	4619      	mov	r1, r3
 80020fc:	4610      	mov	r0, r2
 80020fe:	f000 fd21 	bl	8002b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d109      	bne.n	80021ac <HAL_TIM_PWM_Start_DMA+0x2c>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	bf0c      	ite	eq
 80021a4:	2301      	moveq	r3, #1
 80021a6:	2300      	movne	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	e03c      	b.n	8002226 <HAL_TIM_PWM_Start_DMA+0xa6>
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d109      	bne.n	80021c6 <HAL_TIM_PWM_Start_DMA+0x46>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	bf0c      	ite	eq
 80021be:	2301      	moveq	r3, #1
 80021c0:	2300      	movne	r3, #0
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	e02f      	b.n	8002226 <HAL_TIM_PWM_Start_DMA+0xa6>
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d109      	bne.n	80021e0 <HAL_TIM_PWM_Start_DMA+0x60>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	bf0c      	ite	eq
 80021d8:	2301      	moveq	r3, #1
 80021da:	2300      	movne	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	e022      	b.n	8002226 <HAL_TIM_PWM_Start_DMA+0xa6>
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b0c      	cmp	r3, #12
 80021e4:	d109      	bne.n	80021fa <HAL_TIM_PWM_Start_DMA+0x7a>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	bf0c      	ite	eq
 80021f2:	2301      	moveq	r3, #1
 80021f4:	2300      	movne	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	e015      	b.n	8002226 <HAL_TIM_PWM_Start_DMA+0xa6>
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b10      	cmp	r3, #16
 80021fe:	d109      	bne.n	8002214 <HAL_TIM_PWM_Start_DMA+0x94>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	bf0c      	ite	eq
 800220c:	2301      	moveq	r3, #1
 800220e:	2300      	movne	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	e008      	b.n	8002226 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800222a:	2302      	movs	r3, #2
 800222c:	e1a1      	b.n	8002572 <HAL_TIM_PWM_Start_DMA+0x3f2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d109      	bne.n	8002248 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b01      	cmp	r3, #1
 800223e:	bf0c      	ite	eq
 8002240:	2301      	moveq	r3, #1
 8002242:	2300      	movne	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	e03c      	b.n	80022c2 <HAL_TIM_PWM_Start_DMA+0x142>
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b04      	cmp	r3, #4
 800224c:	d109      	bne.n	8002262 <HAL_TIM_PWM_Start_DMA+0xe2>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	bf0c      	ite	eq
 800225a:	2301      	moveq	r3, #1
 800225c:	2300      	movne	r3, #0
 800225e:	b2db      	uxtb	r3, r3
 8002260:	e02f      	b.n	80022c2 <HAL_TIM_PWM_Start_DMA+0x142>
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b08      	cmp	r3, #8
 8002266:	d109      	bne.n	800227c <HAL_TIM_PWM_Start_DMA+0xfc>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b01      	cmp	r3, #1
 8002272:	bf0c      	ite	eq
 8002274:	2301      	moveq	r3, #1
 8002276:	2300      	movne	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	e022      	b.n	80022c2 <HAL_TIM_PWM_Start_DMA+0x142>
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b0c      	cmp	r3, #12
 8002280:	d109      	bne.n	8002296 <HAL_TIM_PWM_Start_DMA+0x116>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b01      	cmp	r3, #1
 800228c:	bf0c      	ite	eq
 800228e:	2301      	moveq	r3, #1
 8002290:	2300      	movne	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	e015      	b.n	80022c2 <HAL_TIM_PWM_Start_DMA+0x142>
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b10      	cmp	r3, #16
 800229a:	d109      	bne.n	80022b0 <HAL_TIM_PWM_Start_DMA+0x130>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	bf0c      	ite	eq
 80022a8:	2301      	moveq	r3, #1
 80022aa:	2300      	movne	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	e008      	b.n	80022c2 <HAL_TIM_PWM_Start_DMA+0x142>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	bf0c      	ite	eq
 80022bc:	2301      	moveq	r3, #1
 80022be:	2300      	movne	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d034      	beq.n	8002330 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <HAL_TIM_PWM_Start_DMA+0x152>
 80022cc:	887b      	ldrh	r3, [r7, #2]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e14d      	b.n	8002572 <HAL_TIM_PWM_Start_DMA+0x3f2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d104      	bne.n	80022e6 <HAL_TIM_PWM_Start_DMA+0x166>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022e4:	e026      	b.n	8002334 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d104      	bne.n	80022f6 <HAL_TIM_PWM_Start_DMA+0x176>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022f4:	e01e      	b.n	8002334 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d104      	bne.n	8002306 <HAL_TIM_PWM_Start_DMA+0x186>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002304:	e016      	b.n	8002334 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b0c      	cmp	r3, #12
 800230a:	d104      	bne.n	8002316 <HAL_TIM_PWM_Start_DMA+0x196>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002314:	e00e      	b.n	8002334 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b10      	cmp	r3, #16
 800231a:	d104      	bne.n	8002326 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002324:	e006      	b.n	8002334 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2202      	movs	r2, #2
 800232a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800232e:	e001      	b.n	8002334 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e11e      	b.n	8002572 <HAL_TIM_PWM_Start_DMA+0x3f2>
  }

  switch (Channel)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b0c      	cmp	r3, #12
 8002338:	f200 80ae 	bhi.w	8002498 <HAL_TIM_PWM_Start_DMA+0x318>
 800233c:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800233e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002342:	bf00      	nop
 8002344:	08002379 	.word	0x08002379
 8002348:	08002499 	.word	0x08002499
 800234c:	08002499 	.word	0x08002499
 8002350:	08002499 	.word	0x08002499
 8002354:	080023c1 	.word	0x080023c1
 8002358:	08002499 	.word	0x08002499
 800235c:	08002499 	.word	0x08002499
 8002360:	08002499 	.word	0x08002499
 8002364:	08002409 	.word	0x08002409
 8002368:	08002499 	.word	0x08002499
 800236c:	08002499 	.word	0x08002499
 8002370:	08002499 	.word	0x08002499
 8002374:	08002451 	.word	0x08002451
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	4a7f      	ldr	r2, [pc, #508]	; (800257c <HAL_TIM_PWM_Start_DMA+0x3fc>)
 800237e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	4a7e      	ldr	r2, [pc, #504]	; (8002580 <HAL_TIM_PWM_Start_DMA+0x400>)
 8002386:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	4a7d      	ldr	r2, [pc, #500]	; (8002584 <HAL_TIM_PWM_Start_DMA+0x404>)
 800238e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	3334      	adds	r3, #52	; 0x34
 800239c:	461a      	mov	r2, r3
 800239e:	887b      	ldrh	r3, [r7, #2]
 80023a0:	f7fe fd60 	bl	8000e64 <HAL_DMA_Start_IT>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e0e1      	b.n	8002572 <HAL_TIM_PWM_Start_DMA+0x3f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023bc:	60da      	str	r2, [r3, #12]
      break;
 80023be:	e06e      	b.n	800249e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c4:	4a6d      	ldr	r2, [pc, #436]	; (800257c <HAL_TIM_PWM_Start_DMA+0x3fc>)
 80023c6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	4a6c      	ldr	r2, [pc, #432]	; (8002580 <HAL_TIM_PWM_Start_DMA+0x400>)
 80023ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	4a6b      	ldr	r2, [pc, #428]	; (8002584 <HAL_TIM_PWM_Start_DMA+0x404>)
 80023d6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	3338      	adds	r3, #56	; 0x38
 80023e4:	461a      	mov	r2, r3
 80023e6:	887b      	ldrh	r3, [r7, #2]
 80023e8:	f7fe fd3c 	bl	8000e64 <HAL_DMA_Start_IT>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e0bd      	b.n	8002572 <HAL_TIM_PWM_Start_DMA+0x3f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002404:	60da      	str	r2, [r3, #12]
      break;
 8002406:	e04a      	b.n	800249e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	4a5b      	ldr	r2, [pc, #364]	; (800257c <HAL_TIM_PWM_Start_DMA+0x3fc>)
 800240e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	4a5a      	ldr	r2, [pc, #360]	; (8002580 <HAL_TIM_PWM_Start_DMA+0x400>)
 8002416:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	4a59      	ldr	r2, [pc, #356]	; (8002584 <HAL_TIM_PWM_Start_DMA+0x404>)
 800241e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	333c      	adds	r3, #60	; 0x3c
 800242c:	461a      	mov	r2, r3
 800242e:	887b      	ldrh	r3, [r7, #2]
 8002430:	f7fe fd18 	bl	8000e64 <HAL_DMA_Start_IT>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e099      	b.n	8002572 <HAL_TIM_PWM_Start_DMA+0x3f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800244c:	60da      	str	r2, [r3, #12]
      break;
 800244e:	e026      	b.n	800249e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	4a49      	ldr	r2, [pc, #292]	; (800257c <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8002456:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	4a48      	ldr	r2, [pc, #288]	; (8002580 <HAL_TIM_PWM_Start_DMA+0x400>)
 800245e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	4a47      	ldr	r2, [pc, #284]	; (8002584 <HAL_TIM_PWM_Start_DMA+0x404>)
 8002466:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	3340      	adds	r3, #64	; 0x40
 8002474:	461a      	mov	r2, r3
 8002476:	887b      	ldrh	r3, [r7, #2]
 8002478:	f7fe fcf4 	bl	8000e64 <HAL_DMA_Start_IT>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e075      	b.n	8002572 <HAL_TIM_PWM_Start_DMA+0x3f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002494:	60da      	str	r2, [r3, #12]
      break;
 8002496:	e002      	b.n	800249e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	75fb      	strb	r3, [r7, #23]
      break;
 800249c:	bf00      	nop
  }

  if (status == HAL_OK)
 800249e:	7dfb      	ldrb	r3, [r7, #23]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d165      	bne.n	8002570 <HAL_TIM_PWM_Start_DMA+0x3f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2201      	movs	r2, #1
 80024aa:	68b9      	ldr	r1, [r7, #8]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fee1 	bl	8003274 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a34      	ldr	r2, [pc, #208]	; (8002588 <HAL_TIM_PWM_Start_DMA+0x408>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d004      	beq.n	80024c6 <HAL_TIM_PWM_Start_DMA+0x346>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a32      	ldr	r2, [pc, #200]	; (800258c <HAL_TIM_PWM_Start_DMA+0x40c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d101      	bne.n	80024ca <HAL_TIM_PWM_Start_DMA+0x34a>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_TIM_PWM_Start_DMA+0x34c>
 80024ca:	2300      	movs	r3, #0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d007      	beq.n	80024e0 <HAL_TIM_PWM_Start_DMA+0x360>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a28      	ldr	r2, [pc, #160]	; (8002588 <HAL_TIM_PWM_Start_DMA+0x408>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d022      	beq.n	8002530 <HAL_TIM_PWM_Start_DMA+0x3b0>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f2:	d01d      	beq.n	8002530 <HAL_TIM_PWM_Start_DMA+0x3b0>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a25      	ldr	r2, [pc, #148]	; (8002590 <HAL_TIM_PWM_Start_DMA+0x410>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d018      	beq.n	8002530 <HAL_TIM_PWM_Start_DMA+0x3b0>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a24      	ldr	r2, [pc, #144]	; (8002594 <HAL_TIM_PWM_Start_DMA+0x414>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d013      	beq.n	8002530 <HAL_TIM_PWM_Start_DMA+0x3b0>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a22      	ldr	r2, [pc, #136]	; (8002598 <HAL_TIM_PWM_Start_DMA+0x418>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00e      	beq.n	8002530 <HAL_TIM_PWM_Start_DMA+0x3b0>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a1d      	ldr	r2, [pc, #116]	; (800258c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d009      	beq.n	8002530 <HAL_TIM_PWM_Start_DMA+0x3b0>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a1e      	ldr	r2, [pc, #120]	; (800259c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d004      	beq.n	8002530 <HAL_TIM_PWM_Start_DMA+0x3b0>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a1d      	ldr	r2, [pc, #116]	; (80025a0 <HAL_TIM_PWM_Start_DMA+0x420>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d115      	bne.n	800255c <HAL_TIM_PWM_Start_DMA+0x3dc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_TIM_PWM_Start_DMA+0x424>)
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	2b06      	cmp	r3, #6
 8002540:	d015      	beq.n	800256e <HAL_TIM_PWM_Start_DMA+0x3ee>
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002548:	d011      	beq.n	800256e <HAL_TIM_PWM_Start_DMA+0x3ee>
      {
        __HAL_TIM_ENABLE(htim);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0201 	orr.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255a:	e008      	b.n	800256e <HAL_TIM_PWM_Start_DMA+0x3ee>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	e000      	b.n	8002570 <HAL_TIM_PWM_Start_DMA+0x3f0>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800256e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002570:	7dfb      	ldrb	r3, [r7, #23]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	08002a33 	.word	0x08002a33
 8002580:	08002adb 	.word	0x08002adb
 8002584:	080029a1 	.word	0x080029a1
 8002588:	40010000 	.word	0x40010000
 800258c:	40010400 	.word	0x40010400
 8002590:	40000400 	.word	0x40000400
 8002594:	40000800 	.word	0x40000800
 8002598:	40000c00 	.word	0x40000c00
 800259c:	40014000 	.word	0x40014000
 80025a0:	40001800 	.word	0x40001800
 80025a4:	00010007 	.word	0x00010007

080025a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e0ff      	b.n	80027c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b14      	cmp	r3, #20
 80025d2:	f200 80f0 	bhi.w	80027b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80025d6:	a201      	add	r2, pc, #4	; (adr r2, 80025dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025dc:	08002631 	.word	0x08002631
 80025e0:	080027b7 	.word	0x080027b7
 80025e4:	080027b7 	.word	0x080027b7
 80025e8:	080027b7 	.word	0x080027b7
 80025ec:	08002671 	.word	0x08002671
 80025f0:	080027b7 	.word	0x080027b7
 80025f4:	080027b7 	.word	0x080027b7
 80025f8:	080027b7 	.word	0x080027b7
 80025fc:	080026b3 	.word	0x080026b3
 8002600:	080027b7 	.word	0x080027b7
 8002604:	080027b7 	.word	0x080027b7
 8002608:	080027b7 	.word	0x080027b7
 800260c:	080026f3 	.word	0x080026f3
 8002610:	080027b7 	.word	0x080027b7
 8002614:	080027b7 	.word	0x080027b7
 8002618:	080027b7 	.word	0x080027b7
 800261c:	08002735 	.word	0x08002735
 8002620:	080027b7 	.word	0x080027b7
 8002624:	080027b7 	.word	0x080027b7
 8002628:	080027b7 	.word	0x080027b7
 800262c:	08002775 	.word	0x08002775
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	4618      	mov	r0, r3
 8002638:	f000 fb24 	bl	8002c84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0208 	orr.w	r2, r2, #8
 800264a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0204 	bic.w	r2, r2, #4
 800265a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6999      	ldr	r1, [r3, #24]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	619a      	str	r2, [r3, #24]
      break;
 800266e:	e0a5      	b.n	80027bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	4618      	mov	r0, r3
 8002678:	f000 fb76 	bl	8002d68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699a      	ldr	r2, [r3, #24]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800268a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800269a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6999      	ldr	r1, [r3, #24]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	021a      	lsls	r2, r3, #8
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	619a      	str	r2, [r3, #24]
      break;
 80026b0:	e084      	b.n	80027bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fbcd 	bl	8002e58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69da      	ldr	r2, [r3, #28]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0208 	orr.w	r2, r2, #8
 80026cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	69da      	ldr	r2, [r3, #28]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0204 	bic.w	r2, r2, #4
 80026dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	69d9      	ldr	r1, [r3, #28]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	61da      	str	r2, [r3, #28]
      break;
 80026f0:	e064      	b.n	80027bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fc23 	bl	8002f44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	69da      	ldr	r2, [r3, #28]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800270c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	69da      	ldr	r2, [r3, #28]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69d9      	ldr	r1, [r3, #28]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	021a      	lsls	r2, r3, #8
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	61da      	str	r2, [r3, #28]
      break;
 8002732:	e043      	b.n	80027bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fc5a 	bl	8002ff4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0208 	orr.w	r2, r2, #8
 800274e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0204 	bic.w	r2, r2, #4
 800275e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002772:	e023      	b.n	80027bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fc8c 	bl	8003098 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800278e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800279e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	021a      	lsls	r2, r3, #8
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80027b4:	e002      	b.n	80027bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	75fb      	strb	r3, [r7, #23]
      break;
 80027ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop

080027d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_TIM_ConfigClockSource+0x1c>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e0b4      	b.n	8002956 <HAL_TIM_ConfigClockSource+0x186>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	4b56      	ldr	r3, [pc, #344]	; (8002960 <HAL_TIM_ConfigClockSource+0x190>)
 8002808:	4013      	ands	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002812:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002824:	d03e      	beq.n	80028a4 <HAL_TIM_ConfigClockSource+0xd4>
 8002826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282a:	f200 8087 	bhi.w	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800282e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002832:	f000 8086 	beq.w	8002942 <HAL_TIM_ConfigClockSource+0x172>
 8002836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283a:	d87f      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800283c:	2b70      	cmp	r3, #112	; 0x70
 800283e:	d01a      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0xa6>
 8002840:	2b70      	cmp	r3, #112	; 0x70
 8002842:	d87b      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 8002844:	2b60      	cmp	r3, #96	; 0x60
 8002846:	d050      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0x11a>
 8002848:	2b60      	cmp	r3, #96	; 0x60
 800284a:	d877      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800284c:	2b50      	cmp	r3, #80	; 0x50
 800284e:	d03c      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0xfa>
 8002850:	2b50      	cmp	r3, #80	; 0x50
 8002852:	d873      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 8002854:	2b40      	cmp	r3, #64	; 0x40
 8002856:	d058      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x13a>
 8002858:	2b40      	cmp	r3, #64	; 0x40
 800285a:	d86f      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800285c:	2b30      	cmp	r3, #48	; 0x30
 800285e:	d064      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x15a>
 8002860:	2b30      	cmp	r3, #48	; 0x30
 8002862:	d86b      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 8002864:	2b20      	cmp	r3, #32
 8002866:	d060      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x15a>
 8002868:	2b20      	cmp	r3, #32
 800286a:	d867      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800286c:	2b00      	cmp	r3, #0
 800286e:	d05c      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x15a>
 8002870:	2b10      	cmp	r3, #16
 8002872:	d05a      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x15a>
 8002874:	e062      	b.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6899      	ldr	r1, [r3, #8]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f000 fcd5 	bl	8003234 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002898:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	609a      	str	r2, [r3, #8]
      break;
 80028a2:	e04f      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	6899      	ldr	r1, [r3, #8]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f000 fcbe 	bl	8003234 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028c6:	609a      	str	r2, [r3, #8]
      break;
 80028c8:	e03c      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6859      	ldr	r1, [r3, #4]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	461a      	mov	r2, r3
 80028d8:	f000 fc32 	bl	8003140 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2150      	movs	r1, #80	; 0x50
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fc8b 	bl	80031fe <TIM_ITRx_SetConfig>
      break;
 80028e8:	e02c      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6859      	ldr	r1, [r3, #4]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	461a      	mov	r2, r3
 80028f8:	f000 fc51 	bl	800319e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2160      	movs	r1, #96	; 0x60
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fc7b 	bl	80031fe <TIM_ITRx_SetConfig>
      break;
 8002908:	e01c      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6859      	ldr	r1, [r3, #4]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	461a      	mov	r2, r3
 8002918:	f000 fc12 	bl	8003140 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2140      	movs	r1, #64	; 0x40
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fc6b 	bl	80031fe <TIM_ITRx_SetConfig>
      break;
 8002928:	e00c      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4619      	mov	r1, r3
 8002934:	4610      	mov	r0, r2
 8002936:	f000 fc62 	bl	80031fe <TIM_ITRx_SetConfig>
      break;
 800293a:	e003      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
      break;
 8002940:	e000      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002942:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	fffeff88 	.word	0xfffeff88

08002964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d107      	bne.n	80029c8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029c6:	e02a      	b.n	8002a1e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d107      	bne.n	80029e2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2202      	movs	r2, #2
 80029d6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029e0:	e01d      	b.n	8002a1e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d107      	bne.n	80029fc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2204      	movs	r2, #4
 80029f0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029fa:	e010      	b.n	8002a1e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d107      	bne.n	8002a16 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2208      	movs	r2, #8
 8002a0a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a14:	e003      	b.n	8002a1e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f7ff ffb4 	bl	800298c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	771a      	strb	r2, [r3, #28]
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d10b      	bne.n	8002a62 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d136      	bne.n	8002ac6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a60:	e031      	b.n	8002ac6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d10b      	bne.n	8002a84 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d125      	bne.n	8002ac6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a82:	e020      	b.n	8002ac6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d10b      	bne.n	8002aa6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2204      	movs	r2, #4
 8002a92:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d114      	bne.n	8002ac6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aa4:	e00f      	b.n	8002ac6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d10a      	bne.n	8002ac6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2208      	movs	r2, #8
 8002ab4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d103      	bne.n	8002ac6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f7ff ff4c 	bl	8002964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	771a      	strb	r2, [r3, #28]
}
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d103      	bne.n	8002afa <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	771a      	strb	r2, [r3, #28]
 8002af8:	e019      	b.n	8002b2e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d103      	bne.n	8002b0c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2202      	movs	r2, #2
 8002b08:	771a      	strb	r2, [r3, #28]
 8002b0a:	e010      	b.n	8002b2e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d103      	bne.n	8002b1e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2204      	movs	r2, #4
 8002b1a:	771a      	strb	r2, [r3, #28]
 8002b1c:	e007      	b.n	8002b2e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d102      	bne.n	8002b2e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f7ff ff22 	bl	8002978 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	771a      	strb	r2, [r3, #28]
}
 8002b3a:	bf00      	nop
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a40      	ldr	r2, [pc, #256]	; (8002c58 <TIM_Base_SetConfig+0x114>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d013      	beq.n	8002b84 <TIM_Base_SetConfig+0x40>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b62:	d00f      	beq.n	8002b84 <TIM_Base_SetConfig+0x40>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a3d      	ldr	r2, [pc, #244]	; (8002c5c <TIM_Base_SetConfig+0x118>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d00b      	beq.n	8002b84 <TIM_Base_SetConfig+0x40>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a3c      	ldr	r2, [pc, #240]	; (8002c60 <TIM_Base_SetConfig+0x11c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d007      	beq.n	8002b84 <TIM_Base_SetConfig+0x40>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a3b      	ldr	r2, [pc, #236]	; (8002c64 <TIM_Base_SetConfig+0x120>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d003      	beq.n	8002b84 <TIM_Base_SetConfig+0x40>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a3a      	ldr	r2, [pc, #232]	; (8002c68 <TIM_Base_SetConfig+0x124>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d108      	bne.n	8002b96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a2f      	ldr	r2, [pc, #188]	; (8002c58 <TIM_Base_SetConfig+0x114>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d02b      	beq.n	8002bf6 <TIM_Base_SetConfig+0xb2>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba4:	d027      	beq.n	8002bf6 <TIM_Base_SetConfig+0xb2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a2c      	ldr	r2, [pc, #176]	; (8002c5c <TIM_Base_SetConfig+0x118>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d023      	beq.n	8002bf6 <TIM_Base_SetConfig+0xb2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a2b      	ldr	r2, [pc, #172]	; (8002c60 <TIM_Base_SetConfig+0x11c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d01f      	beq.n	8002bf6 <TIM_Base_SetConfig+0xb2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a2a      	ldr	r2, [pc, #168]	; (8002c64 <TIM_Base_SetConfig+0x120>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d01b      	beq.n	8002bf6 <TIM_Base_SetConfig+0xb2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a29      	ldr	r2, [pc, #164]	; (8002c68 <TIM_Base_SetConfig+0x124>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d017      	beq.n	8002bf6 <TIM_Base_SetConfig+0xb2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a28      	ldr	r2, [pc, #160]	; (8002c6c <TIM_Base_SetConfig+0x128>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d013      	beq.n	8002bf6 <TIM_Base_SetConfig+0xb2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a27      	ldr	r2, [pc, #156]	; (8002c70 <TIM_Base_SetConfig+0x12c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00f      	beq.n	8002bf6 <TIM_Base_SetConfig+0xb2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a26      	ldr	r2, [pc, #152]	; (8002c74 <TIM_Base_SetConfig+0x130>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00b      	beq.n	8002bf6 <TIM_Base_SetConfig+0xb2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a25      	ldr	r2, [pc, #148]	; (8002c78 <TIM_Base_SetConfig+0x134>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d007      	beq.n	8002bf6 <TIM_Base_SetConfig+0xb2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a24      	ldr	r2, [pc, #144]	; (8002c7c <TIM_Base_SetConfig+0x138>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d003      	beq.n	8002bf6 <TIM_Base_SetConfig+0xb2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a23      	ldr	r2, [pc, #140]	; (8002c80 <TIM_Base_SetConfig+0x13c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d108      	bne.n	8002c08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <TIM_Base_SetConfig+0x114>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d003      	beq.n	8002c3c <TIM_Base_SetConfig+0xf8>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a0c      	ldr	r2, [pc, #48]	; (8002c68 <TIM_Base_SetConfig+0x124>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d103      	bne.n	8002c44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	615a      	str	r2, [r3, #20]
}
 8002c4a:	bf00      	nop
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40010000 	.word	0x40010000
 8002c5c:	40000400 	.word	0x40000400
 8002c60:	40000800 	.word	0x40000800
 8002c64:	40000c00 	.word	0x40000c00
 8002c68:	40010400 	.word	0x40010400
 8002c6c:	40014000 	.word	0x40014000
 8002c70:	40014400 	.word	0x40014400
 8002c74:	40014800 	.word	0x40014800
 8002c78:	40001800 	.word	0x40001800
 8002c7c:	40001c00 	.word	0x40001c00
 8002c80:	40002000 	.word	0x40002000

08002c84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	f023 0201 	bic.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4b2b      	ldr	r3, [pc, #172]	; (8002d5c <TIM_OC1_SetConfig+0xd8>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 0303 	bic.w	r3, r3, #3
 8002cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f023 0302 	bic.w	r3, r3, #2
 8002ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a21      	ldr	r2, [pc, #132]	; (8002d60 <TIM_OC1_SetConfig+0xdc>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d003      	beq.n	8002ce8 <TIM_OC1_SetConfig+0x64>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a20      	ldr	r2, [pc, #128]	; (8002d64 <TIM_OC1_SetConfig+0xe0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d10c      	bne.n	8002d02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f023 0308 	bic.w	r3, r3, #8
 8002cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f023 0304 	bic.w	r3, r3, #4
 8002d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a16      	ldr	r2, [pc, #88]	; (8002d60 <TIM_OC1_SetConfig+0xdc>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d003      	beq.n	8002d12 <TIM_OC1_SetConfig+0x8e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <TIM_OC1_SetConfig+0xe0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d111      	bne.n	8002d36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	621a      	str	r2, [r3, #32]
}
 8002d50:	bf00      	nop
 8002d52:	371c      	adds	r7, #28
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	fffeff8f 	.word	0xfffeff8f
 8002d60:	40010000 	.word	0x40010000
 8002d64:	40010400 	.word	0x40010400

08002d68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	f023 0210 	bic.w	r2, r3, #16
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4b2e      	ldr	r3, [pc, #184]	; (8002e4c <TIM_OC2_SetConfig+0xe4>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f023 0320 	bic.w	r3, r3, #32
 8002db2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a23      	ldr	r2, [pc, #140]	; (8002e50 <TIM_OC2_SetConfig+0xe8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d003      	beq.n	8002dd0 <TIM_OC2_SetConfig+0x68>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a22      	ldr	r2, [pc, #136]	; (8002e54 <TIM_OC2_SetConfig+0xec>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d10d      	bne.n	8002dec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a18      	ldr	r2, [pc, #96]	; (8002e50 <TIM_OC2_SetConfig+0xe8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d003      	beq.n	8002dfc <TIM_OC2_SetConfig+0x94>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a17      	ldr	r2, [pc, #92]	; (8002e54 <TIM_OC2_SetConfig+0xec>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d113      	bne.n	8002e24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	621a      	str	r2, [r3, #32]
}
 8002e3e:	bf00      	nop
 8002e40:	371c      	adds	r7, #28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	feff8fff 	.word	0xfeff8fff
 8002e50:	40010000 	.word	0x40010000
 8002e54:	40010400 	.word	0x40010400

08002e58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <TIM_OC3_SetConfig+0xe0>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0303 	bic.w	r3, r3, #3
 8002e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a22      	ldr	r2, [pc, #136]	; (8002f3c <TIM_OC3_SetConfig+0xe4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d003      	beq.n	8002ebe <TIM_OC3_SetConfig+0x66>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a21      	ldr	r2, [pc, #132]	; (8002f40 <TIM_OC3_SetConfig+0xe8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d10d      	bne.n	8002eda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <TIM_OC3_SetConfig+0xe4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d003      	beq.n	8002eea <TIM_OC3_SetConfig+0x92>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a16      	ldr	r2, [pc, #88]	; (8002f40 <TIM_OC3_SetConfig+0xe8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d113      	bne.n	8002f12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	621a      	str	r2, [r3, #32]
}
 8002f2c:	bf00      	nop
 8002f2e:	371c      	adds	r7, #28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	fffeff8f 	.word	0xfffeff8f
 8002f3c:	40010000 	.word	0x40010000
 8002f40:	40010400 	.word	0x40010400

08002f44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4b1e      	ldr	r3, [pc, #120]	; (8002fe8 <TIM_OC4_SetConfig+0xa4>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	031b      	lsls	r3, r3, #12
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a13      	ldr	r2, [pc, #76]	; (8002fec <TIM_OC4_SetConfig+0xa8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d003      	beq.n	8002fac <TIM_OC4_SetConfig+0x68>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a12      	ldr	r2, [pc, #72]	; (8002ff0 <TIM_OC4_SetConfig+0xac>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d109      	bne.n	8002fc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	019b      	lsls	r3, r3, #6
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	621a      	str	r2, [r3, #32]
}
 8002fda:	bf00      	nop
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	feff8fff 	.word	0xfeff8fff
 8002fec:	40010000 	.word	0x40010000
 8002ff0:	40010400 	.word	0x40010400

08002ff4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4b1b      	ldr	r3, [pc, #108]	; (800308c <TIM_OC5_SetConfig+0x98>)
 8003020:	4013      	ands	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	4313      	orrs	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003034:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	041b      	lsls	r3, r3, #16
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a12      	ldr	r2, [pc, #72]	; (8003090 <TIM_OC5_SetConfig+0x9c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d003      	beq.n	8003052 <TIM_OC5_SetConfig+0x5e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a11      	ldr	r2, [pc, #68]	; (8003094 <TIM_OC5_SetConfig+0xa0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d109      	bne.n	8003066 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003058:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	4313      	orrs	r3, r2
 8003064:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	621a      	str	r2, [r3, #32]
}
 8003080:	bf00      	nop
 8003082:	371c      	adds	r7, #28
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	fffeff8f 	.word	0xfffeff8f
 8003090:	40010000 	.word	0x40010000
 8003094:	40010400 	.word	0x40010400

08003098 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4b1c      	ldr	r3, [pc, #112]	; (8003134 <TIM_OC6_SetConfig+0x9c>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	021b      	lsls	r3, r3, #8
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	051b      	lsls	r3, r3, #20
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a13      	ldr	r2, [pc, #76]	; (8003138 <TIM_OC6_SetConfig+0xa0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d003      	beq.n	80030f8 <TIM_OC6_SetConfig+0x60>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a12      	ldr	r2, [pc, #72]	; (800313c <TIM_OC6_SetConfig+0xa4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d109      	bne.n	800310c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	029b      	lsls	r3, r3, #10
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	621a      	str	r2, [r3, #32]
}
 8003126:	bf00      	nop
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	feff8fff 	.word	0xfeff8fff
 8003138:	40010000 	.word	0x40010000
 800313c:	40010400 	.word	0x40010400

08003140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	f023 0201 	bic.w	r2, r3, #1
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800316a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f023 030a 	bic.w	r3, r3, #10
 800317c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	4313      	orrs	r3, r2
 8003184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	621a      	str	r2, [r3, #32]
}
 8003192:	bf00      	nop
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800319e:	b480      	push	{r7}
 80031a0:	b087      	sub	sp, #28
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	f023 0210 	bic.w	r2, r3, #16
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	031b      	lsls	r3, r3, #12
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	621a      	str	r2, [r3, #32]
}
 80031f2:	bf00      	nop
 80031f4:	371c      	adds	r7, #28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	f043 0307 	orr.w	r3, r3, #7
 8003220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	609a      	str	r2, [r3, #8]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800324e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	021a      	lsls	r2, r3, #8
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	431a      	orrs	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4313      	orrs	r3, r2
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	609a      	str	r2, [r3, #8]
}
 8003268:	bf00      	nop
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	2201      	movs	r2, #1
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a1a      	ldr	r2, [r3, #32]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	43db      	mvns	r3, r3
 8003296:	401a      	ands	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a1a      	ldr	r2, [r3, #32]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ac:	431a      	orrs	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	621a      	str	r2, [r3, #32]
}
 80032b2:	bf00      	nop
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e06d      	b.n	80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a30      	ldr	r2, [pc, #192]	; (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d004      	beq.n	800330c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a2f      	ldr	r2, [pc, #188]	; (80033c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d108      	bne.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003312:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003324:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a20      	ldr	r2, [pc, #128]	; (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d022      	beq.n	8003388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334a:	d01d      	beq.n	8003388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1d      	ldr	r2, [pc, #116]	; (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d018      	beq.n	8003388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d013      	beq.n	8003388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1a      	ldr	r2, [pc, #104]	; (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00e      	beq.n	8003388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a15      	ldr	r2, [pc, #84]	; (80033c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d009      	beq.n	8003388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a16      	ldr	r2, [pc, #88]	; (80033d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d004      	beq.n	8003388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a15      	ldr	r2, [pc, #84]	; (80033d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d10c      	bne.n	80033a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800338e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	4313      	orrs	r3, r2
 8003398:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	40010000 	.word	0x40010000
 80033c4:	40010400 	.word	0x40010400
 80033c8:	40000400 	.word	0x40000400
 80033cc:	40000800 	.word	0x40000800
 80033d0:	40000c00 	.word	0x40000c00
 80033d4:	40014000 	.word	0x40014000
 80033d8:	40001800 	.word	0x40001800

080033dc <__libc_init_array>:
 80033dc:	b570      	push	{r4, r5, r6, lr}
 80033de:	4d0d      	ldr	r5, [pc, #52]	; (8003414 <__libc_init_array+0x38>)
 80033e0:	4c0d      	ldr	r4, [pc, #52]	; (8003418 <__libc_init_array+0x3c>)
 80033e2:	1b64      	subs	r4, r4, r5
 80033e4:	10a4      	asrs	r4, r4, #2
 80033e6:	2600      	movs	r6, #0
 80033e8:	42a6      	cmp	r6, r4
 80033ea:	d109      	bne.n	8003400 <__libc_init_array+0x24>
 80033ec:	4d0b      	ldr	r5, [pc, #44]	; (800341c <__libc_init_array+0x40>)
 80033ee:	4c0c      	ldr	r4, [pc, #48]	; (8003420 <__libc_init_array+0x44>)
 80033f0:	f000 f820 	bl	8003434 <_init>
 80033f4:	1b64      	subs	r4, r4, r5
 80033f6:	10a4      	asrs	r4, r4, #2
 80033f8:	2600      	movs	r6, #0
 80033fa:	42a6      	cmp	r6, r4
 80033fc:	d105      	bne.n	800340a <__libc_init_array+0x2e>
 80033fe:	bd70      	pop	{r4, r5, r6, pc}
 8003400:	f855 3b04 	ldr.w	r3, [r5], #4
 8003404:	4798      	blx	r3
 8003406:	3601      	adds	r6, #1
 8003408:	e7ee      	b.n	80033e8 <__libc_init_array+0xc>
 800340a:	f855 3b04 	ldr.w	r3, [r5], #4
 800340e:	4798      	blx	r3
 8003410:	3601      	adds	r6, #1
 8003412:	e7f2      	b.n	80033fa <__libc_init_array+0x1e>
 8003414:	0800346c 	.word	0x0800346c
 8003418:	0800346c 	.word	0x0800346c
 800341c:	0800346c 	.word	0x0800346c
 8003420:	08003470 	.word	0x08003470

08003424 <memset>:
 8003424:	4402      	add	r2, r0
 8003426:	4603      	mov	r3, r0
 8003428:	4293      	cmp	r3, r2
 800342a:	d100      	bne.n	800342e <memset+0xa>
 800342c:	4770      	bx	lr
 800342e:	f803 1b01 	strb.w	r1, [r3], #1
 8003432:	e7f9      	b.n	8003428 <memset+0x4>

08003434 <_init>:
 8003434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003436:	bf00      	nop
 8003438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343a:	bc08      	pop	{r3}
 800343c:	469e      	mov	lr, r3
 800343e:	4770      	bx	lr

08003440 <_fini>:
 8003440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003442:	bf00      	nop
 8003444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003446:	bc08      	pop	{r3}
 8003448:	469e      	mov	lr, r3
 800344a:	4770      	bx	lr
