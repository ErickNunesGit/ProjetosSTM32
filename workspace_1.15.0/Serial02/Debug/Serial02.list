
Serial02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005788  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08005988  08005988  00015988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d84  08005d84  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005d84  08005d84  00015d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d8c  08005d8c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d8c  08005d8c  00015d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d90  08005d90  00015d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  200001dc  08005f70  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08005f70  00020298  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ba6  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001698  00000000  00000000  00029db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0002b448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  0002bbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027609  00000000  00000000  0002c290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b5a  00000000  00000000  00053899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2469  00000000  00000000  0005d3f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014f85c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ccc  00000000  00000000  0014f8ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08005970 	.word	0x08005970

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08005970 	.word	0x08005970

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	0000      	movs	r0, r0
	...

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 fa8e 	bl	8000b1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f835 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 f8bf 	bl	8000788 <MX_GPIO_Init>
  MX_UART4_Init();
 800060a:	f000 f88d 	bl	8000728 <MX_UART4_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  x=x+0.1;
 800060e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000612:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000616:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8000660 <main+0x68>
 800061a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800061e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000622:	edc7 7a05 	vstr	s15, [r7, #20]
	  sprintf(buffer,"X: %0.1f\r\n",x);
 8000626:	edd7 7a05 	vldr	s15, [r7, #20]
 800062a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800062e:	4638      	mov	r0, r7
 8000630:	ec53 2b17 	vmov	r2, r3, d7
 8000634:	490c      	ldr	r1, [pc, #48]	; (8000668 <main+0x70>)
 8000636:	f002 ffa1 	bl	800357c <siprintf>
	  HAL_UART_Transmit(&huart4, buffer, strlen(buffer), 100);
 800063a:	463b      	mov	r3, r7
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff fdff 	bl	8000240 <strlen>
 8000642:	4603      	mov	r3, r0
 8000644:	b29a      	uxth	r2, r3
 8000646:	4639      	mov	r1, r7
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	4808      	ldr	r0, [pc, #32]	; (800066c <main+0x74>)
 800064c:	f001 fe84 	bl	8002358 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000654:	f000 fac0 	bl	8000bd8 <HAL_Delay>
	  x=x+0.1;
 8000658:	e7d9      	b.n	800060e <main+0x16>
 800065a:	bf00      	nop
 800065c:	f3af 8000 	nop.w
 8000660:	9999999a 	.word	0x9999999a
 8000664:	3fb99999 	.word	0x3fb99999
 8000668:	08005988 	.word	0x08005988
 800066c:	200001f8 	.word	0x200001f8

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	; 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	2234      	movs	r2, #52	; 0x34
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f002 fb32 	bl	8002ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xb0>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xb0>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xb0>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ac:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <SystemClock_Config+0xb4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b4:	4a1b      	ldr	r2, [pc, #108]	; (8000724 <SystemClock_Config+0xb4>)
 80006b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <SystemClock_Config+0xb4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d0:	2310      	movs	r3, #16
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fd31 	bl	8001144 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006e8:	f000 f866 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f000 ffca 	bl	80016a0 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000712:	f000 f851 	bl	80007b8 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	; 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_UART4_Init+0x58>)
 800072e:	4a15      	ldr	r2, [pc, #84]	; (8000784 <MX_UART4_Init+0x5c>)
 8000730:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_UART4_Init+0x58>)
 8000734:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000738:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_UART4_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_UART4_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_UART4_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_UART4_Init+0x58>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_UART4_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_UART4_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_UART4_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_UART4_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_UART4_Init+0x58>)
 800076c:	f001 fda6 	bl	80022bc <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000776:	f000 f81f 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200001f8 	.word	0x200001f8
 8000784:	40004c00 	.word	0x40004c00

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_GPIO_Init+0x2c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <MX_GPIO_Init+0x2c>)
 8000794:	f043 0308 	orr.w	r3, r3, #8
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_GPIO_Init+0x2c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0308 	and.w	r3, r3, #8
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <Error_Handler+0x8>
	...

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <HAL_MspInit+0x44>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <HAL_MspInit+0x44>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	6413      	str	r3, [r2, #64]	; 0x40
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <HAL_MspInit+0x44>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_MspInit+0x44>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <HAL_MspInit+0x44>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6453      	str	r3, [r2, #68]	; 0x44
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_MspInit+0x44>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b0ae      	sub	sp, #184	; 0xb8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2290      	movs	r2, #144	; 0x90
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f002 fa5b 	bl	8002ce8 <memset>
  if(huart->Instance==UART4)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a21      	ldr	r2, [pc, #132]	; (80008bc <HAL_UART_MspInit+0xb0>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d13b      	bne.n	80008b4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800083c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000840:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000842:	2300      	movs	r3, #0
 8000844:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4618      	mov	r0, r3
 800084c:	f001 f90e 	bl	8001a6c <HAL_RCCEx_PeriphCLKConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000856:	f7ff ffaf 	bl	80007b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <HAL_UART_MspInit+0xb4>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <HAL_UART_MspInit+0xb4>)
 8000860:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <HAL_UART_MspInit+0xb4>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <HAL_UART_MspInit+0xb4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <HAL_UART_MspInit+0xb4>)
 8000878:	f043 0308 	orr.w	r3, r3, #8
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_UART_MspInit+0xb4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0308 	and.w	r3, r3, #8
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800088a:	2303      	movs	r3, #3
 800088c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089c:	2303      	movs	r3, #3
 800089e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80008a2:	2308      	movs	r3, #8
 80008a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008ac:	4619      	mov	r1, r3
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <HAL_UART_MspInit+0xb8>)
 80008b0:	f000 fa9c 	bl	8000dec <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80008b4:	bf00      	nop
 80008b6:	37b8      	adds	r7, #184	; 0xb8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40004c00 	.word	0x40004c00
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020c00 	.word	0x40020c00

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <NMI_Handler+0x4>

080008ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <MemManage_Handler+0x4>

080008da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000914:	f000 f940 	bl	8000b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}

0800091c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
	return 1;
 8000920:	2301      	movs	r3, #1
}
 8000922:	4618      	mov	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <_kill>:

int _kill(int pid, int sig)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000936:	f002 f9ad 	bl	8002c94 <__errno>
 800093a:	4603      	mov	r3, r0
 800093c:	2216      	movs	r2, #22
 800093e:	601a      	str	r2, [r3, #0]
	return -1;
 8000940:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <_exit>:

void _exit (int status)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000954:	f04f 31ff 	mov.w	r1, #4294967295
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ffe7 	bl	800092c <_kill>
	while (1) {}		/* Make sure we hang here */
 800095e:	e7fe      	b.n	800095e <_exit+0x12>

08000960 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	e00a      	b.n	8000988 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000972:	f3af 8000 	nop.w
 8000976:	4601      	mov	r1, r0
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	60ba      	str	r2, [r7, #8]
 800097e:	b2ca      	uxtb	r2, r1
 8000980:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	3301      	adds	r3, #1
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697a      	ldr	r2, [r7, #20]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	429a      	cmp	r2, r3
 800098e:	dbf0      	blt.n	8000972 <_read+0x12>
	}

return len;
 8000990:	687b      	ldr	r3, [r7, #4]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b086      	sub	sp, #24
 800099e:	af00      	add	r7, sp, #0
 80009a0:	60f8      	str	r0, [r7, #12]
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	e009      	b.n	80009c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	1c5a      	adds	r2, r3, #1
 80009b0:	60ba      	str	r2, [r7, #8]
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	3301      	adds	r3, #1
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697a      	ldr	r2, [r7, #20]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	dbf1      	blt.n	80009ac <_write+0x12>
	}
	return len;
 80009c8:	687b      	ldr	r3, [r7, #4]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <_close>:

int _close(int file)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
	return -1;
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009de:	4618      	mov	r0, r3
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009fa:	605a      	str	r2, [r3, #4]
	return 0;
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <_isatty>:

int _isatty(int file)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
	return 1;
 8000a12:	2301      	movs	r3, #1
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a44:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <_sbrk+0x5c>)
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <_sbrk+0x60>)
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <_sbrk+0x64>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d102      	bne.n	8000a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <_sbrk+0x64>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <_sbrk+0x68>)
 8000a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d207      	bcs.n	8000a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a6c:	f002 f912 	bl	8002c94 <__errno>
 8000a70:	4603      	mov	r3, r0
 8000a72:	220c      	movs	r2, #12
 8000a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7a:	e009      	b.n	8000a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <_sbrk+0x64>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a82:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <_sbrk+0x64>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <_sbrk+0x64>)
 8000a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20080000 	.word	0x20080000
 8000a9c:	00000400 	.word	0x00000400
 8000aa0:	20000280 	.word	0x20000280
 8000aa4:	20000298 	.word	0x20000298

08000aa8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <SystemInit+0x20>)
 8000aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab2:	4a05      	ldr	r2, [pc, #20]	; (8000ac8 <SystemInit+0x20>)
 8000ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad0:	480d      	ldr	r0, [pc, #52]	; (8000b08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ad2:	490e      	ldr	r1, [pc, #56]	; (8000b0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ad4:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ae8:	4c0b      	ldr	r4, [pc, #44]	; (8000b18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000af6:	f7ff ffd7 	bl	8000aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000afa:	f002 f8d1 	bl	8002ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afe:	f7ff fd7b 	bl	80005f8 <main>
  bx  lr    
 8000b02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b04:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b0c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000b10:	08005d94 	.word	0x08005d94
  ldr r2, =_sbss
 8000b14:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000b18:	20000298 	.word	0x20000298

08000b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b1c:	e7fe      	b.n	8000b1c <ADC_IRQHandler>

08000b1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b22:	2003      	movs	r0, #3
 8000b24:	f000 f92e 	bl	8000d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b28:	200f      	movs	r0, #15
 8000b2a:	f000 f805 	bl	8000b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2e:	f7ff fe49 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_InitTick+0x54>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_InitTick+0x58>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f93b 	bl	8000dd2 <HAL_SYSTICK_Config>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e00e      	b.n	8000b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	d80a      	bhi.n	8000b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f000 f911 	bl	8000d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <HAL_InitTick+0x5c>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e000      	b.n	8000b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000000 	.word	0x20000000
 8000b90:	20000008 	.word	0x20000008
 8000b94:	20000004 	.word	0x20000004

08000b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x20>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x24>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <HAL_IncTick+0x24>)
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	20000284 	.word	0x20000284

08000bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <HAL_GetTick+0x14>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000284 	.word	0x20000284

08000bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be0:	f7ff ffee 	bl	8000bc0 <HAL_GetTick>
 8000be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf0:	d005      	beq.n	8000bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_Delay+0x44>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bfe:	bf00      	nop
 8000c00:	f7ff ffde 	bl	8000bc0 <HAL_GetTick>
 8000c04:	4602      	mov	r2, r0
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d8f7      	bhi.n	8000c00 <HAL_Delay+0x28>
  {
  }
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000008 	.word	0x20000008

08000c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <__NVIC_SetPriorityGrouping+0x40>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4e:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <__NVIC_SetPriorityGrouping+0x40>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	60d3      	str	r3, [r2, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00
 8000c64:	05fa0000 	.word	0x05fa0000

08000c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <__NVIC_GetPriorityGrouping+0x18>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	f003 0307 	and.w	r3, r3, #7
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db0a      	blt.n	8000cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <__NVIC_SetPriority+0x4c>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cac:	e00a      	b.n	8000cc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4908      	ldr	r1, [pc, #32]	; (8000cd4 <__NVIC_SetPriority+0x50>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	0112      	lsls	r2, r2, #4
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	761a      	strb	r2, [r3, #24]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	; 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f1c3 0307 	rsb	r3, r3, #7
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	bf28      	it	cs
 8000cf6:	2304      	movcs	r3, #4
 8000cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d902      	bls.n	8000d08 <NVIC_EncodePriority+0x30>
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3b03      	subs	r3, #3
 8000d06:	e000      	b.n	8000d0a <NVIC_EncodePriority+0x32>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d20:	f04f 31ff 	mov.w	r1, #4294967295
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43d9      	mvns	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	4313      	orrs	r3, r2
         );
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3724      	adds	r7, #36	; 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d50:	d301      	bcc.n	8000d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00f      	b.n	8000d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <SysTick_Config+0x40>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5e:	210f      	movs	r1, #15
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f7ff ff8e 	bl	8000c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <SysTick_Config+0x40>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <SysTick_Config+0x40>)
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	e000e010 	.word	0xe000e010

08000d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff47 	bl	8000c20 <__NVIC_SetPriorityGrouping>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dac:	f7ff ff5c 	bl	8000c68 <__NVIC_GetPriorityGrouping>
 8000db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6978      	ldr	r0, [r7, #20]
 8000db8:	f7ff ff8e 	bl	8000cd8 <NVIC_EncodePriority>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff5d 	bl	8000c84 <__NVIC_SetPriority>
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ffb0 	bl	8000d40 <SysTick_Config>
 8000de0:	4603      	mov	r3, r0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
 8000e0a:	e175      	b.n	80010f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	f040 8164 	bne.w	80010f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 0303 	and.w	r3, r3, #3
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d005      	beq.n	8000e42 <HAL_GPIO_Init+0x56>
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d130      	bne.n	8000ea4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e78:	2201      	movs	r2, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	091b      	lsrs	r3, r3, #4
 8000e8e:	f003 0201 	and.w	r2, r3, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b03      	cmp	r3, #3
 8000eae:	d017      	beq.n	8000ee0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d123      	bne.n	8000f34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	08da      	lsrs	r2, r3, #3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3208      	adds	r2, #8
 8000ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	f003 0307 	and.w	r3, r3, #7
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	220f      	movs	r2, #15
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	691a      	ldr	r2, [r3, #16]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	08da      	lsrs	r2, r3, #3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3208      	adds	r2, #8
 8000f2e:	69b9      	ldr	r1, [r7, #24]
 8000f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0203 	and.w	r2, r3, #3
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 80be 	beq.w	80010f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f76:	4b66      	ldr	r3, [pc, #408]	; (8001110 <HAL_GPIO_Init+0x324>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	4a65      	ldr	r2, [pc, #404]	; (8001110 <HAL_GPIO_Init+0x324>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	6453      	str	r3, [r2, #68]	; 0x44
 8000f82:	4b63      	ldr	r3, [pc, #396]	; (8001110 <HAL_GPIO_Init+0x324>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f8e:	4a61      	ldr	r2, [pc, #388]	; (8001114 <HAL_GPIO_Init+0x328>)
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3302      	adds	r3, #2
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a58      	ldr	r2, [pc, #352]	; (8001118 <HAL_GPIO_Init+0x32c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d037      	beq.n	800102a <HAL_GPIO_Init+0x23e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a57      	ldr	r2, [pc, #348]	; (800111c <HAL_GPIO_Init+0x330>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d031      	beq.n	8001026 <HAL_GPIO_Init+0x23a>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a56      	ldr	r2, [pc, #344]	; (8001120 <HAL_GPIO_Init+0x334>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d02b      	beq.n	8001022 <HAL_GPIO_Init+0x236>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a55      	ldr	r2, [pc, #340]	; (8001124 <HAL_GPIO_Init+0x338>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d025      	beq.n	800101e <HAL_GPIO_Init+0x232>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a54      	ldr	r2, [pc, #336]	; (8001128 <HAL_GPIO_Init+0x33c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d01f      	beq.n	800101a <HAL_GPIO_Init+0x22e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a53      	ldr	r2, [pc, #332]	; (800112c <HAL_GPIO_Init+0x340>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d019      	beq.n	8001016 <HAL_GPIO_Init+0x22a>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a52      	ldr	r2, [pc, #328]	; (8001130 <HAL_GPIO_Init+0x344>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d013      	beq.n	8001012 <HAL_GPIO_Init+0x226>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a51      	ldr	r2, [pc, #324]	; (8001134 <HAL_GPIO_Init+0x348>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d00d      	beq.n	800100e <HAL_GPIO_Init+0x222>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a50      	ldr	r2, [pc, #320]	; (8001138 <HAL_GPIO_Init+0x34c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d007      	beq.n	800100a <HAL_GPIO_Init+0x21e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4f      	ldr	r2, [pc, #316]	; (800113c <HAL_GPIO_Init+0x350>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d101      	bne.n	8001006 <HAL_GPIO_Init+0x21a>
 8001002:	2309      	movs	r3, #9
 8001004:	e012      	b.n	800102c <HAL_GPIO_Init+0x240>
 8001006:	230a      	movs	r3, #10
 8001008:	e010      	b.n	800102c <HAL_GPIO_Init+0x240>
 800100a:	2308      	movs	r3, #8
 800100c:	e00e      	b.n	800102c <HAL_GPIO_Init+0x240>
 800100e:	2307      	movs	r3, #7
 8001010:	e00c      	b.n	800102c <HAL_GPIO_Init+0x240>
 8001012:	2306      	movs	r3, #6
 8001014:	e00a      	b.n	800102c <HAL_GPIO_Init+0x240>
 8001016:	2305      	movs	r3, #5
 8001018:	e008      	b.n	800102c <HAL_GPIO_Init+0x240>
 800101a:	2304      	movs	r3, #4
 800101c:	e006      	b.n	800102c <HAL_GPIO_Init+0x240>
 800101e:	2303      	movs	r3, #3
 8001020:	e004      	b.n	800102c <HAL_GPIO_Init+0x240>
 8001022:	2302      	movs	r3, #2
 8001024:	e002      	b.n	800102c <HAL_GPIO_Init+0x240>
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <HAL_GPIO_Init+0x240>
 800102a:	2300      	movs	r3, #0
 800102c:	69fa      	ldr	r2, [r7, #28]
 800102e:	f002 0203 	and.w	r2, r2, #3
 8001032:	0092      	lsls	r2, r2, #2
 8001034:	4093      	lsls	r3, r2
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800103c:	4935      	ldr	r1, [pc, #212]	; (8001114 <HAL_GPIO_Init+0x328>)
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	3302      	adds	r3, #2
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800104a:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <HAL_GPIO_Init+0x354>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800106e:	4a34      	ldr	r2, [pc, #208]	; (8001140 <HAL_GPIO_Init+0x354>)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001074:	4b32      	ldr	r3, [pc, #200]	; (8001140 <HAL_GPIO_Init+0x354>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001098:	4a29      	ldr	r2, [pc, #164]	; (8001140 <HAL_GPIO_Init+0x354>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800109e:	4b28      	ldr	r3, [pc, #160]	; (8001140 <HAL_GPIO_Init+0x354>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c2:	4a1f      	ldr	r2, [pc, #124]	; (8001140 <HAL_GPIO_Init+0x354>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <HAL_GPIO_Init+0x354>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <HAL_GPIO_Init+0x354>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3301      	adds	r3, #1
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	2b0f      	cmp	r3, #15
 80010fc:	f67f ae86 	bls.w	8000e0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40013800 	.word	0x40013800
 8001118:	40020000 	.word	0x40020000
 800111c:	40020400 	.word	0x40020400
 8001120:	40020800 	.word	0x40020800
 8001124:	40020c00 	.word	0x40020c00
 8001128:	40021000 	.word	0x40021000
 800112c:	40021400 	.word	0x40021400
 8001130:	40021800 	.word	0x40021800
 8001134:	40021c00 	.word	0x40021c00
 8001138:	40022000 	.word	0x40022000
 800113c:	40022400 	.word	0x40022400
 8001140:	40013c00 	.word	0x40013c00

08001144 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800114c:	2300      	movs	r3, #0
 800114e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e29b      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 8087 	beq.w	8001276 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001168:	4b96      	ldr	r3, [pc, #600]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 030c 	and.w	r3, r3, #12
 8001170:	2b04      	cmp	r3, #4
 8001172:	d00c      	beq.n	800118e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001174:	4b93      	ldr	r3, [pc, #588]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 030c 	and.w	r3, r3, #12
 800117c:	2b08      	cmp	r3, #8
 800117e:	d112      	bne.n	80011a6 <HAL_RCC_OscConfig+0x62>
 8001180:	4b90      	ldr	r3, [pc, #576]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001188:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800118c:	d10b      	bne.n	80011a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118e:	4b8d      	ldr	r3, [pc, #564]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d06c      	beq.n	8001274 <HAL_RCC_OscConfig+0x130>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d168      	bne.n	8001274 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e275      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ae:	d106      	bne.n	80011be <HAL_RCC_OscConfig+0x7a>
 80011b0:	4b84      	ldr	r3, [pc, #528]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a83      	ldr	r2, [pc, #524]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80011b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	e02e      	b.n	800121c <HAL_RCC_OscConfig+0xd8>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10c      	bne.n	80011e0 <HAL_RCC_OscConfig+0x9c>
 80011c6:	4b7f      	ldr	r3, [pc, #508]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a7e      	ldr	r2, [pc, #504]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80011cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	4b7c      	ldr	r3, [pc, #496]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a7b      	ldr	r2, [pc, #492]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80011d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e01d      	b.n	800121c <HAL_RCC_OscConfig+0xd8>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011e8:	d10c      	bne.n	8001204 <HAL_RCC_OscConfig+0xc0>
 80011ea:	4b76      	ldr	r3, [pc, #472]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a75      	ldr	r2, [pc, #468]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80011f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	4b73      	ldr	r3, [pc, #460]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a72      	ldr	r2, [pc, #456]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80011fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e00b      	b.n	800121c <HAL_RCC_OscConfig+0xd8>
 8001204:	4b6f      	ldr	r3, [pc, #444]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a6e      	ldr	r2, [pc, #440]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 800120a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b6c      	ldr	r3, [pc, #432]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a6b      	ldr	r2, [pc, #428]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d013      	beq.n	800124c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001224:	f7ff fccc 	bl	8000bc0 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800122c:	f7ff fcc8 	bl	8000bc0 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b64      	cmp	r3, #100	; 0x64
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e229      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123e:	4b61      	ldr	r3, [pc, #388]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0xe8>
 800124a:	e014      	b.n	8001276 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124c:	f7ff fcb8 	bl	8000bc0 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fcb4 	bl	8000bc0 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	; 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e215      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001266:	4b57      	ldr	r3, [pc, #348]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x110>
 8001272:	e000      	b.n	8001276 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d069      	beq.n	8001356 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001282:	4b50      	ldr	r3, [pc, #320]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00b      	beq.n	80012a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800128e:	4b4d      	ldr	r3, [pc, #308]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	2b08      	cmp	r3, #8
 8001298:	d11c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x190>
 800129a:	4b4a      	ldr	r3, [pc, #296]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d116      	bne.n	80012d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a6:	4b47      	ldr	r3, [pc, #284]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d005      	beq.n	80012be <HAL_RCC_OscConfig+0x17a>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d001      	beq.n	80012be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e1e9      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012be:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	493d      	ldr	r1, [pc, #244]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d2:	e040      	b.n	8001356 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d023      	beq.n	8001324 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012dc:	4b39      	ldr	r3, [pc, #228]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a38      	ldr	r2, [pc, #224]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e8:	f7ff fc6a 	bl	8000bc0 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f0:	f7ff fc66 	bl	8000bc0 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e1c7      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001302:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130e:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	4929      	ldr	r1, [pc, #164]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 800131e:	4313      	orrs	r3, r2
 8001320:	600b      	str	r3, [r1, #0]
 8001322:	e018      	b.n	8001356 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a26      	ldr	r2, [pc, #152]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 800132a:	f023 0301 	bic.w	r3, r3, #1
 800132e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001330:	f7ff fc46 	bl	8000bc0 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001338:	f7ff fc42 	bl	8000bc0 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e1a3      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d038      	beq.n	80013d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d019      	beq.n	800139e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800136a:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 800136c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800136e:	4a15      	ldr	r2, [pc, #84]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001376:	f7ff fc23 	bl	8000bc0 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800137e:	f7ff fc1f 	bl	8000bc0 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e180      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x23a>
 800139c:	e01a      	b.n	80013d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80013a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a2:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013aa:	f7ff fc09 	bl	8000bc0 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b0:	e00a      	b.n	80013c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b2:	f7ff fc05 	bl	8000bc0 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d903      	bls.n	80013c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e166      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
 80013c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c8:	4b92      	ldr	r3, [pc, #584]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80013ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1ee      	bne.n	80013b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 80a4 	beq.w	800152a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e2:	4b8c      	ldr	r3, [pc, #560]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10d      	bne.n	800140a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	4b89      	ldr	r3, [pc, #548]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a88      	ldr	r2, [pc, #544]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b86      	ldr	r3, [pc, #536]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001406:	2301      	movs	r3, #1
 8001408:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800140a:	4b83      	ldr	r3, [pc, #524]	; (8001618 <HAL_RCC_OscConfig+0x4d4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001412:	2b00      	cmp	r3, #0
 8001414:	d118      	bne.n	8001448 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001416:	4b80      	ldr	r3, [pc, #512]	; (8001618 <HAL_RCC_OscConfig+0x4d4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a7f      	ldr	r2, [pc, #508]	; (8001618 <HAL_RCC_OscConfig+0x4d4>)
 800141c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001422:	f7ff fbcd 	bl	8000bc0 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800142a:	f7ff fbc9 	bl	8000bc0 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b64      	cmp	r3, #100	; 0x64
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e12a      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800143c:	4b76      	ldr	r3, [pc, #472]	; (8001618 <HAL_RCC_OscConfig+0x4d4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f0      	beq.n	800142a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d106      	bne.n	800145e <HAL_RCC_OscConfig+0x31a>
 8001450:	4b70      	ldr	r3, [pc, #448]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001454:	4a6f      	ldr	r2, [pc, #444]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6713      	str	r3, [r2, #112]	; 0x70
 800145c:	e02d      	b.n	80014ba <HAL_RCC_OscConfig+0x376>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10c      	bne.n	8001480 <HAL_RCC_OscConfig+0x33c>
 8001466:	4b6b      	ldr	r3, [pc, #428]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146a:	4a6a      	ldr	r2, [pc, #424]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 800146c:	f023 0301 	bic.w	r3, r3, #1
 8001470:	6713      	str	r3, [r2, #112]	; 0x70
 8001472:	4b68      	ldr	r3, [pc, #416]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001476:	4a67      	ldr	r2, [pc, #412]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001478:	f023 0304 	bic.w	r3, r3, #4
 800147c:	6713      	str	r3, [r2, #112]	; 0x70
 800147e:	e01c      	b.n	80014ba <HAL_RCC_OscConfig+0x376>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2b05      	cmp	r3, #5
 8001486:	d10c      	bne.n	80014a2 <HAL_RCC_OscConfig+0x35e>
 8001488:	4b62      	ldr	r3, [pc, #392]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 800148a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148c:	4a61      	ldr	r2, [pc, #388]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	6713      	str	r3, [r2, #112]	; 0x70
 8001494:	4b5f      	ldr	r3, [pc, #380]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001498:	4a5e      	ldr	r2, [pc, #376]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6713      	str	r3, [r2, #112]	; 0x70
 80014a0:	e00b      	b.n	80014ba <HAL_RCC_OscConfig+0x376>
 80014a2:	4b5c      	ldr	r3, [pc, #368]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80014a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a6:	4a5b      	ldr	r2, [pc, #364]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80014a8:	f023 0301 	bic.w	r3, r3, #1
 80014ac:	6713      	str	r3, [r2, #112]	; 0x70
 80014ae:	4b59      	ldr	r3, [pc, #356]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80014b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b2:	4a58      	ldr	r2, [pc, #352]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80014b4:	f023 0304 	bic.w	r3, r3, #4
 80014b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d015      	beq.n	80014ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c2:	f7ff fb7d 	bl	8000bc0 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c8:	e00a      	b.n	80014e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ca:	f7ff fb79 	bl	8000bc0 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d8:	4293      	cmp	r3, r2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e0d8      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e0:	4b4c      	ldr	r3, [pc, #304]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80014e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0ee      	beq.n	80014ca <HAL_RCC_OscConfig+0x386>
 80014ec:	e014      	b.n	8001518 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ee:	f7ff fb67 	bl	8000bc0 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f4:	e00a      	b.n	800150c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f6:	f7ff fb63 	bl	8000bc0 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	f241 3288 	movw	r2, #5000	; 0x1388
 8001504:	4293      	cmp	r3, r2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e0c2      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800150c:	4b41      	ldr	r3, [pc, #260]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1ee      	bne.n	80014f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001518:	7dfb      	ldrb	r3, [r7, #23]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d105      	bne.n	800152a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800151e:	4b3d      	ldr	r3, [pc, #244]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a3c      	ldr	r2, [pc, #240]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80ae 	beq.w	8001690 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001534:	4b37      	ldr	r3, [pc, #220]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 030c 	and.w	r3, r3, #12
 800153c:	2b08      	cmp	r3, #8
 800153e:	d06d      	beq.n	800161c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d14b      	bne.n	80015e0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001548:	4b32      	ldr	r3, [pc, #200]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a31      	ldr	r2, [pc, #196]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 800154e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fb34 	bl	8000bc0 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800155c:	f7ff fb30 	bl	8000bc0 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e091      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156e:	4b29      	ldr	r3, [pc, #164]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69da      	ldr	r2, [r3, #28]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	019b      	lsls	r3, r3, #6
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001590:	085b      	lsrs	r3, r3, #1
 8001592:	3b01      	subs	r3, #1
 8001594:	041b      	lsls	r3, r3, #16
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	061b      	lsls	r3, r3, #24
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	071b      	lsls	r3, r3, #28
 80015a6:	491b      	ldr	r1, [pc, #108]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a18      	ldr	r2, [pc, #96]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80015b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b8:	f7ff fb02 	bl	8000bc0 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff fafe 	bl	8000bc0 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e05f      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0x47c>
 80015de:	e057      	b.n	8001690 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80015e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fae8 	bl	8000bc0 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fae4 	bl	8000bc0 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e045      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001606:	4b03      	ldr	r3, [pc, #12]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4b0>
 8001612:	e03d      	b.n	8001690 <HAL_RCC_OscConfig+0x54c>
 8001614:	40023800 	.word	0x40023800
 8001618:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800161c:	4b1f      	ldr	r3, [pc, #124]	; (800169c <HAL_RCC_OscConfig+0x558>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d030      	beq.n	800168c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001634:	429a      	cmp	r2, r3
 8001636:	d129      	bne.n	800168c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001642:	429a      	cmp	r2, r3
 8001644:	d122      	bne.n	800168c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800164c:	4013      	ands	r3, r2
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001652:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001654:	4293      	cmp	r3, r2
 8001656:	d119      	bne.n	800168c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001662:	085b      	lsrs	r3, r3, #1
 8001664:	3b01      	subs	r3, #1
 8001666:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001668:	429a      	cmp	r2, r3
 800166a:	d10f      	bne.n	800168c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001678:	429a      	cmp	r2, r3
 800167a:	d107      	bne.n	800168c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001688:	429a      	cmp	r2, r3
 800168a:	d001      	beq.n	8001690 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800

080016a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0d0      	b.n	800185a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016b8:	4b6a      	ldr	r3, [pc, #424]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d910      	bls.n	80016e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	4b67      	ldr	r3, [pc, #412]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f023 020f 	bic.w	r2, r3, #15
 80016ce:	4965      	ldr	r1, [pc, #404]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d6:	4b63      	ldr	r3, [pc, #396]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0b8      	b.n	800185a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d020      	beq.n	8001736 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001700:	4b59      	ldr	r3, [pc, #356]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	4a58      	ldr	r2, [pc, #352]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001706:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800170a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001718:	4b53      	ldr	r3, [pc, #332]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4a52      	ldr	r2, [pc, #328]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 800171e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001722:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001724:	4b50      	ldr	r3, [pc, #320]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	494d      	ldr	r1, [pc, #308]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d040      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d107      	bne.n	800175a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174a:	4b47      	ldr	r3, [pc, #284]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d115      	bne.n	8001782 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e07f      	b.n	800185a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001762:	4b41      	ldr	r3, [pc, #260]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d109      	bne.n	8001782 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e073      	b.n	800185a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001772:	4b3d      	ldr	r3, [pc, #244]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e06b      	b.n	800185a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001782:	4b39      	ldr	r3, [pc, #228]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f023 0203 	bic.w	r2, r3, #3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4936      	ldr	r1, [pc, #216]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001790:	4313      	orrs	r3, r2
 8001792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001794:	f7ff fa14 	bl	8000bc0 <HAL_GetTick>
 8001798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179a:	e00a      	b.n	80017b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179c:	f7ff fa10 	bl	8000bc0 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e053      	b.n	800185a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 020c 	and.w	r2, r3, #12
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d1eb      	bne.n	800179c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017c4:	4b27      	ldr	r3, [pc, #156]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d210      	bcs.n	80017f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b24      	ldr	r3, [pc, #144]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 020f 	bic.w	r2, r3, #15
 80017da:	4922      	ldr	r1, [pc, #136]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	4b20      	ldr	r3, [pc, #128]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e032      	b.n	800185a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d008      	beq.n	8001812 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001800:	4b19      	ldr	r3, [pc, #100]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	4916      	ldr	r1, [pc, #88]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 800180e:	4313      	orrs	r3, r2
 8001810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d009      	beq.n	8001832 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	490e      	ldr	r1, [pc, #56]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 800182e:	4313      	orrs	r3, r2
 8001830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001832:	f000 f821 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 8001836:	4602      	mov	r2, r0
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	490a      	ldr	r1, [pc, #40]	; (800186c <HAL_RCC_ClockConfig+0x1cc>)
 8001844:	5ccb      	ldrb	r3, [r1, r3]
 8001846:	fa22 f303 	lsr.w	r3, r2, r3
 800184a:	4a09      	ldr	r2, [pc, #36]	; (8001870 <HAL_RCC_ClockConfig+0x1d0>)
 800184c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_RCC_ClockConfig+0x1d4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff f970 	bl	8000b38 <HAL_InitTick>

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023c00 	.word	0x40023c00
 8001868:	40023800 	.word	0x40023800
 800186c:	08005994 	.word	0x08005994
 8001870:	20000000 	.word	0x20000000
 8001874:	20000004 	.word	0x20000004

08001878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800187c:	b090      	sub	sp, #64	; 0x40
 800187e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	637b      	str	r3, [r7, #52]	; 0x34
 8001884:	2300      	movs	r3, #0
 8001886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001888:	2300      	movs	r3, #0
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001890:	4b59      	ldr	r3, [pc, #356]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b08      	cmp	r3, #8
 800189a:	d00d      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x40>
 800189c:	2b08      	cmp	r3, #8
 800189e:	f200 80a1 	bhi.w	80019e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <HAL_RCC_GetSysClockFreq+0x34>
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d003      	beq.n	80018b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80018aa:	e09b      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018ac:	4b53      	ldr	r3, [pc, #332]	; (80019fc <HAL_RCC_GetSysClockFreq+0x184>)
 80018ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018b0:	e09b      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018b2:	4b53      	ldr	r3, [pc, #332]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x188>)
 80018b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018b6:	e098      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018b8:	4b4f      	ldr	r3, [pc, #316]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018c0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80018c2:	4b4d      	ldr	r3, [pc, #308]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d028      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ce:	4b4a      	ldr	r3, [pc, #296]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	099b      	lsrs	r3, r3, #6
 80018d4:	2200      	movs	r2, #0
 80018d6:	623b      	str	r3, [r7, #32]
 80018d8:	627a      	str	r2, [r7, #36]	; 0x24
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018e0:	2100      	movs	r1, #0
 80018e2:	4b47      	ldr	r3, [pc, #284]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x188>)
 80018e4:	fb03 f201 	mul.w	r2, r3, r1
 80018e8:	2300      	movs	r3, #0
 80018ea:	fb00 f303 	mul.w	r3, r0, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	4a43      	ldr	r2, [pc, #268]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x188>)
 80018f2:	fba0 1202 	umull	r1, r2, r0, r2
 80018f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018f8:	460a      	mov	r2, r1
 80018fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80018fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018fe:	4413      	add	r3, r2
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001904:	2200      	movs	r2, #0
 8001906:	61bb      	str	r3, [r7, #24]
 8001908:	61fa      	str	r2, [r7, #28]
 800190a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800190e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001912:	f7fe fced 	bl	80002f0 <__aeabi_uldivmod>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4613      	mov	r3, r2
 800191c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800191e:	e053      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001920:	4b35      	ldr	r3, [pc, #212]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	099b      	lsrs	r3, r3, #6
 8001926:	2200      	movs	r2, #0
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	617a      	str	r2, [r7, #20]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001932:	f04f 0b00 	mov.w	fp, #0
 8001936:	4652      	mov	r2, sl
 8001938:	465b      	mov	r3, fp
 800193a:	f04f 0000 	mov.w	r0, #0
 800193e:	f04f 0100 	mov.w	r1, #0
 8001942:	0159      	lsls	r1, r3, #5
 8001944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001948:	0150      	lsls	r0, r2, #5
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	ebb2 080a 	subs.w	r8, r2, sl
 8001952:	eb63 090b 	sbc.w	r9, r3, fp
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001962:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001966:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800196a:	ebb2 0408 	subs.w	r4, r2, r8
 800196e:	eb63 0509 	sbc.w	r5, r3, r9
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	00eb      	lsls	r3, r5, #3
 800197c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001980:	00e2      	lsls	r2, r4, #3
 8001982:	4614      	mov	r4, r2
 8001984:	461d      	mov	r5, r3
 8001986:	eb14 030a 	adds.w	r3, r4, sl
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	eb45 030b 	adc.w	r3, r5, fp
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800199e:	4629      	mov	r1, r5
 80019a0:	028b      	lsls	r3, r1, #10
 80019a2:	4621      	mov	r1, r4
 80019a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019a8:	4621      	mov	r1, r4
 80019aa:	028a      	lsls	r2, r1, #10
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b2:	2200      	movs	r2, #0
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	60fa      	str	r2, [r7, #12]
 80019b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019bc:	f7fe fc98 	bl	80002f0 <__aeabi_uldivmod>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4613      	mov	r3, r2
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	0c1b      	lsrs	r3, r3, #16
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	3301      	adds	r3, #1
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80019d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019e2:	e002      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_RCC_GetSysClockFreq+0x184>)
 80019e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3740      	adds	r7, #64	; 0x40
 80019f0:	46bd      	mov	sp, r7
 80019f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	00f42400 	.word	0x00f42400
 8001a00:	017d7840 	.word	0x017d7840

08001a04 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000000 	.word	0x20000000

08001a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a20:	f7ff fff0 	bl	8001a04 <HAL_RCC_GetHCLKFreq>
 8001a24:	4602      	mov	r2, r0
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	0a9b      	lsrs	r3, r3, #10
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	4903      	ldr	r1, [pc, #12]	; (8001a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a32:	5ccb      	ldrb	r3, [r1, r3]
 8001a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	080059a4 	.word	0x080059a4

08001a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a48:	f7ff ffdc 	bl	8001a04 <HAL_RCC_GetHCLKFreq>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	0b5b      	lsrs	r3, r3, #13
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	4903      	ldr	r1, [pc, #12]	; (8001a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a5a:	5ccb      	ldrb	r3, [r1, r3]
 8001a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40023800 	.word	0x40023800
 8001a68:	080059a4 	.word	0x080059a4

08001a6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d012      	beq.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001a94:	4b69      	ldr	r3, [pc, #420]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	4a68      	ldr	r2, [pc, #416]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a9e:	6093      	str	r3, [r2, #8]
 8001aa0:	4b66      	ldr	r3, [pc, #408]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa8:	4964      	ldr	r1, [pc, #400]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d017      	beq.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ac6:	4b5d      	ldr	r3, [pc, #372]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001acc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad4:	4959      	ldr	r1, [pc, #356]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ae4:	d101      	bne.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001af2:	2301      	movs	r3, #1
 8001af4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d017      	beq.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b02:	4b4e      	ldr	r3, [pc, #312]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	494a      	ldr	r1, [pc, #296]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b20:	d101      	bne.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001b22:	2301      	movs	r3, #1
 8001b24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0320 	and.w	r3, r3, #32
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 808b 	beq.w	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b50:	4b3a      	ldr	r3, [pc, #232]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	4a39      	ldr	r2, [pc, #228]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5c:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b68:	4b35      	ldr	r3, [pc, #212]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a34      	ldr	r2, [pc, #208]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b74:	f7ff f824 	bl	8000bc0 <HAL_GetTick>
 8001b78:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7c:	f7ff f820 	bl	8000bc0 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e38f      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b8e:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b9a:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ba2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d035      	beq.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d02e      	beq.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bb8:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bc0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc6:	4a1d      	ldr	r2, [pc, #116]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bcc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd2:	4a1a      	ldr	r2, [pc, #104]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001bda:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001be0:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d114      	bne.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7fe ffe8 	bl	8000bc0 <HAL_GetTick>
 8001bf0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf4:	f7fe ffe4 	bl	8000bc0 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e351      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0ee      	beq.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c22:	d111      	bne.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c32:	400b      	ands	r3, r1
 8001c34:	4901      	ldr	r1, [pc, #4]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	608b      	str	r3, [r1, #8]
 8001c3a:	e00b      	b.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40007000 	.word	0x40007000
 8001c44:	0ffffcff 	.word	0x0ffffcff
 8001c48:	4bac      	ldr	r3, [pc, #688]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4aab      	ldr	r2, [pc, #684]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c52:	6093      	str	r3, [r2, #8]
 8001c54:	4ba9      	ldr	r3, [pc, #676]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c60:	49a6      	ldr	r1, [pc, #664]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d010      	beq.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c72:	4ba2      	ldr	r3, [pc, #648]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c78:	4aa0      	ldr	r2, [pc, #640]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c82:	4b9e      	ldr	r3, [pc, #632]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c84:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8c:	499b      	ldr	r1, [pc, #620]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00a      	beq.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ca0:	4b96      	ldr	r3, [pc, #600]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cae:	4993      	ldr	r1, [pc, #588]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00a      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001cc2:	4b8e      	ldr	r3, [pc, #568]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cd0:	498a      	ldr	r1, [pc, #552]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00a      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ce4:	4b85      	ldr	r3, [pc, #532]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cf2:	4982      	ldr	r1, [pc, #520]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00a      	beq.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001d06:	4b7d      	ldr	r3, [pc, #500]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d14:	4979      	ldr	r1, [pc, #484]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00a      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d28:	4b74      	ldr	r3, [pc, #464]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2e:	f023 0203 	bic.w	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	4971      	ldr	r1, [pc, #452]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00a      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d4a:	4b6c      	ldr	r3, [pc, #432]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d50:	f023 020c 	bic.w	r2, r3, #12
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d58:	4968      	ldr	r1, [pc, #416]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00a      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d6c:	4b63      	ldr	r3, [pc, #396]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d72:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	4960      	ldr	r1, [pc, #384]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00a      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d8e:	4b5b      	ldr	r3, [pc, #364]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d94:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d9c:	4957      	ldr	r1, [pc, #348]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00a      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001db0:	4b52      	ldr	r3, [pc, #328]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbe:	494f      	ldr	r1, [pc, #316]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00a      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001dd2:	4b4a      	ldr	r3, [pc, #296]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	4946      	ldr	r1, [pc, #280]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00a      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001df4:	4b41      	ldr	r3, [pc, #260]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e02:	493e      	ldr	r1, [pc, #248]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00a      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001e16:	4b39      	ldr	r3, [pc, #228]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e24:	4935      	ldr	r1, [pc, #212]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00a      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e38:	4b30      	ldr	r3, [pc, #192]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e46:	492d      	ldr	r1, [pc, #180]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d011      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001e5a:	4b28      	ldr	r3, [pc, #160]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e60:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e68:	4924      	ldr	r1, [pc, #144]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e78:	d101      	bne.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00a      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea8:	4914      	ldr	r1, [pc, #80]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00b      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ecc:	490b      	ldr	r1, [pc, #44]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00f      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ef0:	4902      	ldr	r1, [pc, #8]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ef8:	e002      	b.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00b      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001f0c:	4b8a      	ldr	r3, [pc, #552]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1c:	4986      	ldr	r1, [pc, #536]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00b      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001f30:	4b81      	ldr	r3, [pc, #516]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f36:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f40:	497d      	ldr	r1, [pc, #500]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d006      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 80d6 	beq.w	8002108 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f5c:	4b76      	ldr	r3, [pc, #472]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a75      	ldr	r2, [pc, #468]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f68:	f7fe fe2a 	bl	8000bc0 <HAL_GetTick>
 8001f6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f70:	f7fe fe26 	bl	8000bc0 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e195      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f82:	4b6d      	ldr	r3, [pc, #436]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d021      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x572>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d11d      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001fa2:	4b65      	ldr	r3, [pc, #404]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fa8:	0c1b      	lsrs	r3, r3, #16
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001fb0:	4b61      	ldr	r3, [pc, #388]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fb6:	0e1b      	lsrs	r3, r3, #24
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	019a      	lsls	r2, r3, #6
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	041b      	lsls	r3, r3, #16
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	061b      	lsls	r3, r3, #24
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	071b      	lsls	r3, r3, #28
 8001fd6:	4958      	ldr	r1, [pc, #352]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d004      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ff2:	d00a      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d02e      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002008:	d129      	bne.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800200a:	4b4b      	ldr	r3, [pc, #300]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800200c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002010:	0c1b      	lsrs	r3, r3, #16
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002018:	4b47      	ldr	r3, [pc, #284]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800201a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800201e:	0f1b      	lsrs	r3, r3, #28
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	019a      	lsls	r2, r3, #6
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	041b      	lsls	r3, r3, #16
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	061b      	lsls	r3, r3, #24
 8002038:	431a      	orrs	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	071b      	lsls	r3, r3, #28
 800203e:	493e      	ldr	r1, [pc, #248]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002046:	4b3c      	ldr	r3, [pc, #240]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800204c:	f023 021f 	bic.w	r2, r3, #31
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	3b01      	subs	r3, #1
 8002056:	4938      	ldr	r1, [pc, #224]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d01d      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800206a:	4b33      	ldr	r3, [pc, #204]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800206c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002070:	0e1b      	lsrs	r3, r3, #24
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002078:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800207a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800207e:	0f1b      	lsrs	r3, r3, #28
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	019a      	lsls	r2, r3, #6
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	041b      	lsls	r3, r3, #16
 8002092:	431a      	orrs	r2, r3
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	061b      	lsls	r3, r3, #24
 8002098:	431a      	orrs	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	071b      	lsls	r3, r3, #28
 800209e:	4926      	ldr	r1, [pc, #152]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d011      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	019a      	lsls	r2, r3, #6
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	041b      	lsls	r3, r3, #16
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	061b      	lsls	r3, r3, #24
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	071b      	lsls	r3, r3, #28
 80020ce:	491a      	ldr	r1, [pc, #104]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80020d6:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a17      	ldr	r2, [pc, #92]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020e2:	f7fe fd6d 	bl	8000bc0 <HAL_GetTick>
 80020e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020ea:	f7fe fd69 	bl	8000bc0 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b64      	cmp	r3, #100	; 0x64
 80020f6:	d901      	bls.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e0d8      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020fc:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2b01      	cmp	r3, #1
 800210c:	f040 80ce 	bne.w	80022ac <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002110:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a08      	ldr	r2, [pc, #32]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800211a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800211c:	f7fe fd50 	bl	8000bc0 <HAL_GetTick>
 8002120:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002122:	e00b      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002124:	f7fe fd4c 	bl	8000bc0 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	; 0x64
 8002130:	d904      	bls.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e0bb      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800213c:	4b5e      	ldr	r3, [pc, #376]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002148:	d0ec      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215a:	2b00      	cmp	r3, #0
 800215c:	d009      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002166:	2b00      	cmp	r3, #0
 8002168:	d02e      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	2b00      	cmp	r3, #0
 8002170:	d12a      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002172:	4b51      	ldr	r3, [pc, #324]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002178:	0c1b      	lsrs	r3, r3, #16
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002180:	4b4d      	ldr	r3, [pc, #308]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002186:	0f1b      	lsrs	r3, r3, #28
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	019a      	lsls	r2, r3, #6
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	041b      	lsls	r3, r3, #16
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	061b      	lsls	r3, r3, #24
 80021a0:	431a      	orrs	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	071b      	lsls	r3, r3, #28
 80021a6:	4944      	ldr	r1, [pc, #272]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80021ae:	4b42      	ldr	r3, [pc, #264]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	3b01      	subs	r3, #1
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	493d      	ldr	r1, [pc, #244]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d022      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021dc:	d11d      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80021de:	4b36      	ldr	r3, [pc, #216]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e4:	0e1b      	lsrs	r3, r3, #24
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80021ec:	4b32      	ldr	r3, [pc, #200]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f2:	0f1b      	lsrs	r3, r3, #28
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	019a      	lsls	r2, r3, #6
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	431a      	orrs	r2, r3
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	061b      	lsls	r3, r3, #24
 800220c:	431a      	orrs	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	071b      	lsls	r3, r3, #28
 8002212:	4929      	ldr	r1, [pc, #164]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d028      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002226:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222c:	0e1b      	lsrs	r3, r3, #24
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002234:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223a:	0c1b      	lsrs	r3, r3, #16
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	019a      	lsls	r2, r3, #6
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	041b      	lsls	r3, r3, #16
 800224c:	431a      	orrs	r2, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	061b      	lsls	r3, r3, #24
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	071b      	lsls	r3, r3, #28
 800225a:	4917      	ldr	r1, [pc, #92]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002268:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	4911      	ldr	r1, [pc, #68]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002278:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0e      	ldr	r2, [pc, #56]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800227e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002282:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002284:	f7fe fc9c 	bl	8000bc0 <HAL_GetTick>
 8002288:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800228a:	e008      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800228c:	f7fe fc98 	bl	8000bc0 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	; 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e007      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022aa:	d1ef      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800

080022bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e040      	b.n	8002350 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d106      	bne.n	80022e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7fe fa94 	bl	800080c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2224      	movs	r2, #36	; 0x24
 80022e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0201 	bic.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f8b0 	bl	8002460 <UART_SetConfig>
 8002300:	4603      	mov	r3, r0
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e022      	b.n	8002350 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fb08 	bl	8002928 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002326:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002336:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 fb8f 	bl	8002a6c <UART_CheckIdleState>
 800234e:	4603      	mov	r3, r0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af02      	add	r7, sp, #8
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	4613      	mov	r3, r2
 8002366:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800236c:	2b20      	cmp	r3, #32
 800236e:	d171      	bne.n	8002454 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <HAL_UART_Transmit+0x24>
 8002376:	88fb      	ldrh	r3, [r7, #6]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e06a      	b.n	8002456 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2221      	movs	r2, #33	; 0x21
 800238c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800238e:	f7fe fc17 	bl	8000bc0 <HAL_GetTick>
 8002392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	88fa      	ldrh	r2, [r7, #6]
 8002398:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	88fa      	ldrh	r2, [r7, #6]
 80023a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ac:	d108      	bne.n	80023c0 <HAL_UART_Transmit+0x68>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d104      	bne.n	80023c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	e003      	b.n	80023c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023c8:	e02c      	b.n	8002424 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2200      	movs	r2, #0
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 fb96 	bl	8002b06 <UART_WaitOnFlagUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e038      	b.n	8002456 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10b      	bne.n	8002402 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	3302      	adds	r3, #2
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	e007      	b.n	8002412 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	3301      	adds	r3, #1
 8002410:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800242a:	b29b      	uxth	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1cc      	bne.n	80023ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2200      	movs	r2, #0
 8002438:	2140      	movs	r1, #64	; 0x40
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 fb63 	bl	8002b06 <UART_WaitOnFlagUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e005      	b.n	8002456 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2220      	movs	r2, #32
 800244e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	e000      	b.n	8002456 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002454:	2302      	movs	r3, #2
  }
}
 8002456:	4618      	mov	r0, r3
 8002458:	3720      	adds	r7, #32
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	4313      	orrs	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4ba6      	ldr	r3, [pc, #664]	; (8002724 <UART_SetConfig+0x2c4>)
 800248c:	4013      	ands	r3, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	6979      	ldr	r1, [r7, #20]
 8002494:	430b      	orrs	r3, r1
 8002496:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a94      	ldr	r2, [pc, #592]	; (8002728 <UART_SetConfig+0x2c8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d120      	bne.n	800251e <UART_SetConfig+0xbe>
 80024dc:	4b93      	ldr	r3, [pc, #588]	; (800272c <UART_SetConfig+0x2cc>)
 80024de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d816      	bhi.n	8002518 <UART_SetConfig+0xb8>
 80024ea:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <UART_SetConfig+0x90>)
 80024ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f0:	08002501 	.word	0x08002501
 80024f4:	0800250d 	.word	0x0800250d
 80024f8:	08002507 	.word	0x08002507
 80024fc:	08002513 	.word	0x08002513
 8002500:	2301      	movs	r3, #1
 8002502:	77fb      	strb	r3, [r7, #31]
 8002504:	e150      	b.n	80027a8 <UART_SetConfig+0x348>
 8002506:	2302      	movs	r3, #2
 8002508:	77fb      	strb	r3, [r7, #31]
 800250a:	e14d      	b.n	80027a8 <UART_SetConfig+0x348>
 800250c:	2304      	movs	r3, #4
 800250e:	77fb      	strb	r3, [r7, #31]
 8002510:	e14a      	b.n	80027a8 <UART_SetConfig+0x348>
 8002512:	2308      	movs	r3, #8
 8002514:	77fb      	strb	r3, [r7, #31]
 8002516:	e147      	b.n	80027a8 <UART_SetConfig+0x348>
 8002518:	2310      	movs	r3, #16
 800251a:	77fb      	strb	r3, [r7, #31]
 800251c:	e144      	b.n	80027a8 <UART_SetConfig+0x348>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a83      	ldr	r2, [pc, #524]	; (8002730 <UART_SetConfig+0x2d0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d132      	bne.n	800258e <UART_SetConfig+0x12e>
 8002528:	4b80      	ldr	r3, [pc, #512]	; (800272c <UART_SetConfig+0x2cc>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b0c      	cmp	r3, #12
 8002534:	d828      	bhi.n	8002588 <UART_SetConfig+0x128>
 8002536:	a201      	add	r2, pc, #4	; (adr r2, 800253c <UART_SetConfig+0xdc>)
 8002538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800253c:	08002571 	.word	0x08002571
 8002540:	08002589 	.word	0x08002589
 8002544:	08002589 	.word	0x08002589
 8002548:	08002589 	.word	0x08002589
 800254c:	0800257d 	.word	0x0800257d
 8002550:	08002589 	.word	0x08002589
 8002554:	08002589 	.word	0x08002589
 8002558:	08002589 	.word	0x08002589
 800255c:	08002577 	.word	0x08002577
 8002560:	08002589 	.word	0x08002589
 8002564:	08002589 	.word	0x08002589
 8002568:	08002589 	.word	0x08002589
 800256c:	08002583 	.word	0x08002583
 8002570:	2300      	movs	r3, #0
 8002572:	77fb      	strb	r3, [r7, #31]
 8002574:	e118      	b.n	80027a8 <UART_SetConfig+0x348>
 8002576:	2302      	movs	r3, #2
 8002578:	77fb      	strb	r3, [r7, #31]
 800257a:	e115      	b.n	80027a8 <UART_SetConfig+0x348>
 800257c:	2304      	movs	r3, #4
 800257e:	77fb      	strb	r3, [r7, #31]
 8002580:	e112      	b.n	80027a8 <UART_SetConfig+0x348>
 8002582:	2308      	movs	r3, #8
 8002584:	77fb      	strb	r3, [r7, #31]
 8002586:	e10f      	b.n	80027a8 <UART_SetConfig+0x348>
 8002588:	2310      	movs	r3, #16
 800258a:	77fb      	strb	r3, [r7, #31]
 800258c:	e10c      	b.n	80027a8 <UART_SetConfig+0x348>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a68      	ldr	r2, [pc, #416]	; (8002734 <UART_SetConfig+0x2d4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d120      	bne.n	80025da <UART_SetConfig+0x17a>
 8002598:	4b64      	ldr	r3, [pc, #400]	; (800272c <UART_SetConfig+0x2cc>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80025a2:	2b30      	cmp	r3, #48	; 0x30
 80025a4:	d013      	beq.n	80025ce <UART_SetConfig+0x16e>
 80025a6:	2b30      	cmp	r3, #48	; 0x30
 80025a8:	d814      	bhi.n	80025d4 <UART_SetConfig+0x174>
 80025aa:	2b20      	cmp	r3, #32
 80025ac:	d009      	beq.n	80025c2 <UART_SetConfig+0x162>
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	d810      	bhi.n	80025d4 <UART_SetConfig+0x174>
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <UART_SetConfig+0x15c>
 80025b6:	2b10      	cmp	r3, #16
 80025b8:	d006      	beq.n	80025c8 <UART_SetConfig+0x168>
 80025ba:	e00b      	b.n	80025d4 <UART_SetConfig+0x174>
 80025bc:	2300      	movs	r3, #0
 80025be:	77fb      	strb	r3, [r7, #31]
 80025c0:	e0f2      	b.n	80027a8 <UART_SetConfig+0x348>
 80025c2:	2302      	movs	r3, #2
 80025c4:	77fb      	strb	r3, [r7, #31]
 80025c6:	e0ef      	b.n	80027a8 <UART_SetConfig+0x348>
 80025c8:	2304      	movs	r3, #4
 80025ca:	77fb      	strb	r3, [r7, #31]
 80025cc:	e0ec      	b.n	80027a8 <UART_SetConfig+0x348>
 80025ce:	2308      	movs	r3, #8
 80025d0:	77fb      	strb	r3, [r7, #31]
 80025d2:	e0e9      	b.n	80027a8 <UART_SetConfig+0x348>
 80025d4:	2310      	movs	r3, #16
 80025d6:	77fb      	strb	r3, [r7, #31]
 80025d8:	e0e6      	b.n	80027a8 <UART_SetConfig+0x348>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a56      	ldr	r2, [pc, #344]	; (8002738 <UART_SetConfig+0x2d8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d120      	bne.n	8002626 <UART_SetConfig+0x1c6>
 80025e4:	4b51      	ldr	r3, [pc, #324]	; (800272c <UART_SetConfig+0x2cc>)
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80025ee:	2bc0      	cmp	r3, #192	; 0xc0
 80025f0:	d013      	beq.n	800261a <UART_SetConfig+0x1ba>
 80025f2:	2bc0      	cmp	r3, #192	; 0xc0
 80025f4:	d814      	bhi.n	8002620 <UART_SetConfig+0x1c0>
 80025f6:	2b80      	cmp	r3, #128	; 0x80
 80025f8:	d009      	beq.n	800260e <UART_SetConfig+0x1ae>
 80025fa:	2b80      	cmp	r3, #128	; 0x80
 80025fc:	d810      	bhi.n	8002620 <UART_SetConfig+0x1c0>
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <UART_SetConfig+0x1a8>
 8002602:	2b40      	cmp	r3, #64	; 0x40
 8002604:	d006      	beq.n	8002614 <UART_SetConfig+0x1b4>
 8002606:	e00b      	b.n	8002620 <UART_SetConfig+0x1c0>
 8002608:	2300      	movs	r3, #0
 800260a:	77fb      	strb	r3, [r7, #31]
 800260c:	e0cc      	b.n	80027a8 <UART_SetConfig+0x348>
 800260e:	2302      	movs	r3, #2
 8002610:	77fb      	strb	r3, [r7, #31]
 8002612:	e0c9      	b.n	80027a8 <UART_SetConfig+0x348>
 8002614:	2304      	movs	r3, #4
 8002616:	77fb      	strb	r3, [r7, #31]
 8002618:	e0c6      	b.n	80027a8 <UART_SetConfig+0x348>
 800261a:	2308      	movs	r3, #8
 800261c:	77fb      	strb	r3, [r7, #31]
 800261e:	e0c3      	b.n	80027a8 <UART_SetConfig+0x348>
 8002620:	2310      	movs	r3, #16
 8002622:	77fb      	strb	r3, [r7, #31]
 8002624:	e0c0      	b.n	80027a8 <UART_SetConfig+0x348>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a44      	ldr	r2, [pc, #272]	; (800273c <UART_SetConfig+0x2dc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d125      	bne.n	800267c <UART_SetConfig+0x21c>
 8002630:	4b3e      	ldr	r3, [pc, #248]	; (800272c <UART_SetConfig+0x2cc>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800263e:	d017      	beq.n	8002670 <UART_SetConfig+0x210>
 8002640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002644:	d817      	bhi.n	8002676 <UART_SetConfig+0x216>
 8002646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800264a:	d00b      	beq.n	8002664 <UART_SetConfig+0x204>
 800264c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002650:	d811      	bhi.n	8002676 <UART_SetConfig+0x216>
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <UART_SetConfig+0x1fe>
 8002656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800265a:	d006      	beq.n	800266a <UART_SetConfig+0x20a>
 800265c:	e00b      	b.n	8002676 <UART_SetConfig+0x216>
 800265e:	2300      	movs	r3, #0
 8002660:	77fb      	strb	r3, [r7, #31]
 8002662:	e0a1      	b.n	80027a8 <UART_SetConfig+0x348>
 8002664:	2302      	movs	r3, #2
 8002666:	77fb      	strb	r3, [r7, #31]
 8002668:	e09e      	b.n	80027a8 <UART_SetConfig+0x348>
 800266a:	2304      	movs	r3, #4
 800266c:	77fb      	strb	r3, [r7, #31]
 800266e:	e09b      	b.n	80027a8 <UART_SetConfig+0x348>
 8002670:	2308      	movs	r3, #8
 8002672:	77fb      	strb	r3, [r7, #31]
 8002674:	e098      	b.n	80027a8 <UART_SetConfig+0x348>
 8002676:	2310      	movs	r3, #16
 8002678:	77fb      	strb	r3, [r7, #31]
 800267a:	e095      	b.n	80027a8 <UART_SetConfig+0x348>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a2f      	ldr	r2, [pc, #188]	; (8002740 <UART_SetConfig+0x2e0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d125      	bne.n	80026d2 <UART_SetConfig+0x272>
 8002686:	4b29      	ldr	r3, [pc, #164]	; (800272c <UART_SetConfig+0x2cc>)
 8002688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002690:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002694:	d017      	beq.n	80026c6 <UART_SetConfig+0x266>
 8002696:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800269a:	d817      	bhi.n	80026cc <UART_SetConfig+0x26c>
 800269c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026a0:	d00b      	beq.n	80026ba <UART_SetConfig+0x25a>
 80026a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026a6:	d811      	bhi.n	80026cc <UART_SetConfig+0x26c>
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <UART_SetConfig+0x254>
 80026ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b0:	d006      	beq.n	80026c0 <UART_SetConfig+0x260>
 80026b2:	e00b      	b.n	80026cc <UART_SetConfig+0x26c>
 80026b4:	2301      	movs	r3, #1
 80026b6:	77fb      	strb	r3, [r7, #31]
 80026b8:	e076      	b.n	80027a8 <UART_SetConfig+0x348>
 80026ba:	2302      	movs	r3, #2
 80026bc:	77fb      	strb	r3, [r7, #31]
 80026be:	e073      	b.n	80027a8 <UART_SetConfig+0x348>
 80026c0:	2304      	movs	r3, #4
 80026c2:	77fb      	strb	r3, [r7, #31]
 80026c4:	e070      	b.n	80027a8 <UART_SetConfig+0x348>
 80026c6:	2308      	movs	r3, #8
 80026c8:	77fb      	strb	r3, [r7, #31]
 80026ca:	e06d      	b.n	80027a8 <UART_SetConfig+0x348>
 80026cc:	2310      	movs	r3, #16
 80026ce:	77fb      	strb	r3, [r7, #31]
 80026d0:	e06a      	b.n	80027a8 <UART_SetConfig+0x348>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a1b      	ldr	r2, [pc, #108]	; (8002744 <UART_SetConfig+0x2e4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d138      	bne.n	800274e <UART_SetConfig+0x2ee>
 80026dc:	4b13      	ldr	r3, [pc, #76]	; (800272c <UART_SetConfig+0x2cc>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80026e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80026ea:	d017      	beq.n	800271c <UART_SetConfig+0x2bc>
 80026ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80026f0:	d82a      	bhi.n	8002748 <UART_SetConfig+0x2e8>
 80026f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026f6:	d00b      	beq.n	8002710 <UART_SetConfig+0x2b0>
 80026f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026fc:	d824      	bhi.n	8002748 <UART_SetConfig+0x2e8>
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <UART_SetConfig+0x2aa>
 8002702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002706:	d006      	beq.n	8002716 <UART_SetConfig+0x2b6>
 8002708:	e01e      	b.n	8002748 <UART_SetConfig+0x2e8>
 800270a:	2300      	movs	r3, #0
 800270c:	77fb      	strb	r3, [r7, #31]
 800270e:	e04b      	b.n	80027a8 <UART_SetConfig+0x348>
 8002710:	2302      	movs	r3, #2
 8002712:	77fb      	strb	r3, [r7, #31]
 8002714:	e048      	b.n	80027a8 <UART_SetConfig+0x348>
 8002716:	2304      	movs	r3, #4
 8002718:	77fb      	strb	r3, [r7, #31]
 800271a:	e045      	b.n	80027a8 <UART_SetConfig+0x348>
 800271c:	2308      	movs	r3, #8
 800271e:	77fb      	strb	r3, [r7, #31]
 8002720:	e042      	b.n	80027a8 <UART_SetConfig+0x348>
 8002722:	bf00      	nop
 8002724:	efff69f3 	.word	0xefff69f3
 8002728:	40011000 	.word	0x40011000
 800272c:	40023800 	.word	0x40023800
 8002730:	40004400 	.word	0x40004400
 8002734:	40004800 	.word	0x40004800
 8002738:	40004c00 	.word	0x40004c00
 800273c:	40005000 	.word	0x40005000
 8002740:	40011400 	.word	0x40011400
 8002744:	40007800 	.word	0x40007800
 8002748:	2310      	movs	r3, #16
 800274a:	77fb      	strb	r3, [r7, #31]
 800274c:	e02c      	b.n	80027a8 <UART_SetConfig+0x348>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a72      	ldr	r2, [pc, #456]	; (800291c <UART_SetConfig+0x4bc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d125      	bne.n	80027a4 <UART_SetConfig+0x344>
 8002758:	4b71      	ldr	r3, [pc, #452]	; (8002920 <UART_SetConfig+0x4c0>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002762:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002766:	d017      	beq.n	8002798 <UART_SetConfig+0x338>
 8002768:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800276c:	d817      	bhi.n	800279e <UART_SetConfig+0x33e>
 800276e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002772:	d00b      	beq.n	800278c <UART_SetConfig+0x32c>
 8002774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002778:	d811      	bhi.n	800279e <UART_SetConfig+0x33e>
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <UART_SetConfig+0x326>
 800277e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002782:	d006      	beq.n	8002792 <UART_SetConfig+0x332>
 8002784:	e00b      	b.n	800279e <UART_SetConfig+0x33e>
 8002786:	2300      	movs	r3, #0
 8002788:	77fb      	strb	r3, [r7, #31]
 800278a:	e00d      	b.n	80027a8 <UART_SetConfig+0x348>
 800278c:	2302      	movs	r3, #2
 800278e:	77fb      	strb	r3, [r7, #31]
 8002790:	e00a      	b.n	80027a8 <UART_SetConfig+0x348>
 8002792:	2304      	movs	r3, #4
 8002794:	77fb      	strb	r3, [r7, #31]
 8002796:	e007      	b.n	80027a8 <UART_SetConfig+0x348>
 8002798:	2308      	movs	r3, #8
 800279a:	77fb      	strb	r3, [r7, #31]
 800279c:	e004      	b.n	80027a8 <UART_SetConfig+0x348>
 800279e:	2310      	movs	r3, #16
 80027a0:	77fb      	strb	r3, [r7, #31]
 80027a2:	e001      	b.n	80027a8 <UART_SetConfig+0x348>
 80027a4:	2310      	movs	r3, #16
 80027a6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027b0:	d15b      	bne.n	800286a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80027b2:	7ffb      	ldrb	r3, [r7, #31]
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d828      	bhi.n	800280a <UART_SetConfig+0x3aa>
 80027b8:	a201      	add	r2, pc, #4	; (adr r2, 80027c0 <UART_SetConfig+0x360>)
 80027ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027be:	bf00      	nop
 80027c0:	080027e5 	.word	0x080027e5
 80027c4:	080027ed 	.word	0x080027ed
 80027c8:	080027f5 	.word	0x080027f5
 80027cc:	0800280b 	.word	0x0800280b
 80027d0:	080027fb 	.word	0x080027fb
 80027d4:	0800280b 	.word	0x0800280b
 80027d8:	0800280b 	.word	0x0800280b
 80027dc:	0800280b 	.word	0x0800280b
 80027e0:	08002803 	.word	0x08002803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027e4:	f7ff f91a 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 80027e8:	61b8      	str	r0, [r7, #24]
        break;
 80027ea:	e013      	b.n	8002814 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027ec:	f7ff f92a 	bl	8001a44 <HAL_RCC_GetPCLK2Freq>
 80027f0:	61b8      	str	r0, [r7, #24]
        break;
 80027f2:	e00f      	b.n	8002814 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027f4:	4b4b      	ldr	r3, [pc, #300]	; (8002924 <UART_SetConfig+0x4c4>)
 80027f6:	61bb      	str	r3, [r7, #24]
        break;
 80027f8:	e00c      	b.n	8002814 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027fa:	f7ff f83d 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 80027fe:	61b8      	str	r0, [r7, #24]
        break;
 8002800:	e008      	b.n	8002814 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002806:	61bb      	str	r3, [r7, #24]
        break;
 8002808:	e004      	b.n	8002814 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	77bb      	strb	r3, [r7, #30]
        break;
 8002812:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d074      	beq.n	8002904 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	005a      	lsls	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	085b      	lsrs	r3, r3, #1
 8002824:	441a      	add	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	fbb2 f3f3 	udiv	r3, r2, r3
 800282e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	2b0f      	cmp	r3, #15
 8002834:	d916      	bls.n	8002864 <UART_SetConfig+0x404>
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283c:	d212      	bcs.n	8002864 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	b29b      	uxth	r3, r3
 8002842:	f023 030f 	bic.w	r3, r3, #15
 8002846:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	085b      	lsrs	r3, r3, #1
 800284c:	b29b      	uxth	r3, r3
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	b29a      	uxth	r2, r3
 8002854:	89fb      	ldrh	r3, [r7, #14]
 8002856:	4313      	orrs	r3, r2
 8002858:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	89fa      	ldrh	r2, [r7, #14]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	e04f      	b.n	8002904 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	77bb      	strb	r3, [r7, #30]
 8002868:	e04c      	b.n	8002904 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800286a:	7ffb      	ldrb	r3, [r7, #31]
 800286c:	2b08      	cmp	r3, #8
 800286e:	d828      	bhi.n	80028c2 <UART_SetConfig+0x462>
 8002870:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <UART_SetConfig+0x418>)
 8002872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002876:	bf00      	nop
 8002878:	0800289d 	.word	0x0800289d
 800287c:	080028a5 	.word	0x080028a5
 8002880:	080028ad 	.word	0x080028ad
 8002884:	080028c3 	.word	0x080028c3
 8002888:	080028b3 	.word	0x080028b3
 800288c:	080028c3 	.word	0x080028c3
 8002890:	080028c3 	.word	0x080028c3
 8002894:	080028c3 	.word	0x080028c3
 8002898:	080028bb 	.word	0x080028bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800289c:	f7ff f8be 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 80028a0:	61b8      	str	r0, [r7, #24]
        break;
 80028a2:	e013      	b.n	80028cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028a4:	f7ff f8ce 	bl	8001a44 <HAL_RCC_GetPCLK2Freq>
 80028a8:	61b8      	str	r0, [r7, #24]
        break;
 80028aa:	e00f      	b.n	80028cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028ac:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <UART_SetConfig+0x4c4>)
 80028ae:	61bb      	str	r3, [r7, #24]
        break;
 80028b0:	e00c      	b.n	80028cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028b2:	f7fe ffe1 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 80028b6:	61b8      	str	r0, [r7, #24]
        break;
 80028b8:	e008      	b.n	80028cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028be:	61bb      	str	r3, [r7, #24]
        break;
 80028c0:	e004      	b.n	80028cc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	77bb      	strb	r3, [r7, #30]
        break;
 80028ca:	bf00      	nop
    }

    if (pclk != 0U)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d018      	beq.n	8002904 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	085a      	lsrs	r2, r3, #1
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	441a      	add	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	2b0f      	cmp	r3, #15
 80028ea:	d909      	bls.n	8002900 <UART_SetConfig+0x4a0>
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f2:	d205      	bcs.n	8002900 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	e001      	b.n	8002904 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002910:	7fbb      	ldrb	r3, [r7, #30]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3720      	adds	r7, #32
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40007c00 	.word	0x40007c00
 8002920:	40023800 	.word	0x40023800
 8002924:	00f42400 	.word	0x00f42400

08002928 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01a      	beq.n	8002a3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a26:	d10a      	bne.n	8002a3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	605a      	str	r2, [r3, #4]
  }
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a7c:	f7fe f8a0 	bl	8000bc0 <HAL_GetTick>
 8002a80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d10e      	bne.n	8002aae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f831 	bl	8002b06 <UART_WaitOnFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e027      	b.n	8002afe <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d10e      	bne.n	8002ada <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002abc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f81b 	bl	8002b06 <UART_WaitOnFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e011      	b.n	8002afe <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2220      	movs	r2, #32
 8002ade:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b09c      	sub	sp, #112	; 0x70
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	603b      	str	r3, [r7, #0]
 8002b12:	4613      	mov	r3, r2
 8002b14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b16:	e0a7      	b.n	8002c68 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1e:	f000 80a3 	beq.w	8002c68 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b22:	f7fe f84d 	bl	8000bc0 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d302      	bcc.n	8002b38 <UART_WaitOnFlagUntilTimeout+0x32>
 8002b32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d13f      	bne.n	8002bb8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b40:	e853 3f00 	ldrex	r3, [r3]
 8002b44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b4c:	667b      	str	r3, [r7, #100]	; 0x64
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002b5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b5e:	e841 2300 	strex	r3, r2, [r1]
 8002b62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1e6      	bne.n	8002b38 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	3308      	adds	r3, #8
 8002b70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b74:	e853 3f00 	ldrex	r3, [r3]
 8002b78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7c:	f023 0301 	bic.w	r3, r3, #1
 8002b80:	663b      	str	r3, [r7, #96]	; 0x60
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	3308      	adds	r3, #8
 8002b88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8002b8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002b90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b92:	e841 2300 	strex	r3, r2, [r1]
 8002b96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1e5      	bne.n	8002b6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e068      	b.n	8002c8a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d050      	beq.n	8002c68 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bd4:	d148      	bne.n	8002c68 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bde:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	e853 3f00 	ldrex	r3, [r3]
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8002c00:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c06:	e841 2300 	strex	r3, r2, [r1]
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1e6      	bne.n	8002be0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3308      	adds	r3, #8
 8002c18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	e853 3f00 	ldrex	r3, [r3]
 8002c20:	613b      	str	r3, [r7, #16]
   return(result);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3308      	adds	r3, #8
 8002c30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c32:	623a      	str	r2, [r7, #32]
 8002c34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c36:	69f9      	ldr	r1, [r7, #28]
 8002c38:	6a3a      	ldr	r2, [r7, #32]
 8002c3a:	e841 2300 	strex	r3, r2, [r1]
 8002c3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1e5      	bne.n	8002c12 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e010      	b.n	8002c8a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	4013      	ands	r3, r2
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	bf0c      	ite	eq
 8002c78:	2301      	moveq	r3, #1
 8002c7a:	2300      	movne	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	461a      	mov	r2, r3
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	f43f af48 	beq.w	8002b18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3770      	adds	r7, #112	; 0x70
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <__errno>:
 8002c94:	4b01      	ldr	r3, [pc, #4]	; (8002c9c <__errno+0x8>)
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	2000000c 	.word	0x2000000c

08002ca0 <__libc_init_array>:
 8002ca0:	b570      	push	{r4, r5, r6, lr}
 8002ca2:	4d0d      	ldr	r5, [pc, #52]	; (8002cd8 <__libc_init_array+0x38>)
 8002ca4:	4c0d      	ldr	r4, [pc, #52]	; (8002cdc <__libc_init_array+0x3c>)
 8002ca6:	1b64      	subs	r4, r4, r5
 8002ca8:	10a4      	asrs	r4, r4, #2
 8002caa:	2600      	movs	r6, #0
 8002cac:	42a6      	cmp	r6, r4
 8002cae:	d109      	bne.n	8002cc4 <__libc_init_array+0x24>
 8002cb0:	4d0b      	ldr	r5, [pc, #44]	; (8002ce0 <__libc_init_array+0x40>)
 8002cb2:	4c0c      	ldr	r4, [pc, #48]	; (8002ce4 <__libc_init_array+0x44>)
 8002cb4:	f002 fe5c 	bl	8005970 <_init>
 8002cb8:	1b64      	subs	r4, r4, r5
 8002cba:	10a4      	asrs	r4, r4, #2
 8002cbc:	2600      	movs	r6, #0
 8002cbe:	42a6      	cmp	r6, r4
 8002cc0:	d105      	bne.n	8002cce <__libc_init_array+0x2e>
 8002cc2:	bd70      	pop	{r4, r5, r6, pc}
 8002cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cc8:	4798      	blx	r3
 8002cca:	3601      	adds	r6, #1
 8002ccc:	e7ee      	b.n	8002cac <__libc_init_array+0xc>
 8002cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd2:	4798      	blx	r3
 8002cd4:	3601      	adds	r6, #1
 8002cd6:	e7f2      	b.n	8002cbe <__libc_init_array+0x1e>
 8002cd8:	08005d8c 	.word	0x08005d8c
 8002cdc:	08005d8c 	.word	0x08005d8c
 8002ce0:	08005d8c 	.word	0x08005d8c
 8002ce4:	08005d90 	.word	0x08005d90

08002ce8 <memset>:
 8002ce8:	4402      	add	r2, r0
 8002cea:	4603      	mov	r3, r0
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d100      	bne.n	8002cf2 <memset+0xa>
 8002cf0:	4770      	bx	lr
 8002cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8002cf6:	e7f9      	b.n	8002cec <memset+0x4>

08002cf8 <__cvt>:
 8002cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cfa:	ed2d 8b02 	vpush	{d8}
 8002cfe:	eeb0 8b40 	vmov.f64	d8, d0
 8002d02:	b085      	sub	sp, #20
 8002d04:	4617      	mov	r7, r2
 8002d06:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002d08:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002d0a:	ee18 2a90 	vmov	r2, s17
 8002d0e:	f025 0520 	bic.w	r5, r5, #32
 8002d12:	2a00      	cmp	r2, #0
 8002d14:	bfb6      	itet	lt
 8002d16:	222d      	movlt	r2, #45	; 0x2d
 8002d18:	2200      	movge	r2, #0
 8002d1a:	eeb1 8b40 	vneglt.f64	d8, d0
 8002d1e:	2d46      	cmp	r5, #70	; 0x46
 8002d20:	460c      	mov	r4, r1
 8002d22:	701a      	strb	r2, [r3, #0]
 8002d24:	d004      	beq.n	8002d30 <__cvt+0x38>
 8002d26:	2d45      	cmp	r5, #69	; 0x45
 8002d28:	d100      	bne.n	8002d2c <__cvt+0x34>
 8002d2a:	3401      	adds	r4, #1
 8002d2c:	2102      	movs	r1, #2
 8002d2e:	e000      	b.n	8002d32 <__cvt+0x3a>
 8002d30:	2103      	movs	r1, #3
 8002d32:	ab03      	add	r3, sp, #12
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	ab02      	add	r3, sp, #8
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	4622      	mov	r2, r4
 8002d3c:	4633      	mov	r3, r6
 8002d3e:	eeb0 0b48 	vmov.f64	d0, d8
 8002d42:	f000 fcc9 	bl	80036d8 <_dtoa_r>
 8002d46:	2d47      	cmp	r5, #71	; 0x47
 8002d48:	d101      	bne.n	8002d4e <__cvt+0x56>
 8002d4a:	07fb      	lsls	r3, r7, #31
 8002d4c:	d51a      	bpl.n	8002d84 <__cvt+0x8c>
 8002d4e:	2d46      	cmp	r5, #70	; 0x46
 8002d50:	eb00 0204 	add.w	r2, r0, r4
 8002d54:	d10c      	bne.n	8002d70 <__cvt+0x78>
 8002d56:	7803      	ldrb	r3, [r0, #0]
 8002d58:	2b30      	cmp	r3, #48	; 0x30
 8002d5a:	d107      	bne.n	8002d6c <__cvt+0x74>
 8002d5c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8002d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d64:	bf1c      	itt	ne
 8002d66:	f1c4 0401 	rsbne	r4, r4, #1
 8002d6a:	6034      	strne	r4, [r6, #0]
 8002d6c:	6833      	ldr	r3, [r6, #0]
 8002d6e:	441a      	add	r2, r3
 8002d70:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8002d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d78:	bf08      	it	eq
 8002d7a:	9203      	streq	r2, [sp, #12]
 8002d7c:	2130      	movs	r1, #48	; 0x30
 8002d7e:	9b03      	ldr	r3, [sp, #12]
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d307      	bcc.n	8002d94 <__cvt+0x9c>
 8002d84:	9b03      	ldr	r3, [sp, #12]
 8002d86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d88:	1a1b      	subs	r3, r3, r0
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	b005      	add	sp, #20
 8002d8e:	ecbd 8b02 	vpop	{d8}
 8002d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d94:	1c5c      	adds	r4, r3, #1
 8002d96:	9403      	str	r4, [sp, #12]
 8002d98:	7019      	strb	r1, [r3, #0]
 8002d9a:	e7f0      	b.n	8002d7e <__cvt+0x86>

08002d9c <__exponent>:
 8002d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2900      	cmp	r1, #0
 8002da2:	bfb8      	it	lt
 8002da4:	4249      	neglt	r1, r1
 8002da6:	f803 2b02 	strb.w	r2, [r3], #2
 8002daa:	bfb4      	ite	lt
 8002dac:	222d      	movlt	r2, #45	; 0x2d
 8002dae:	222b      	movge	r2, #43	; 0x2b
 8002db0:	2909      	cmp	r1, #9
 8002db2:	7042      	strb	r2, [r0, #1]
 8002db4:	dd2a      	ble.n	8002e0c <__exponent+0x70>
 8002db6:	f10d 0407 	add.w	r4, sp, #7
 8002dba:	46a4      	mov	ip, r4
 8002dbc:	270a      	movs	r7, #10
 8002dbe:	46a6      	mov	lr, r4
 8002dc0:	460a      	mov	r2, r1
 8002dc2:	fb91 f6f7 	sdiv	r6, r1, r7
 8002dc6:	fb07 1516 	mls	r5, r7, r6, r1
 8002dca:	3530      	adds	r5, #48	; 0x30
 8002dcc:	2a63      	cmp	r2, #99	; 0x63
 8002dce:	f104 34ff 	add.w	r4, r4, #4294967295
 8002dd2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002dd6:	4631      	mov	r1, r6
 8002dd8:	dcf1      	bgt.n	8002dbe <__exponent+0x22>
 8002dda:	3130      	adds	r1, #48	; 0x30
 8002ddc:	f1ae 0502 	sub.w	r5, lr, #2
 8002de0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002de4:	1c44      	adds	r4, r0, #1
 8002de6:	4629      	mov	r1, r5
 8002de8:	4561      	cmp	r1, ip
 8002dea:	d30a      	bcc.n	8002e02 <__exponent+0x66>
 8002dec:	f10d 0209 	add.w	r2, sp, #9
 8002df0:	eba2 020e 	sub.w	r2, r2, lr
 8002df4:	4565      	cmp	r5, ip
 8002df6:	bf88      	it	hi
 8002df8:	2200      	movhi	r2, #0
 8002dfa:	4413      	add	r3, r2
 8002dfc:	1a18      	subs	r0, r3, r0
 8002dfe:	b003      	add	sp, #12
 8002e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e06:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002e0a:	e7ed      	b.n	8002de8 <__exponent+0x4c>
 8002e0c:	2330      	movs	r3, #48	; 0x30
 8002e0e:	3130      	adds	r1, #48	; 0x30
 8002e10:	7083      	strb	r3, [r0, #2]
 8002e12:	70c1      	strb	r1, [r0, #3]
 8002e14:	1d03      	adds	r3, r0, #4
 8002e16:	e7f1      	b.n	8002dfc <__exponent+0x60>

08002e18 <_printf_float>:
 8002e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e1c:	b08b      	sub	sp, #44	; 0x2c
 8002e1e:	460c      	mov	r4, r1
 8002e20:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8002e24:	4616      	mov	r6, r2
 8002e26:	461f      	mov	r7, r3
 8002e28:	4605      	mov	r5, r0
 8002e2a:	f001 f9c3 	bl	80041b4 <_localeconv_r>
 8002e2e:	f8d0 b000 	ldr.w	fp, [r0]
 8002e32:	4658      	mov	r0, fp
 8002e34:	f7fd fa04 	bl	8000240 <strlen>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	9308      	str	r3, [sp, #32]
 8002e3c:	f8d8 3000 	ldr.w	r3, [r8]
 8002e40:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002e44:	6822      	ldr	r2, [r4, #0]
 8002e46:	3307      	adds	r3, #7
 8002e48:	f023 0307 	bic.w	r3, r3, #7
 8002e4c:	f103 0108 	add.w	r1, r3, #8
 8002e50:	f8c8 1000 	str.w	r1, [r8]
 8002e54:	4682      	mov	sl, r0
 8002e56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e5a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8002e5e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80030c0 <_printf_float+0x2a8>
 8002e62:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8002e66:	eeb0 6bc0 	vabs.f64	d6, d0
 8002e6a:	eeb4 6b47 	vcmp.f64	d6, d7
 8002e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e72:	dd24      	ble.n	8002ebe <_printf_float+0xa6>
 8002e74:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8002e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7c:	d502      	bpl.n	8002e84 <_printf_float+0x6c>
 8002e7e:	232d      	movs	r3, #45	; 0x2d
 8002e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e84:	4b90      	ldr	r3, [pc, #576]	; (80030c8 <_printf_float+0x2b0>)
 8002e86:	4891      	ldr	r0, [pc, #580]	; (80030cc <_printf_float+0x2b4>)
 8002e88:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002e8c:	bf94      	ite	ls
 8002e8e:	4698      	movls	r8, r3
 8002e90:	4680      	movhi	r8, r0
 8002e92:	2303      	movs	r3, #3
 8002e94:	6123      	str	r3, [r4, #16]
 8002e96:	f022 0204 	bic.w	r2, r2, #4
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	6022      	str	r2, [r4, #0]
 8002e9e:	9304      	str	r3, [sp, #16]
 8002ea0:	9700      	str	r7, [sp, #0]
 8002ea2:	4633      	mov	r3, r6
 8002ea4:	aa09      	add	r2, sp, #36	; 0x24
 8002ea6:	4621      	mov	r1, r4
 8002ea8:	4628      	mov	r0, r5
 8002eaa:	f000 f9d3 	bl	8003254 <_printf_common>
 8002eae:	3001      	adds	r0, #1
 8002eb0:	f040 808a 	bne.w	8002fc8 <_printf_float+0x1b0>
 8002eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb8:	b00b      	add	sp, #44	; 0x2c
 8002eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ebe:	eeb4 0b40 	vcmp.f64	d0, d0
 8002ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec6:	d709      	bvc.n	8002edc <_printf_float+0xc4>
 8002ec8:	ee10 3a90 	vmov	r3, s1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bfbc      	itt	lt
 8002ed0:	232d      	movlt	r3, #45	; 0x2d
 8002ed2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002ed6:	487e      	ldr	r0, [pc, #504]	; (80030d0 <_printf_float+0x2b8>)
 8002ed8:	4b7e      	ldr	r3, [pc, #504]	; (80030d4 <_printf_float+0x2bc>)
 8002eda:	e7d5      	b.n	8002e88 <_printf_float+0x70>
 8002edc:	6863      	ldr	r3, [r4, #4]
 8002ede:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002ee2:	9104      	str	r1, [sp, #16]
 8002ee4:	1c59      	adds	r1, r3, #1
 8002ee6:	d13c      	bne.n	8002f62 <_printf_float+0x14a>
 8002ee8:	2306      	movs	r3, #6
 8002eea:	6063      	str	r3, [r4, #4]
 8002eec:	2300      	movs	r3, #0
 8002eee:	9303      	str	r3, [sp, #12]
 8002ef0:	ab08      	add	r3, sp, #32
 8002ef2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002ef6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002efa:	ab07      	add	r3, sp, #28
 8002efc:	6861      	ldr	r1, [r4, #4]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	6022      	str	r2, [r4, #0]
 8002f02:	f10d 031b 	add.w	r3, sp, #27
 8002f06:	4628      	mov	r0, r5
 8002f08:	f7ff fef6 	bl	8002cf8 <__cvt>
 8002f0c:	9b04      	ldr	r3, [sp, #16]
 8002f0e:	9907      	ldr	r1, [sp, #28]
 8002f10:	2b47      	cmp	r3, #71	; 0x47
 8002f12:	4680      	mov	r8, r0
 8002f14:	d108      	bne.n	8002f28 <_printf_float+0x110>
 8002f16:	1cc8      	adds	r0, r1, #3
 8002f18:	db02      	blt.n	8002f20 <_printf_float+0x108>
 8002f1a:	6863      	ldr	r3, [r4, #4]
 8002f1c:	4299      	cmp	r1, r3
 8002f1e:	dd41      	ble.n	8002fa4 <_printf_float+0x18c>
 8002f20:	f1a9 0902 	sub.w	r9, r9, #2
 8002f24:	fa5f f989 	uxtb.w	r9, r9
 8002f28:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002f2c:	d820      	bhi.n	8002f70 <_printf_float+0x158>
 8002f2e:	3901      	subs	r1, #1
 8002f30:	464a      	mov	r2, r9
 8002f32:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002f36:	9107      	str	r1, [sp, #28]
 8002f38:	f7ff ff30 	bl	8002d9c <__exponent>
 8002f3c:	9a08      	ldr	r2, [sp, #32]
 8002f3e:	9004      	str	r0, [sp, #16]
 8002f40:	1813      	adds	r3, r2, r0
 8002f42:	2a01      	cmp	r2, #1
 8002f44:	6123      	str	r3, [r4, #16]
 8002f46:	dc02      	bgt.n	8002f4e <_printf_float+0x136>
 8002f48:	6822      	ldr	r2, [r4, #0]
 8002f4a:	07d2      	lsls	r2, r2, #31
 8002f4c:	d501      	bpl.n	8002f52 <_printf_float+0x13a>
 8002f4e:	3301      	adds	r3, #1
 8002f50:	6123      	str	r3, [r4, #16]
 8002f52:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0a2      	beq.n	8002ea0 <_printf_float+0x88>
 8002f5a:	232d      	movs	r3, #45	; 0x2d
 8002f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f60:	e79e      	b.n	8002ea0 <_printf_float+0x88>
 8002f62:	9904      	ldr	r1, [sp, #16]
 8002f64:	2947      	cmp	r1, #71	; 0x47
 8002f66:	d1c1      	bne.n	8002eec <_printf_float+0xd4>
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1bf      	bne.n	8002eec <_printf_float+0xd4>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e7bc      	b.n	8002eea <_printf_float+0xd2>
 8002f70:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002f74:	d118      	bne.n	8002fa8 <_printf_float+0x190>
 8002f76:	2900      	cmp	r1, #0
 8002f78:	6863      	ldr	r3, [r4, #4]
 8002f7a:	dd0b      	ble.n	8002f94 <_printf_float+0x17c>
 8002f7c:	6121      	str	r1, [r4, #16]
 8002f7e:	b913      	cbnz	r3, 8002f86 <_printf_float+0x16e>
 8002f80:	6822      	ldr	r2, [r4, #0]
 8002f82:	07d0      	lsls	r0, r2, #31
 8002f84:	d502      	bpl.n	8002f8c <_printf_float+0x174>
 8002f86:	3301      	adds	r3, #1
 8002f88:	440b      	add	r3, r1
 8002f8a:	6123      	str	r3, [r4, #16]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8002f90:	9304      	str	r3, [sp, #16]
 8002f92:	e7de      	b.n	8002f52 <_printf_float+0x13a>
 8002f94:	b913      	cbnz	r3, 8002f9c <_printf_float+0x184>
 8002f96:	6822      	ldr	r2, [r4, #0]
 8002f98:	07d2      	lsls	r2, r2, #31
 8002f9a:	d501      	bpl.n	8002fa0 <_printf_float+0x188>
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	e7f4      	b.n	8002f8a <_printf_float+0x172>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e7f2      	b.n	8002f8a <_printf_float+0x172>
 8002fa4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002fa8:	9b08      	ldr	r3, [sp, #32]
 8002faa:	4299      	cmp	r1, r3
 8002fac:	db05      	blt.n	8002fba <_printf_float+0x1a2>
 8002fae:	6823      	ldr	r3, [r4, #0]
 8002fb0:	6121      	str	r1, [r4, #16]
 8002fb2:	07d8      	lsls	r0, r3, #31
 8002fb4:	d5ea      	bpl.n	8002f8c <_printf_float+0x174>
 8002fb6:	1c4b      	adds	r3, r1, #1
 8002fb8:	e7e7      	b.n	8002f8a <_printf_float+0x172>
 8002fba:	2900      	cmp	r1, #0
 8002fbc:	bfd4      	ite	le
 8002fbe:	f1c1 0202 	rsble	r2, r1, #2
 8002fc2:	2201      	movgt	r2, #1
 8002fc4:	4413      	add	r3, r2
 8002fc6:	e7e0      	b.n	8002f8a <_printf_float+0x172>
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	055a      	lsls	r2, r3, #21
 8002fcc:	d407      	bmi.n	8002fde <_printf_float+0x1c6>
 8002fce:	6923      	ldr	r3, [r4, #16]
 8002fd0:	4642      	mov	r2, r8
 8002fd2:	4631      	mov	r1, r6
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	47b8      	blx	r7
 8002fd8:	3001      	adds	r0, #1
 8002fda:	d12a      	bne.n	8003032 <_printf_float+0x21a>
 8002fdc:	e76a      	b.n	8002eb4 <_printf_float+0x9c>
 8002fde:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002fe2:	f240 80e2 	bls.w	80031aa <_printf_float+0x392>
 8002fe6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8002fea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff2:	d133      	bne.n	800305c <_printf_float+0x244>
 8002ff4:	4a38      	ldr	r2, [pc, #224]	; (80030d8 <_printf_float+0x2c0>)
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	4631      	mov	r1, r6
 8002ffa:	4628      	mov	r0, r5
 8002ffc:	47b8      	blx	r7
 8002ffe:	3001      	adds	r0, #1
 8003000:	f43f af58 	beq.w	8002eb4 <_printf_float+0x9c>
 8003004:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003008:	429a      	cmp	r2, r3
 800300a:	db02      	blt.n	8003012 <_printf_float+0x1fa>
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	07d8      	lsls	r0, r3, #31
 8003010:	d50f      	bpl.n	8003032 <_printf_float+0x21a>
 8003012:	4653      	mov	r3, sl
 8003014:	465a      	mov	r2, fp
 8003016:	4631      	mov	r1, r6
 8003018:	4628      	mov	r0, r5
 800301a:	47b8      	blx	r7
 800301c:	3001      	adds	r0, #1
 800301e:	f43f af49 	beq.w	8002eb4 <_printf_float+0x9c>
 8003022:	f04f 0800 	mov.w	r8, #0
 8003026:	f104 091a 	add.w	r9, r4, #26
 800302a:	9b08      	ldr	r3, [sp, #32]
 800302c:	3b01      	subs	r3, #1
 800302e:	4543      	cmp	r3, r8
 8003030:	dc09      	bgt.n	8003046 <_printf_float+0x22e>
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	079b      	lsls	r3, r3, #30
 8003036:	f100 8108 	bmi.w	800324a <_printf_float+0x432>
 800303a:	68e0      	ldr	r0, [r4, #12]
 800303c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800303e:	4298      	cmp	r0, r3
 8003040:	bfb8      	it	lt
 8003042:	4618      	movlt	r0, r3
 8003044:	e738      	b.n	8002eb8 <_printf_float+0xa0>
 8003046:	2301      	movs	r3, #1
 8003048:	464a      	mov	r2, r9
 800304a:	4631      	mov	r1, r6
 800304c:	4628      	mov	r0, r5
 800304e:	47b8      	blx	r7
 8003050:	3001      	adds	r0, #1
 8003052:	f43f af2f 	beq.w	8002eb4 <_printf_float+0x9c>
 8003056:	f108 0801 	add.w	r8, r8, #1
 800305a:	e7e6      	b.n	800302a <_printf_float+0x212>
 800305c:	9b07      	ldr	r3, [sp, #28]
 800305e:	2b00      	cmp	r3, #0
 8003060:	dc3c      	bgt.n	80030dc <_printf_float+0x2c4>
 8003062:	4a1d      	ldr	r2, [pc, #116]	; (80030d8 <_printf_float+0x2c0>)
 8003064:	2301      	movs	r3, #1
 8003066:	4631      	mov	r1, r6
 8003068:	4628      	mov	r0, r5
 800306a:	47b8      	blx	r7
 800306c:	3001      	adds	r0, #1
 800306e:	f43f af21 	beq.w	8002eb4 <_printf_float+0x9c>
 8003072:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003076:	4313      	orrs	r3, r2
 8003078:	d102      	bne.n	8003080 <_printf_float+0x268>
 800307a:	6823      	ldr	r3, [r4, #0]
 800307c:	07d9      	lsls	r1, r3, #31
 800307e:	d5d8      	bpl.n	8003032 <_printf_float+0x21a>
 8003080:	4653      	mov	r3, sl
 8003082:	465a      	mov	r2, fp
 8003084:	4631      	mov	r1, r6
 8003086:	4628      	mov	r0, r5
 8003088:	47b8      	blx	r7
 800308a:	3001      	adds	r0, #1
 800308c:	f43f af12 	beq.w	8002eb4 <_printf_float+0x9c>
 8003090:	f04f 0900 	mov.w	r9, #0
 8003094:	f104 0a1a 	add.w	sl, r4, #26
 8003098:	9b07      	ldr	r3, [sp, #28]
 800309a:	425b      	negs	r3, r3
 800309c:	454b      	cmp	r3, r9
 800309e:	dc01      	bgt.n	80030a4 <_printf_float+0x28c>
 80030a0:	9b08      	ldr	r3, [sp, #32]
 80030a2:	e795      	b.n	8002fd0 <_printf_float+0x1b8>
 80030a4:	2301      	movs	r3, #1
 80030a6:	4652      	mov	r2, sl
 80030a8:	4631      	mov	r1, r6
 80030aa:	4628      	mov	r0, r5
 80030ac:	47b8      	blx	r7
 80030ae:	3001      	adds	r0, #1
 80030b0:	f43f af00 	beq.w	8002eb4 <_printf_float+0x9c>
 80030b4:	f109 0901 	add.w	r9, r9, #1
 80030b8:	e7ee      	b.n	8003098 <_printf_float+0x280>
 80030ba:	bf00      	nop
 80030bc:	f3af 8000 	nop.w
 80030c0:	ffffffff 	.word	0xffffffff
 80030c4:	7fefffff 	.word	0x7fefffff
 80030c8:	080059b0 	.word	0x080059b0
 80030cc:	080059b4 	.word	0x080059b4
 80030d0:	080059bc 	.word	0x080059bc
 80030d4:	080059b8 	.word	0x080059b8
 80030d8:	080059c0 	.word	0x080059c0
 80030dc:	9a08      	ldr	r2, [sp, #32]
 80030de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030e0:	429a      	cmp	r2, r3
 80030e2:	bfa8      	it	ge
 80030e4:	461a      	movge	r2, r3
 80030e6:	2a00      	cmp	r2, #0
 80030e8:	4691      	mov	r9, r2
 80030ea:	dc38      	bgt.n	800315e <_printf_float+0x346>
 80030ec:	2300      	movs	r3, #0
 80030ee:	9305      	str	r3, [sp, #20]
 80030f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80030f4:	f104 021a 	add.w	r2, r4, #26
 80030f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030fa:	9905      	ldr	r1, [sp, #20]
 80030fc:	9304      	str	r3, [sp, #16]
 80030fe:	eba3 0309 	sub.w	r3, r3, r9
 8003102:	428b      	cmp	r3, r1
 8003104:	dc33      	bgt.n	800316e <_printf_float+0x356>
 8003106:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800310a:	429a      	cmp	r2, r3
 800310c:	db3c      	blt.n	8003188 <_printf_float+0x370>
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	07da      	lsls	r2, r3, #31
 8003112:	d439      	bmi.n	8003188 <_printf_float+0x370>
 8003114:	9b08      	ldr	r3, [sp, #32]
 8003116:	9a04      	ldr	r2, [sp, #16]
 8003118:	9907      	ldr	r1, [sp, #28]
 800311a:	1a9a      	subs	r2, r3, r2
 800311c:	eba3 0901 	sub.w	r9, r3, r1
 8003120:	4591      	cmp	r9, r2
 8003122:	bfa8      	it	ge
 8003124:	4691      	movge	r9, r2
 8003126:	f1b9 0f00 	cmp.w	r9, #0
 800312a:	dc35      	bgt.n	8003198 <_printf_float+0x380>
 800312c:	f04f 0800 	mov.w	r8, #0
 8003130:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003134:	f104 0a1a 	add.w	sl, r4, #26
 8003138:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	eba3 0309 	sub.w	r3, r3, r9
 8003142:	4543      	cmp	r3, r8
 8003144:	f77f af75 	ble.w	8003032 <_printf_float+0x21a>
 8003148:	2301      	movs	r3, #1
 800314a:	4652      	mov	r2, sl
 800314c:	4631      	mov	r1, r6
 800314e:	4628      	mov	r0, r5
 8003150:	47b8      	blx	r7
 8003152:	3001      	adds	r0, #1
 8003154:	f43f aeae 	beq.w	8002eb4 <_printf_float+0x9c>
 8003158:	f108 0801 	add.w	r8, r8, #1
 800315c:	e7ec      	b.n	8003138 <_printf_float+0x320>
 800315e:	4613      	mov	r3, r2
 8003160:	4631      	mov	r1, r6
 8003162:	4642      	mov	r2, r8
 8003164:	4628      	mov	r0, r5
 8003166:	47b8      	blx	r7
 8003168:	3001      	adds	r0, #1
 800316a:	d1bf      	bne.n	80030ec <_printf_float+0x2d4>
 800316c:	e6a2      	b.n	8002eb4 <_printf_float+0x9c>
 800316e:	2301      	movs	r3, #1
 8003170:	4631      	mov	r1, r6
 8003172:	4628      	mov	r0, r5
 8003174:	9204      	str	r2, [sp, #16]
 8003176:	47b8      	blx	r7
 8003178:	3001      	adds	r0, #1
 800317a:	f43f ae9b 	beq.w	8002eb4 <_printf_float+0x9c>
 800317e:	9b05      	ldr	r3, [sp, #20]
 8003180:	9a04      	ldr	r2, [sp, #16]
 8003182:	3301      	adds	r3, #1
 8003184:	9305      	str	r3, [sp, #20]
 8003186:	e7b7      	b.n	80030f8 <_printf_float+0x2e0>
 8003188:	4653      	mov	r3, sl
 800318a:	465a      	mov	r2, fp
 800318c:	4631      	mov	r1, r6
 800318e:	4628      	mov	r0, r5
 8003190:	47b8      	blx	r7
 8003192:	3001      	adds	r0, #1
 8003194:	d1be      	bne.n	8003114 <_printf_float+0x2fc>
 8003196:	e68d      	b.n	8002eb4 <_printf_float+0x9c>
 8003198:	9a04      	ldr	r2, [sp, #16]
 800319a:	464b      	mov	r3, r9
 800319c:	4442      	add	r2, r8
 800319e:	4631      	mov	r1, r6
 80031a0:	4628      	mov	r0, r5
 80031a2:	47b8      	blx	r7
 80031a4:	3001      	adds	r0, #1
 80031a6:	d1c1      	bne.n	800312c <_printf_float+0x314>
 80031a8:	e684      	b.n	8002eb4 <_printf_float+0x9c>
 80031aa:	9a08      	ldr	r2, [sp, #32]
 80031ac:	2a01      	cmp	r2, #1
 80031ae:	dc01      	bgt.n	80031b4 <_printf_float+0x39c>
 80031b0:	07db      	lsls	r3, r3, #31
 80031b2:	d537      	bpl.n	8003224 <_printf_float+0x40c>
 80031b4:	2301      	movs	r3, #1
 80031b6:	4642      	mov	r2, r8
 80031b8:	4631      	mov	r1, r6
 80031ba:	4628      	mov	r0, r5
 80031bc:	47b8      	blx	r7
 80031be:	3001      	adds	r0, #1
 80031c0:	f43f ae78 	beq.w	8002eb4 <_printf_float+0x9c>
 80031c4:	4653      	mov	r3, sl
 80031c6:	465a      	mov	r2, fp
 80031c8:	4631      	mov	r1, r6
 80031ca:	4628      	mov	r0, r5
 80031cc:	47b8      	blx	r7
 80031ce:	3001      	adds	r0, #1
 80031d0:	f43f ae70 	beq.w	8002eb4 <_printf_float+0x9c>
 80031d4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80031d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80031dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e0:	d01b      	beq.n	800321a <_printf_float+0x402>
 80031e2:	9b08      	ldr	r3, [sp, #32]
 80031e4:	f108 0201 	add.w	r2, r8, #1
 80031e8:	3b01      	subs	r3, #1
 80031ea:	4631      	mov	r1, r6
 80031ec:	4628      	mov	r0, r5
 80031ee:	47b8      	blx	r7
 80031f0:	3001      	adds	r0, #1
 80031f2:	d10e      	bne.n	8003212 <_printf_float+0x3fa>
 80031f4:	e65e      	b.n	8002eb4 <_printf_float+0x9c>
 80031f6:	2301      	movs	r3, #1
 80031f8:	464a      	mov	r2, r9
 80031fa:	4631      	mov	r1, r6
 80031fc:	4628      	mov	r0, r5
 80031fe:	47b8      	blx	r7
 8003200:	3001      	adds	r0, #1
 8003202:	f43f ae57 	beq.w	8002eb4 <_printf_float+0x9c>
 8003206:	f108 0801 	add.w	r8, r8, #1
 800320a:	9b08      	ldr	r3, [sp, #32]
 800320c:	3b01      	subs	r3, #1
 800320e:	4543      	cmp	r3, r8
 8003210:	dcf1      	bgt.n	80031f6 <_printf_float+0x3de>
 8003212:	9b04      	ldr	r3, [sp, #16]
 8003214:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003218:	e6db      	b.n	8002fd2 <_printf_float+0x1ba>
 800321a:	f04f 0800 	mov.w	r8, #0
 800321e:	f104 091a 	add.w	r9, r4, #26
 8003222:	e7f2      	b.n	800320a <_printf_float+0x3f2>
 8003224:	2301      	movs	r3, #1
 8003226:	4642      	mov	r2, r8
 8003228:	e7df      	b.n	80031ea <_printf_float+0x3d2>
 800322a:	2301      	movs	r3, #1
 800322c:	464a      	mov	r2, r9
 800322e:	4631      	mov	r1, r6
 8003230:	4628      	mov	r0, r5
 8003232:	47b8      	blx	r7
 8003234:	3001      	adds	r0, #1
 8003236:	f43f ae3d 	beq.w	8002eb4 <_printf_float+0x9c>
 800323a:	f108 0801 	add.w	r8, r8, #1
 800323e:	68e3      	ldr	r3, [r4, #12]
 8003240:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003242:	1a5b      	subs	r3, r3, r1
 8003244:	4543      	cmp	r3, r8
 8003246:	dcf0      	bgt.n	800322a <_printf_float+0x412>
 8003248:	e6f7      	b.n	800303a <_printf_float+0x222>
 800324a:	f04f 0800 	mov.w	r8, #0
 800324e:	f104 0919 	add.w	r9, r4, #25
 8003252:	e7f4      	b.n	800323e <_printf_float+0x426>

08003254 <_printf_common>:
 8003254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003258:	4616      	mov	r6, r2
 800325a:	4699      	mov	r9, r3
 800325c:	688a      	ldr	r2, [r1, #8]
 800325e:	690b      	ldr	r3, [r1, #16]
 8003260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003264:	4293      	cmp	r3, r2
 8003266:	bfb8      	it	lt
 8003268:	4613      	movlt	r3, r2
 800326a:	6033      	str	r3, [r6, #0]
 800326c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003270:	4607      	mov	r7, r0
 8003272:	460c      	mov	r4, r1
 8003274:	b10a      	cbz	r2, 800327a <_printf_common+0x26>
 8003276:	3301      	adds	r3, #1
 8003278:	6033      	str	r3, [r6, #0]
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	0699      	lsls	r1, r3, #26
 800327e:	bf42      	ittt	mi
 8003280:	6833      	ldrmi	r3, [r6, #0]
 8003282:	3302      	addmi	r3, #2
 8003284:	6033      	strmi	r3, [r6, #0]
 8003286:	6825      	ldr	r5, [r4, #0]
 8003288:	f015 0506 	ands.w	r5, r5, #6
 800328c:	d106      	bne.n	800329c <_printf_common+0x48>
 800328e:	f104 0a19 	add.w	sl, r4, #25
 8003292:	68e3      	ldr	r3, [r4, #12]
 8003294:	6832      	ldr	r2, [r6, #0]
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	42ab      	cmp	r3, r5
 800329a:	dc26      	bgt.n	80032ea <_printf_common+0x96>
 800329c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032a0:	1e13      	subs	r3, r2, #0
 80032a2:	6822      	ldr	r2, [r4, #0]
 80032a4:	bf18      	it	ne
 80032a6:	2301      	movne	r3, #1
 80032a8:	0692      	lsls	r2, r2, #26
 80032aa:	d42b      	bmi.n	8003304 <_printf_common+0xb0>
 80032ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032b0:	4649      	mov	r1, r9
 80032b2:	4638      	mov	r0, r7
 80032b4:	47c0      	blx	r8
 80032b6:	3001      	adds	r0, #1
 80032b8:	d01e      	beq.n	80032f8 <_printf_common+0xa4>
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	68e5      	ldr	r5, [r4, #12]
 80032be:	6832      	ldr	r2, [r6, #0]
 80032c0:	f003 0306 	and.w	r3, r3, #6
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	bf08      	it	eq
 80032c8:	1aad      	subeq	r5, r5, r2
 80032ca:	68a3      	ldr	r3, [r4, #8]
 80032cc:	6922      	ldr	r2, [r4, #16]
 80032ce:	bf0c      	ite	eq
 80032d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032d4:	2500      	movne	r5, #0
 80032d6:	4293      	cmp	r3, r2
 80032d8:	bfc4      	itt	gt
 80032da:	1a9b      	subgt	r3, r3, r2
 80032dc:	18ed      	addgt	r5, r5, r3
 80032de:	2600      	movs	r6, #0
 80032e0:	341a      	adds	r4, #26
 80032e2:	42b5      	cmp	r5, r6
 80032e4:	d11a      	bne.n	800331c <_printf_common+0xc8>
 80032e6:	2000      	movs	r0, #0
 80032e8:	e008      	b.n	80032fc <_printf_common+0xa8>
 80032ea:	2301      	movs	r3, #1
 80032ec:	4652      	mov	r2, sl
 80032ee:	4649      	mov	r1, r9
 80032f0:	4638      	mov	r0, r7
 80032f2:	47c0      	blx	r8
 80032f4:	3001      	adds	r0, #1
 80032f6:	d103      	bne.n	8003300 <_printf_common+0xac>
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295
 80032fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003300:	3501      	adds	r5, #1
 8003302:	e7c6      	b.n	8003292 <_printf_common+0x3e>
 8003304:	18e1      	adds	r1, r4, r3
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	2030      	movs	r0, #48	; 0x30
 800330a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800330e:	4422      	add	r2, r4
 8003310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003318:	3302      	adds	r3, #2
 800331a:	e7c7      	b.n	80032ac <_printf_common+0x58>
 800331c:	2301      	movs	r3, #1
 800331e:	4622      	mov	r2, r4
 8003320:	4649      	mov	r1, r9
 8003322:	4638      	mov	r0, r7
 8003324:	47c0      	blx	r8
 8003326:	3001      	adds	r0, #1
 8003328:	d0e6      	beq.n	80032f8 <_printf_common+0xa4>
 800332a:	3601      	adds	r6, #1
 800332c:	e7d9      	b.n	80032e2 <_printf_common+0x8e>
	...

08003330 <_printf_i>:
 8003330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003334:	7e0f      	ldrb	r7, [r1, #24]
 8003336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003338:	2f78      	cmp	r7, #120	; 0x78
 800333a:	4691      	mov	r9, r2
 800333c:	4680      	mov	r8, r0
 800333e:	460c      	mov	r4, r1
 8003340:	469a      	mov	sl, r3
 8003342:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003346:	d807      	bhi.n	8003358 <_printf_i+0x28>
 8003348:	2f62      	cmp	r7, #98	; 0x62
 800334a:	d80a      	bhi.n	8003362 <_printf_i+0x32>
 800334c:	2f00      	cmp	r7, #0
 800334e:	f000 80d8 	beq.w	8003502 <_printf_i+0x1d2>
 8003352:	2f58      	cmp	r7, #88	; 0x58
 8003354:	f000 80a3 	beq.w	800349e <_printf_i+0x16e>
 8003358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800335c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003360:	e03a      	b.n	80033d8 <_printf_i+0xa8>
 8003362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003366:	2b15      	cmp	r3, #21
 8003368:	d8f6      	bhi.n	8003358 <_printf_i+0x28>
 800336a:	a101      	add	r1, pc, #4	; (adr r1, 8003370 <_printf_i+0x40>)
 800336c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003370:	080033c9 	.word	0x080033c9
 8003374:	080033dd 	.word	0x080033dd
 8003378:	08003359 	.word	0x08003359
 800337c:	08003359 	.word	0x08003359
 8003380:	08003359 	.word	0x08003359
 8003384:	08003359 	.word	0x08003359
 8003388:	080033dd 	.word	0x080033dd
 800338c:	08003359 	.word	0x08003359
 8003390:	08003359 	.word	0x08003359
 8003394:	08003359 	.word	0x08003359
 8003398:	08003359 	.word	0x08003359
 800339c:	080034e9 	.word	0x080034e9
 80033a0:	0800340d 	.word	0x0800340d
 80033a4:	080034cb 	.word	0x080034cb
 80033a8:	08003359 	.word	0x08003359
 80033ac:	08003359 	.word	0x08003359
 80033b0:	0800350b 	.word	0x0800350b
 80033b4:	08003359 	.word	0x08003359
 80033b8:	0800340d 	.word	0x0800340d
 80033bc:	08003359 	.word	0x08003359
 80033c0:	08003359 	.word	0x08003359
 80033c4:	080034d3 	.word	0x080034d3
 80033c8:	682b      	ldr	r3, [r5, #0]
 80033ca:	1d1a      	adds	r2, r3, #4
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	602a      	str	r2, [r5, #0]
 80033d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033d8:	2301      	movs	r3, #1
 80033da:	e0a3      	b.n	8003524 <_printf_i+0x1f4>
 80033dc:	6820      	ldr	r0, [r4, #0]
 80033de:	6829      	ldr	r1, [r5, #0]
 80033e0:	0606      	lsls	r6, r0, #24
 80033e2:	f101 0304 	add.w	r3, r1, #4
 80033e6:	d50a      	bpl.n	80033fe <_printf_i+0xce>
 80033e8:	680e      	ldr	r6, [r1, #0]
 80033ea:	602b      	str	r3, [r5, #0]
 80033ec:	2e00      	cmp	r6, #0
 80033ee:	da03      	bge.n	80033f8 <_printf_i+0xc8>
 80033f0:	232d      	movs	r3, #45	; 0x2d
 80033f2:	4276      	negs	r6, r6
 80033f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033f8:	485e      	ldr	r0, [pc, #376]	; (8003574 <_printf_i+0x244>)
 80033fa:	230a      	movs	r3, #10
 80033fc:	e019      	b.n	8003432 <_printf_i+0x102>
 80033fe:	680e      	ldr	r6, [r1, #0]
 8003400:	602b      	str	r3, [r5, #0]
 8003402:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003406:	bf18      	it	ne
 8003408:	b236      	sxthne	r6, r6
 800340a:	e7ef      	b.n	80033ec <_printf_i+0xbc>
 800340c:	682b      	ldr	r3, [r5, #0]
 800340e:	6820      	ldr	r0, [r4, #0]
 8003410:	1d19      	adds	r1, r3, #4
 8003412:	6029      	str	r1, [r5, #0]
 8003414:	0601      	lsls	r1, r0, #24
 8003416:	d501      	bpl.n	800341c <_printf_i+0xec>
 8003418:	681e      	ldr	r6, [r3, #0]
 800341a:	e002      	b.n	8003422 <_printf_i+0xf2>
 800341c:	0646      	lsls	r6, r0, #25
 800341e:	d5fb      	bpl.n	8003418 <_printf_i+0xe8>
 8003420:	881e      	ldrh	r6, [r3, #0]
 8003422:	4854      	ldr	r0, [pc, #336]	; (8003574 <_printf_i+0x244>)
 8003424:	2f6f      	cmp	r7, #111	; 0x6f
 8003426:	bf0c      	ite	eq
 8003428:	2308      	moveq	r3, #8
 800342a:	230a      	movne	r3, #10
 800342c:	2100      	movs	r1, #0
 800342e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003432:	6865      	ldr	r5, [r4, #4]
 8003434:	60a5      	str	r5, [r4, #8]
 8003436:	2d00      	cmp	r5, #0
 8003438:	bfa2      	ittt	ge
 800343a:	6821      	ldrge	r1, [r4, #0]
 800343c:	f021 0104 	bicge.w	r1, r1, #4
 8003440:	6021      	strge	r1, [r4, #0]
 8003442:	b90e      	cbnz	r6, 8003448 <_printf_i+0x118>
 8003444:	2d00      	cmp	r5, #0
 8003446:	d04d      	beq.n	80034e4 <_printf_i+0x1b4>
 8003448:	4615      	mov	r5, r2
 800344a:	fbb6 f1f3 	udiv	r1, r6, r3
 800344e:	fb03 6711 	mls	r7, r3, r1, r6
 8003452:	5dc7      	ldrb	r7, [r0, r7]
 8003454:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003458:	4637      	mov	r7, r6
 800345a:	42bb      	cmp	r3, r7
 800345c:	460e      	mov	r6, r1
 800345e:	d9f4      	bls.n	800344a <_printf_i+0x11a>
 8003460:	2b08      	cmp	r3, #8
 8003462:	d10b      	bne.n	800347c <_printf_i+0x14c>
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	07de      	lsls	r6, r3, #31
 8003468:	d508      	bpl.n	800347c <_printf_i+0x14c>
 800346a:	6923      	ldr	r3, [r4, #16]
 800346c:	6861      	ldr	r1, [r4, #4]
 800346e:	4299      	cmp	r1, r3
 8003470:	bfde      	ittt	le
 8003472:	2330      	movle	r3, #48	; 0x30
 8003474:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003478:	f105 35ff 	addle.w	r5, r5, #4294967295
 800347c:	1b52      	subs	r2, r2, r5
 800347e:	6122      	str	r2, [r4, #16]
 8003480:	f8cd a000 	str.w	sl, [sp]
 8003484:	464b      	mov	r3, r9
 8003486:	aa03      	add	r2, sp, #12
 8003488:	4621      	mov	r1, r4
 800348a:	4640      	mov	r0, r8
 800348c:	f7ff fee2 	bl	8003254 <_printf_common>
 8003490:	3001      	adds	r0, #1
 8003492:	d14c      	bne.n	800352e <_printf_i+0x1fe>
 8003494:	f04f 30ff 	mov.w	r0, #4294967295
 8003498:	b004      	add	sp, #16
 800349a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800349e:	4835      	ldr	r0, [pc, #212]	; (8003574 <_printf_i+0x244>)
 80034a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80034a4:	6829      	ldr	r1, [r5, #0]
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80034ac:	6029      	str	r1, [r5, #0]
 80034ae:	061d      	lsls	r5, r3, #24
 80034b0:	d514      	bpl.n	80034dc <_printf_i+0x1ac>
 80034b2:	07df      	lsls	r7, r3, #31
 80034b4:	bf44      	itt	mi
 80034b6:	f043 0320 	orrmi.w	r3, r3, #32
 80034ba:	6023      	strmi	r3, [r4, #0]
 80034bc:	b91e      	cbnz	r6, 80034c6 <_printf_i+0x196>
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	f023 0320 	bic.w	r3, r3, #32
 80034c4:	6023      	str	r3, [r4, #0]
 80034c6:	2310      	movs	r3, #16
 80034c8:	e7b0      	b.n	800342c <_printf_i+0xfc>
 80034ca:	6823      	ldr	r3, [r4, #0]
 80034cc:	f043 0320 	orr.w	r3, r3, #32
 80034d0:	6023      	str	r3, [r4, #0]
 80034d2:	2378      	movs	r3, #120	; 0x78
 80034d4:	4828      	ldr	r0, [pc, #160]	; (8003578 <_printf_i+0x248>)
 80034d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034da:	e7e3      	b.n	80034a4 <_printf_i+0x174>
 80034dc:	0659      	lsls	r1, r3, #25
 80034de:	bf48      	it	mi
 80034e0:	b2b6      	uxthmi	r6, r6
 80034e2:	e7e6      	b.n	80034b2 <_printf_i+0x182>
 80034e4:	4615      	mov	r5, r2
 80034e6:	e7bb      	b.n	8003460 <_printf_i+0x130>
 80034e8:	682b      	ldr	r3, [r5, #0]
 80034ea:	6826      	ldr	r6, [r4, #0]
 80034ec:	6961      	ldr	r1, [r4, #20]
 80034ee:	1d18      	adds	r0, r3, #4
 80034f0:	6028      	str	r0, [r5, #0]
 80034f2:	0635      	lsls	r5, r6, #24
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	d501      	bpl.n	80034fc <_printf_i+0x1cc>
 80034f8:	6019      	str	r1, [r3, #0]
 80034fa:	e002      	b.n	8003502 <_printf_i+0x1d2>
 80034fc:	0670      	lsls	r0, r6, #25
 80034fe:	d5fb      	bpl.n	80034f8 <_printf_i+0x1c8>
 8003500:	8019      	strh	r1, [r3, #0]
 8003502:	2300      	movs	r3, #0
 8003504:	6123      	str	r3, [r4, #16]
 8003506:	4615      	mov	r5, r2
 8003508:	e7ba      	b.n	8003480 <_printf_i+0x150>
 800350a:	682b      	ldr	r3, [r5, #0]
 800350c:	1d1a      	adds	r2, r3, #4
 800350e:	602a      	str	r2, [r5, #0]
 8003510:	681d      	ldr	r5, [r3, #0]
 8003512:	6862      	ldr	r2, [r4, #4]
 8003514:	2100      	movs	r1, #0
 8003516:	4628      	mov	r0, r5
 8003518:	f7fc fe9a 	bl	8000250 <memchr>
 800351c:	b108      	cbz	r0, 8003522 <_printf_i+0x1f2>
 800351e:	1b40      	subs	r0, r0, r5
 8003520:	6060      	str	r0, [r4, #4]
 8003522:	6863      	ldr	r3, [r4, #4]
 8003524:	6123      	str	r3, [r4, #16]
 8003526:	2300      	movs	r3, #0
 8003528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800352c:	e7a8      	b.n	8003480 <_printf_i+0x150>
 800352e:	6923      	ldr	r3, [r4, #16]
 8003530:	462a      	mov	r2, r5
 8003532:	4649      	mov	r1, r9
 8003534:	4640      	mov	r0, r8
 8003536:	47d0      	blx	sl
 8003538:	3001      	adds	r0, #1
 800353a:	d0ab      	beq.n	8003494 <_printf_i+0x164>
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	079b      	lsls	r3, r3, #30
 8003540:	d413      	bmi.n	800356a <_printf_i+0x23a>
 8003542:	68e0      	ldr	r0, [r4, #12]
 8003544:	9b03      	ldr	r3, [sp, #12]
 8003546:	4298      	cmp	r0, r3
 8003548:	bfb8      	it	lt
 800354a:	4618      	movlt	r0, r3
 800354c:	e7a4      	b.n	8003498 <_printf_i+0x168>
 800354e:	2301      	movs	r3, #1
 8003550:	4632      	mov	r2, r6
 8003552:	4649      	mov	r1, r9
 8003554:	4640      	mov	r0, r8
 8003556:	47d0      	blx	sl
 8003558:	3001      	adds	r0, #1
 800355a:	d09b      	beq.n	8003494 <_printf_i+0x164>
 800355c:	3501      	adds	r5, #1
 800355e:	68e3      	ldr	r3, [r4, #12]
 8003560:	9903      	ldr	r1, [sp, #12]
 8003562:	1a5b      	subs	r3, r3, r1
 8003564:	42ab      	cmp	r3, r5
 8003566:	dcf2      	bgt.n	800354e <_printf_i+0x21e>
 8003568:	e7eb      	b.n	8003542 <_printf_i+0x212>
 800356a:	2500      	movs	r5, #0
 800356c:	f104 0619 	add.w	r6, r4, #25
 8003570:	e7f5      	b.n	800355e <_printf_i+0x22e>
 8003572:	bf00      	nop
 8003574:	080059c2 	.word	0x080059c2
 8003578:	080059d3 	.word	0x080059d3

0800357c <siprintf>:
 800357c:	b40e      	push	{r1, r2, r3}
 800357e:	b500      	push	{lr}
 8003580:	b09c      	sub	sp, #112	; 0x70
 8003582:	ab1d      	add	r3, sp, #116	; 0x74
 8003584:	9002      	str	r0, [sp, #8]
 8003586:	9006      	str	r0, [sp, #24]
 8003588:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800358c:	4809      	ldr	r0, [pc, #36]	; (80035b4 <siprintf+0x38>)
 800358e:	9107      	str	r1, [sp, #28]
 8003590:	9104      	str	r1, [sp, #16]
 8003592:	4909      	ldr	r1, [pc, #36]	; (80035b8 <siprintf+0x3c>)
 8003594:	f853 2b04 	ldr.w	r2, [r3], #4
 8003598:	9105      	str	r1, [sp, #20]
 800359a:	6800      	ldr	r0, [r0, #0]
 800359c:	9301      	str	r3, [sp, #4]
 800359e:	a902      	add	r1, sp, #8
 80035a0:	f001 faf8 	bl	8004b94 <_svfiprintf_r>
 80035a4:	9b02      	ldr	r3, [sp, #8]
 80035a6:	2200      	movs	r2, #0
 80035a8:	701a      	strb	r2, [r3, #0]
 80035aa:	b01c      	add	sp, #112	; 0x70
 80035ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80035b0:	b003      	add	sp, #12
 80035b2:	4770      	bx	lr
 80035b4:	2000000c 	.word	0x2000000c
 80035b8:	ffff0208 	.word	0xffff0208

080035bc <quorem>:
 80035bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035c0:	6903      	ldr	r3, [r0, #16]
 80035c2:	690c      	ldr	r4, [r1, #16]
 80035c4:	42a3      	cmp	r3, r4
 80035c6:	4607      	mov	r7, r0
 80035c8:	f2c0 8081 	blt.w	80036ce <quorem+0x112>
 80035cc:	3c01      	subs	r4, #1
 80035ce:	f101 0814 	add.w	r8, r1, #20
 80035d2:	f100 0514 	add.w	r5, r0, #20
 80035d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80035e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80035e4:	3301      	adds	r3, #1
 80035e6:	429a      	cmp	r2, r3
 80035e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80035ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80035f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80035f4:	d331      	bcc.n	800365a <quorem+0x9e>
 80035f6:	f04f 0e00 	mov.w	lr, #0
 80035fa:	4640      	mov	r0, r8
 80035fc:	46ac      	mov	ip, r5
 80035fe:	46f2      	mov	sl, lr
 8003600:	f850 2b04 	ldr.w	r2, [r0], #4
 8003604:	b293      	uxth	r3, r2
 8003606:	fb06 e303 	mla	r3, r6, r3, lr
 800360a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800360e:	b29b      	uxth	r3, r3
 8003610:	ebaa 0303 	sub.w	r3, sl, r3
 8003614:	f8dc a000 	ldr.w	sl, [ip]
 8003618:	0c12      	lsrs	r2, r2, #16
 800361a:	fa13 f38a 	uxtah	r3, r3, sl
 800361e:	fb06 e202 	mla	r2, r6, r2, lr
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	9b00      	ldr	r3, [sp, #0]
 8003626:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800362a:	b292      	uxth	r2, r2
 800362c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003630:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003634:	f8bd 3000 	ldrh.w	r3, [sp]
 8003638:	4581      	cmp	r9, r0
 800363a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800363e:	f84c 3b04 	str.w	r3, [ip], #4
 8003642:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003646:	d2db      	bcs.n	8003600 <quorem+0x44>
 8003648:	f855 300b 	ldr.w	r3, [r5, fp]
 800364c:	b92b      	cbnz	r3, 800365a <quorem+0x9e>
 800364e:	9b01      	ldr	r3, [sp, #4]
 8003650:	3b04      	subs	r3, #4
 8003652:	429d      	cmp	r5, r3
 8003654:	461a      	mov	r2, r3
 8003656:	d32e      	bcc.n	80036b6 <quorem+0xfa>
 8003658:	613c      	str	r4, [r7, #16]
 800365a:	4638      	mov	r0, r7
 800365c:	f001 f846 	bl	80046ec <__mcmp>
 8003660:	2800      	cmp	r0, #0
 8003662:	db24      	blt.n	80036ae <quorem+0xf2>
 8003664:	3601      	adds	r6, #1
 8003666:	4628      	mov	r0, r5
 8003668:	f04f 0c00 	mov.w	ip, #0
 800366c:	f858 2b04 	ldr.w	r2, [r8], #4
 8003670:	f8d0 e000 	ldr.w	lr, [r0]
 8003674:	b293      	uxth	r3, r2
 8003676:	ebac 0303 	sub.w	r3, ip, r3
 800367a:	0c12      	lsrs	r2, r2, #16
 800367c:	fa13 f38e 	uxtah	r3, r3, lr
 8003680:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003684:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003688:	b29b      	uxth	r3, r3
 800368a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800368e:	45c1      	cmp	r9, r8
 8003690:	f840 3b04 	str.w	r3, [r0], #4
 8003694:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003698:	d2e8      	bcs.n	800366c <quorem+0xb0>
 800369a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800369e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80036a2:	b922      	cbnz	r2, 80036ae <quorem+0xf2>
 80036a4:	3b04      	subs	r3, #4
 80036a6:	429d      	cmp	r5, r3
 80036a8:	461a      	mov	r2, r3
 80036aa:	d30a      	bcc.n	80036c2 <quorem+0x106>
 80036ac:	613c      	str	r4, [r7, #16]
 80036ae:	4630      	mov	r0, r6
 80036b0:	b003      	add	sp, #12
 80036b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036b6:	6812      	ldr	r2, [r2, #0]
 80036b8:	3b04      	subs	r3, #4
 80036ba:	2a00      	cmp	r2, #0
 80036bc:	d1cc      	bne.n	8003658 <quorem+0x9c>
 80036be:	3c01      	subs	r4, #1
 80036c0:	e7c7      	b.n	8003652 <quorem+0x96>
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	3b04      	subs	r3, #4
 80036c6:	2a00      	cmp	r2, #0
 80036c8:	d1f0      	bne.n	80036ac <quorem+0xf0>
 80036ca:	3c01      	subs	r4, #1
 80036cc:	e7eb      	b.n	80036a6 <quorem+0xea>
 80036ce:	2000      	movs	r0, #0
 80036d0:	e7ee      	b.n	80036b0 <quorem+0xf4>
 80036d2:	0000      	movs	r0, r0
 80036d4:	0000      	movs	r0, r0
	...

080036d8 <_dtoa_r>:
 80036d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036dc:	ed2d 8b02 	vpush	{d8}
 80036e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80036e2:	b091      	sub	sp, #68	; 0x44
 80036e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80036e8:	ec59 8b10 	vmov	r8, r9, d0
 80036ec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80036ee:	9106      	str	r1, [sp, #24]
 80036f0:	4606      	mov	r6, r0
 80036f2:	9208      	str	r2, [sp, #32]
 80036f4:	930c      	str	r3, [sp, #48]	; 0x30
 80036f6:	b975      	cbnz	r5, 8003716 <_dtoa_r+0x3e>
 80036f8:	2010      	movs	r0, #16
 80036fa:	f000 fd5f 	bl	80041bc <malloc>
 80036fe:	4602      	mov	r2, r0
 8003700:	6270      	str	r0, [r6, #36]	; 0x24
 8003702:	b920      	cbnz	r0, 800370e <_dtoa_r+0x36>
 8003704:	4baa      	ldr	r3, [pc, #680]	; (80039b0 <_dtoa_r+0x2d8>)
 8003706:	21ea      	movs	r1, #234	; 0xea
 8003708:	48aa      	ldr	r0, [pc, #680]	; (80039b4 <_dtoa_r+0x2dc>)
 800370a:	f001 fb53 	bl	8004db4 <__assert_func>
 800370e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003712:	6005      	str	r5, [r0, #0]
 8003714:	60c5      	str	r5, [r0, #12]
 8003716:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003718:	6819      	ldr	r1, [r3, #0]
 800371a:	b151      	cbz	r1, 8003732 <_dtoa_r+0x5a>
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	604a      	str	r2, [r1, #4]
 8003720:	2301      	movs	r3, #1
 8003722:	4093      	lsls	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
 8003726:	4630      	mov	r0, r6
 8003728:	f000 fd9e 	bl	8004268 <_Bfree>
 800372c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	f1b9 0300 	subs.w	r3, r9, #0
 8003736:	bfbb      	ittet	lt
 8003738:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800373c:	9303      	strlt	r3, [sp, #12]
 800373e:	2300      	movge	r3, #0
 8003740:	2201      	movlt	r2, #1
 8003742:	bfac      	ite	ge
 8003744:	6023      	strge	r3, [r4, #0]
 8003746:	6022      	strlt	r2, [r4, #0]
 8003748:	4b9b      	ldr	r3, [pc, #620]	; (80039b8 <_dtoa_r+0x2e0>)
 800374a:	9c03      	ldr	r4, [sp, #12]
 800374c:	43a3      	bics	r3, r4
 800374e:	d11c      	bne.n	800378a <_dtoa_r+0xb2>
 8003750:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003752:	f242 730f 	movw	r3, #9999	; 0x270f
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800375c:	ea53 0308 	orrs.w	r3, r3, r8
 8003760:	f000 84fd 	beq.w	800415e <_dtoa_r+0xa86>
 8003764:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003766:	b963      	cbnz	r3, 8003782 <_dtoa_r+0xaa>
 8003768:	4b94      	ldr	r3, [pc, #592]	; (80039bc <_dtoa_r+0x2e4>)
 800376a:	e01f      	b.n	80037ac <_dtoa_r+0xd4>
 800376c:	4b94      	ldr	r3, [pc, #592]	; (80039c0 <_dtoa_r+0x2e8>)
 800376e:	9301      	str	r3, [sp, #4]
 8003770:	3308      	adds	r3, #8
 8003772:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	9801      	ldr	r0, [sp, #4]
 8003778:	b011      	add	sp, #68	; 0x44
 800377a:	ecbd 8b02 	vpop	{d8}
 800377e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003782:	4b8e      	ldr	r3, [pc, #568]	; (80039bc <_dtoa_r+0x2e4>)
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	3303      	adds	r3, #3
 8003788:	e7f3      	b.n	8003772 <_dtoa_r+0x9a>
 800378a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800378e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003796:	d10b      	bne.n	80037b0 <_dtoa_r+0xd8>
 8003798:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800379a:	2301      	movs	r3, #1
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 84d9 	beq.w	8004158 <_dtoa_r+0xa80>
 80037a6:	4887      	ldr	r0, [pc, #540]	; (80039c4 <_dtoa_r+0x2ec>)
 80037a8:	6018      	str	r0, [r3, #0]
 80037aa:	1e43      	subs	r3, r0, #1
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	e7e2      	b.n	8003776 <_dtoa_r+0x9e>
 80037b0:	a90f      	add	r1, sp, #60	; 0x3c
 80037b2:	aa0e      	add	r2, sp, #56	; 0x38
 80037b4:	4630      	mov	r0, r6
 80037b6:	eeb0 0b48 	vmov.f64	d0, d8
 80037ba:	f001 f83d 	bl	8004838 <__d2b>
 80037be:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80037c2:	4605      	mov	r5, r0
 80037c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80037c6:	2900      	cmp	r1, #0
 80037c8:	d046      	beq.n	8003858 <_dtoa_r+0x180>
 80037ca:	ee18 4a90 	vmov	r4, s17
 80037ce:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80037d2:	ec53 2b18 	vmov	r2, r3, d8
 80037d6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80037da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80037de:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80037e2:	2400      	movs	r4, #0
 80037e4:	ec43 2b16 	vmov	d6, r2, r3
 80037e8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80037ec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8003998 <_dtoa_r+0x2c0>
 80037f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80037f4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80039a0 <_dtoa_r+0x2c8>
 80037f8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80037fc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80039a8 <_dtoa_r+0x2d0>
 8003800:	ee07 1a90 	vmov	s15, r1
 8003804:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8003808:	eeb0 7b46 	vmov.f64	d7, d6
 800380c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8003810:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8003814:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800381c:	ee16 ba90 	vmov	fp, s13
 8003820:	940a      	str	r4, [sp, #40]	; 0x28
 8003822:	d508      	bpl.n	8003836 <_dtoa_r+0x15e>
 8003824:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8003828:	eeb4 6b47 	vcmp.f64	d6, d7
 800382c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003830:	bf18      	it	ne
 8003832:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8003836:	f1bb 0f16 	cmp.w	fp, #22
 800383a:	d82f      	bhi.n	800389c <_dtoa_r+0x1c4>
 800383c:	4b62      	ldr	r3, [pc, #392]	; (80039c8 <_dtoa_r+0x2f0>)
 800383e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003842:	ed93 7b00 	vldr	d7, [r3]
 8003846:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800384a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384e:	d501      	bpl.n	8003854 <_dtoa_r+0x17c>
 8003850:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003854:	2300      	movs	r3, #0
 8003856:	e022      	b.n	800389e <_dtoa_r+0x1c6>
 8003858:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800385a:	4401      	add	r1, r0
 800385c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8003860:	2b20      	cmp	r3, #32
 8003862:	bfc1      	itttt	gt
 8003864:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003868:	fa04 f303 	lslgt.w	r3, r4, r3
 800386c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8003870:	fa28 f804 	lsrgt.w	r8, r8, r4
 8003874:	bfd6      	itet	le
 8003876:	f1c3 0320 	rsble	r3, r3, #32
 800387a:	ea43 0808 	orrgt.w	r8, r3, r8
 800387e:	fa08 f803 	lslle.w	r8, r8, r3
 8003882:	ee07 8a90 	vmov	s15, r8
 8003886:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800388a:	3901      	subs	r1, #1
 800388c:	ee17 4a90 	vmov	r4, s15
 8003890:	ec53 2b17 	vmov	r2, r3, d7
 8003894:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8003898:	2401      	movs	r4, #1
 800389a:	e7a3      	b.n	80037e4 <_dtoa_r+0x10c>
 800389c:	2301      	movs	r3, #1
 800389e:	930b      	str	r3, [sp, #44]	; 0x2c
 80038a0:	1a43      	subs	r3, r0, r1
 80038a2:	1e5a      	subs	r2, r3, #1
 80038a4:	bf45      	ittet	mi
 80038a6:	f1c3 0301 	rsbmi	r3, r3, #1
 80038aa:	9304      	strmi	r3, [sp, #16]
 80038ac:	2300      	movpl	r3, #0
 80038ae:	2300      	movmi	r3, #0
 80038b0:	9205      	str	r2, [sp, #20]
 80038b2:	bf54      	ite	pl
 80038b4:	9304      	strpl	r3, [sp, #16]
 80038b6:	9305      	strmi	r3, [sp, #20]
 80038b8:	f1bb 0f00 	cmp.w	fp, #0
 80038bc:	db18      	blt.n	80038f0 <_dtoa_r+0x218>
 80038be:	9b05      	ldr	r3, [sp, #20]
 80038c0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80038c4:	445b      	add	r3, fp
 80038c6:	9305      	str	r3, [sp, #20]
 80038c8:	2300      	movs	r3, #0
 80038ca:	9a06      	ldr	r2, [sp, #24]
 80038cc:	2a09      	cmp	r2, #9
 80038ce:	d849      	bhi.n	8003964 <_dtoa_r+0x28c>
 80038d0:	2a05      	cmp	r2, #5
 80038d2:	bfc4      	itt	gt
 80038d4:	3a04      	subgt	r2, #4
 80038d6:	9206      	strgt	r2, [sp, #24]
 80038d8:	9a06      	ldr	r2, [sp, #24]
 80038da:	f1a2 0202 	sub.w	r2, r2, #2
 80038de:	bfcc      	ite	gt
 80038e0:	2400      	movgt	r4, #0
 80038e2:	2401      	movle	r4, #1
 80038e4:	2a03      	cmp	r2, #3
 80038e6:	d848      	bhi.n	800397a <_dtoa_r+0x2a2>
 80038e8:	e8df f002 	tbb	[pc, r2]
 80038ec:	3a2c2e0b 	.word	0x3a2c2e0b
 80038f0:	9b04      	ldr	r3, [sp, #16]
 80038f2:	2200      	movs	r2, #0
 80038f4:	eba3 030b 	sub.w	r3, r3, fp
 80038f8:	9304      	str	r3, [sp, #16]
 80038fa:	9209      	str	r2, [sp, #36]	; 0x24
 80038fc:	f1cb 0300 	rsb	r3, fp, #0
 8003900:	e7e3      	b.n	80038ca <_dtoa_r+0x1f2>
 8003902:	2200      	movs	r2, #0
 8003904:	9207      	str	r2, [sp, #28]
 8003906:	9a08      	ldr	r2, [sp, #32]
 8003908:	2a00      	cmp	r2, #0
 800390a:	dc39      	bgt.n	8003980 <_dtoa_r+0x2a8>
 800390c:	f04f 0a01 	mov.w	sl, #1
 8003910:	46d1      	mov	r9, sl
 8003912:	4652      	mov	r2, sl
 8003914:	f8cd a020 	str.w	sl, [sp, #32]
 8003918:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800391a:	2100      	movs	r1, #0
 800391c:	6079      	str	r1, [r7, #4]
 800391e:	2004      	movs	r0, #4
 8003920:	f100 0c14 	add.w	ip, r0, #20
 8003924:	4594      	cmp	ip, r2
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	d92f      	bls.n	800398a <_dtoa_r+0x2b2>
 800392a:	4630      	mov	r0, r6
 800392c:	930d      	str	r3, [sp, #52]	; 0x34
 800392e:	f000 fc5b 	bl	80041e8 <_Balloc>
 8003932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003934:	9001      	str	r0, [sp, #4]
 8003936:	4602      	mov	r2, r0
 8003938:	2800      	cmp	r0, #0
 800393a:	d149      	bne.n	80039d0 <_dtoa_r+0x2f8>
 800393c:	4b23      	ldr	r3, [pc, #140]	; (80039cc <_dtoa_r+0x2f4>)
 800393e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003942:	e6e1      	b.n	8003708 <_dtoa_r+0x30>
 8003944:	2201      	movs	r2, #1
 8003946:	e7dd      	b.n	8003904 <_dtoa_r+0x22c>
 8003948:	2200      	movs	r2, #0
 800394a:	9207      	str	r2, [sp, #28]
 800394c:	9a08      	ldr	r2, [sp, #32]
 800394e:	eb0b 0a02 	add.w	sl, fp, r2
 8003952:	f10a 0901 	add.w	r9, sl, #1
 8003956:	464a      	mov	r2, r9
 8003958:	2a01      	cmp	r2, #1
 800395a:	bfb8      	it	lt
 800395c:	2201      	movlt	r2, #1
 800395e:	e7db      	b.n	8003918 <_dtoa_r+0x240>
 8003960:	2201      	movs	r2, #1
 8003962:	e7f2      	b.n	800394a <_dtoa_r+0x272>
 8003964:	2401      	movs	r4, #1
 8003966:	2200      	movs	r2, #0
 8003968:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800396c:	f04f 3aff 	mov.w	sl, #4294967295
 8003970:	2100      	movs	r1, #0
 8003972:	46d1      	mov	r9, sl
 8003974:	2212      	movs	r2, #18
 8003976:	9108      	str	r1, [sp, #32]
 8003978:	e7ce      	b.n	8003918 <_dtoa_r+0x240>
 800397a:	2201      	movs	r2, #1
 800397c:	9207      	str	r2, [sp, #28]
 800397e:	e7f5      	b.n	800396c <_dtoa_r+0x294>
 8003980:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003984:	46d1      	mov	r9, sl
 8003986:	4652      	mov	r2, sl
 8003988:	e7c6      	b.n	8003918 <_dtoa_r+0x240>
 800398a:	3101      	adds	r1, #1
 800398c:	6079      	str	r1, [r7, #4]
 800398e:	0040      	lsls	r0, r0, #1
 8003990:	e7c6      	b.n	8003920 <_dtoa_r+0x248>
 8003992:	bf00      	nop
 8003994:	f3af 8000 	nop.w
 8003998:	636f4361 	.word	0x636f4361
 800399c:	3fd287a7 	.word	0x3fd287a7
 80039a0:	8b60c8b3 	.word	0x8b60c8b3
 80039a4:	3fc68a28 	.word	0x3fc68a28
 80039a8:	509f79fb 	.word	0x509f79fb
 80039ac:	3fd34413 	.word	0x3fd34413
 80039b0:	080059f1 	.word	0x080059f1
 80039b4:	08005a08 	.word	0x08005a08
 80039b8:	7ff00000 	.word	0x7ff00000
 80039bc:	080059ed 	.word	0x080059ed
 80039c0:	080059e4 	.word	0x080059e4
 80039c4:	080059c1 	.word	0x080059c1
 80039c8:	08005af8 	.word	0x08005af8
 80039cc:	08005a63 	.word	0x08005a63
 80039d0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80039d2:	9901      	ldr	r1, [sp, #4]
 80039d4:	6011      	str	r1, [r2, #0]
 80039d6:	f1b9 0f0e 	cmp.w	r9, #14
 80039da:	d86c      	bhi.n	8003ab6 <_dtoa_r+0x3de>
 80039dc:	2c00      	cmp	r4, #0
 80039de:	d06a      	beq.n	8003ab6 <_dtoa_r+0x3de>
 80039e0:	f1bb 0f00 	cmp.w	fp, #0
 80039e4:	f340 80a0 	ble.w	8003b28 <_dtoa_r+0x450>
 80039e8:	49c1      	ldr	r1, [pc, #772]	; (8003cf0 <_dtoa_r+0x618>)
 80039ea:	f00b 020f 	and.w	r2, fp, #15
 80039ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80039f2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80039f6:	ed92 7b00 	vldr	d7, [r2]
 80039fa:	ea4f 112b 	mov.w	r1, fp, asr #4
 80039fe:	f000 8087 	beq.w	8003b10 <_dtoa_r+0x438>
 8003a02:	4abc      	ldr	r2, [pc, #752]	; (8003cf4 <_dtoa_r+0x61c>)
 8003a04:	ed92 6b08 	vldr	d6, [r2, #32]
 8003a08:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8003a0c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003a10:	f001 010f 	and.w	r1, r1, #15
 8003a14:	2203      	movs	r2, #3
 8003a16:	48b7      	ldr	r0, [pc, #732]	; (8003cf4 <_dtoa_r+0x61c>)
 8003a18:	2900      	cmp	r1, #0
 8003a1a:	d17b      	bne.n	8003b14 <_dtoa_r+0x43c>
 8003a1c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8003a20:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8003a24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003a28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a2a:	2900      	cmp	r1, #0
 8003a2c:	f000 80a2 	beq.w	8003b74 <_dtoa_r+0x49c>
 8003a30:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003a34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003a38:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a40:	f140 8098 	bpl.w	8003b74 <_dtoa_r+0x49c>
 8003a44:	f1b9 0f00 	cmp.w	r9, #0
 8003a48:	f000 8094 	beq.w	8003b74 <_dtoa_r+0x49c>
 8003a4c:	f1ba 0f00 	cmp.w	sl, #0
 8003a50:	dd2f      	ble.n	8003ab2 <_dtoa_r+0x3da>
 8003a52:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8003a56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003a5a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003a5e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003a62:	3201      	adds	r2, #1
 8003a64:	4650      	mov	r0, sl
 8003a66:	ed9d 6b02 	vldr	d6, [sp, #8]
 8003a6a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8003a6e:	ee07 2a90 	vmov	s15, r2
 8003a72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003a76:	eea7 5b06 	vfma.f64	d5, d7, d6
 8003a7a:	ee15 4a90 	vmov	r4, s11
 8003a7e:	ec52 1b15 	vmov	r1, r2, d5
 8003a82:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8003a86:	2800      	cmp	r0, #0
 8003a88:	d177      	bne.n	8003b7a <_dtoa_r+0x4a2>
 8003a8a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8003a8e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003a92:	ec42 1b17 	vmov	d7, r1, r2
 8003a96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9e:	f300 8263 	bgt.w	8003f68 <_dtoa_r+0x890>
 8003aa2:	eeb1 7b47 	vneg.f64	d7, d7
 8003aa6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aae:	f100 8258 	bmi.w	8003f62 <_dtoa_r+0x88a>
 8003ab2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8003ab6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003ab8:	2a00      	cmp	r2, #0
 8003aba:	f2c0 811d 	blt.w	8003cf8 <_dtoa_r+0x620>
 8003abe:	f1bb 0f0e 	cmp.w	fp, #14
 8003ac2:	f300 8119 	bgt.w	8003cf8 <_dtoa_r+0x620>
 8003ac6:	4b8a      	ldr	r3, [pc, #552]	; (8003cf0 <_dtoa_r+0x618>)
 8003ac8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003acc:	ed93 6b00 	vldr	d6, [r3]
 8003ad0:	9b08      	ldr	r3, [sp, #32]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f280 80b7 	bge.w	8003c46 <_dtoa_r+0x56e>
 8003ad8:	f1b9 0f00 	cmp.w	r9, #0
 8003adc:	f300 80b3 	bgt.w	8003c46 <_dtoa_r+0x56e>
 8003ae0:	f040 823f 	bne.w	8003f62 <_dtoa_r+0x88a>
 8003ae4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8003ae8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003aec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003af0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af8:	464c      	mov	r4, r9
 8003afa:	464f      	mov	r7, r9
 8003afc:	f280 8215 	bge.w	8003f2a <_dtoa_r+0x852>
 8003b00:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003b04:	2331      	movs	r3, #49	; 0x31
 8003b06:	f808 3b01 	strb.w	r3, [r8], #1
 8003b0a:	f10b 0b01 	add.w	fp, fp, #1
 8003b0e:	e211      	b.n	8003f34 <_dtoa_r+0x85c>
 8003b10:	2202      	movs	r2, #2
 8003b12:	e780      	b.n	8003a16 <_dtoa_r+0x33e>
 8003b14:	07cc      	lsls	r4, r1, #31
 8003b16:	d504      	bpl.n	8003b22 <_dtoa_r+0x44a>
 8003b18:	ed90 6b00 	vldr	d6, [r0]
 8003b1c:	3201      	adds	r2, #1
 8003b1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b22:	1049      	asrs	r1, r1, #1
 8003b24:	3008      	adds	r0, #8
 8003b26:	e777      	b.n	8003a18 <_dtoa_r+0x340>
 8003b28:	d022      	beq.n	8003b70 <_dtoa_r+0x498>
 8003b2a:	f1cb 0100 	rsb	r1, fp, #0
 8003b2e:	4a70      	ldr	r2, [pc, #448]	; (8003cf0 <_dtoa_r+0x618>)
 8003b30:	f001 000f 	and.w	r0, r1, #15
 8003b34:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8003b38:	ed92 7b00 	vldr	d7, [r2]
 8003b3c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8003b40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003b44:	486b      	ldr	r0, [pc, #428]	; (8003cf4 <_dtoa_r+0x61c>)
 8003b46:	1109      	asrs	r1, r1, #4
 8003b48:	2400      	movs	r4, #0
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	b929      	cbnz	r1, 8003b5a <_dtoa_r+0x482>
 8003b4e:	2c00      	cmp	r4, #0
 8003b50:	f43f af6a 	beq.w	8003a28 <_dtoa_r+0x350>
 8003b54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003b58:	e766      	b.n	8003a28 <_dtoa_r+0x350>
 8003b5a:	07cf      	lsls	r7, r1, #31
 8003b5c:	d505      	bpl.n	8003b6a <_dtoa_r+0x492>
 8003b5e:	ed90 6b00 	vldr	d6, [r0]
 8003b62:	3201      	adds	r2, #1
 8003b64:	2401      	movs	r4, #1
 8003b66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b6a:	1049      	asrs	r1, r1, #1
 8003b6c:	3008      	adds	r0, #8
 8003b6e:	e7ed      	b.n	8003b4c <_dtoa_r+0x474>
 8003b70:	2202      	movs	r2, #2
 8003b72:	e759      	b.n	8003a28 <_dtoa_r+0x350>
 8003b74:	465f      	mov	r7, fp
 8003b76:	4648      	mov	r0, r9
 8003b78:	e775      	b.n	8003a66 <_dtoa_r+0x38e>
 8003b7a:	ec42 1b17 	vmov	d7, r1, r2
 8003b7e:	4a5c      	ldr	r2, [pc, #368]	; (8003cf0 <_dtoa_r+0x618>)
 8003b80:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8003b84:	ed12 4b02 	vldr	d4, [r2, #-8]
 8003b88:	9a01      	ldr	r2, [sp, #4]
 8003b8a:	1814      	adds	r4, r2, r0
 8003b8c:	9a07      	ldr	r2, [sp, #28]
 8003b8e:	b352      	cbz	r2, 8003be6 <_dtoa_r+0x50e>
 8003b90:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8003b94:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8003b98:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003b9c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8003ba0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8003ba4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003ba8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8003bac:	ee14 2a90 	vmov	r2, s9
 8003bb0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8003bb4:	3230      	adds	r2, #48	; 0x30
 8003bb6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8003bba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc2:	f808 2b01 	strb.w	r2, [r8], #1
 8003bc6:	d439      	bmi.n	8003c3c <_dtoa_r+0x564>
 8003bc8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8003bcc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8003bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd4:	d472      	bmi.n	8003cbc <_dtoa_r+0x5e4>
 8003bd6:	45a0      	cmp	r8, r4
 8003bd8:	f43f af6b 	beq.w	8003ab2 <_dtoa_r+0x3da>
 8003bdc:	ee27 7b03 	vmul.f64	d7, d7, d3
 8003be0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8003be4:	e7e0      	b.n	8003ba8 <_dtoa_r+0x4d0>
 8003be6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003bea:	ee27 7b04 	vmul.f64	d7, d7, d4
 8003bee:	4621      	mov	r1, r4
 8003bf0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8003bf4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8003bf8:	ee14 2a90 	vmov	r2, s9
 8003bfc:	3230      	adds	r2, #48	; 0x30
 8003bfe:	f808 2b01 	strb.w	r2, [r8], #1
 8003c02:	45a0      	cmp	r8, r4
 8003c04:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8003c08:	ee36 6b45 	vsub.f64	d6, d6, d5
 8003c0c:	d118      	bne.n	8003c40 <_dtoa_r+0x568>
 8003c0e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8003c12:	ee37 4b05 	vadd.f64	d4, d7, d5
 8003c16:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8003c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c1e:	dc4d      	bgt.n	8003cbc <_dtoa_r+0x5e4>
 8003c20:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003c24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2c:	f57f af41 	bpl.w	8003ab2 <_dtoa_r+0x3da>
 8003c30:	4688      	mov	r8, r1
 8003c32:	3901      	subs	r1, #1
 8003c34:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8003c38:	2b30      	cmp	r3, #48	; 0x30
 8003c3a:	d0f9      	beq.n	8003c30 <_dtoa_r+0x558>
 8003c3c:	46bb      	mov	fp, r7
 8003c3e:	e02a      	b.n	8003c96 <_dtoa_r+0x5be>
 8003c40:	ee26 6b03 	vmul.f64	d6, d6, d3
 8003c44:	e7d6      	b.n	8003bf4 <_dtoa_r+0x51c>
 8003c46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003c4a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8003c4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003c52:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8003c56:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8003c5a:	ee15 3a10 	vmov	r3, s10
 8003c5e:	3330      	adds	r3, #48	; 0x30
 8003c60:	f808 3b01 	strb.w	r3, [r8], #1
 8003c64:	9b01      	ldr	r3, [sp, #4]
 8003c66:	eba8 0303 	sub.w	r3, r8, r3
 8003c6a:	4599      	cmp	r9, r3
 8003c6c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8003c70:	eea3 7b46 	vfms.f64	d7, d3, d6
 8003c74:	d133      	bne.n	8003cde <_dtoa_r+0x606>
 8003c76:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003c7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c82:	dc1a      	bgt.n	8003cba <_dtoa_r+0x5e2>
 8003c84:	eeb4 7b46 	vcmp.f64	d7, d6
 8003c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c8c:	d103      	bne.n	8003c96 <_dtoa_r+0x5be>
 8003c8e:	ee15 3a10 	vmov	r3, s10
 8003c92:	07d9      	lsls	r1, r3, #31
 8003c94:	d411      	bmi.n	8003cba <_dtoa_r+0x5e2>
 8003c96:	4629      	mov	r1, r5
 8003c98:	4630      	mov	r0, r6
 8003c9a:	f000 fae5 	bl	8004268 <_Bfree>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ca2:	f888 3000 	strb.w	r3, [r8]
 8003ca6:	f10b 0301 	add.w	r3, fp, #1
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f43f ad61 	beq.w	8003776 <_dtoa_r+0x9e>
 8003cb4:	f8c3 8000 	str.w	r8, [r3]
 8003cb8:	e55d      	b.n	8003776 <_dtoa_r+0x9e>
 8003cba:	465f      	mov	r7, fp
 8003cbc:	4643      	mov	r3, r8
 8003cbe:	4698      	mov	r8, r3
 8003cc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003cc4:	2a39      	cmp	r2, #57	; 0x39
 8003cc6:	d106      	bne.n	8003cd6 <_dtoa_r+0x5fe>
 8003cc8:	9a01      	ldr	r2, [sp, #4]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d1f7      	bne.n	8003cbe <_dtoa_r+0x5e6>
 8003cce:	9901      	ldr	r1, [sp, #4]
 8003cd0:	2230      	movs	r2, #48	; 0x30
 8003cd2:	3701      	adds	r7, #1
 8003cd4:	700a      	strb	r2, [r1, #0]
 8003cd6:	781a      	ldrb	r2, [r3, #0]
 8003cd8:	3201      	adds	r2, #1
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	e7ae      	b.n	8003c3c <_dtoa_r+0x564>
 8003cde:	ee27 7b04 	vmul.f64	d7, d7, d4
 8003ce2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cea:	d1b2      	bne.n	8003c52 <_dtoa_r+0x57a>
 8003cec:	e7d3      	b.n	8003c96 <_dtoa_r+0x5be>
 8003cee:	bf00      	nop
 8003cf0:	08005af8 	.word	0x08005af8
 8003cf4:	08005ad0 	.word	0x08005ad0
 8003cf8:	9907      	ldr	r1, [sp, #28]
 8003cfa:	2900      	cmp	r1, #0
 8003cfc:	f000 80d0 	beq.w	8003ea0 <_dtoa_r+0x7c8>
 8003d00:	9906      	ldr	r1, [sp, #24]
 8003d02:	2901      	cmp	r1, #1
 8003d04:	f300 80b4 	bgt.w	8003e70 <_dtoa_r+0x798>
 8003d08:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003d0a:	2900      	cmp	r1, #0
 8003d0c:	f000 80ac 	beq.w	8003e68 <_dtoa_r+0x790>
 8003d10:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003d14:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8003d18:	461c      	mov	r4, r3
 8003d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8003d1c:	9b04      	ldr	r3, [sp, #16]
 8003d1e:	4413      	add	r3, r2
 8003d20:	9304      	str	r3, [sp, #16]
 8003d22:	9b05      	ldr	r3, [sp, #20]
 8003d24:	2101      	movs	r1, #1
 8003d26:	4413      	add	r3, r2
 8003d28:	4630      	mov	r0, r6
 8003d2a:	9305      	str	r3, [sp, #20]
 8003d2c:	f000 fb54 	bl	80043d8 <__i2b>
 8003d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d32:	4607      	mov	r7, r0
 8003d34:	f1b8 0f00 	cmp.w	r8, #0
 8003d38:	dd0d      	ble.n	8003d56 <_dtoa_r+0x67e>
 8003d3a:	9a05      	ldr	r2, [sp, #20]
 8003d3c:	2a00      	cmp	r2, #0
 8003d3e:	dd0a      	ble.n	8003d56 <_dtoa_r+0x67e>
 8003d40:	4542      	cmp	r2, r8
 8003d42:	9904      	ldr	r1, [sp, #16]
 8003d44:	bfa8      	it	ge
 8003d46:	4642      	movge	r2, r8
 8003d48:	1a89      	subs	r1, r1, r2
 8003d4a:	9104      	str	r1, [sp, #16]
 8003d4c:	9905      	ldr	r1, [sp, #20]
 8003d4e:	eba8 0802 	sub.w	r8, r8, r2
 8003d52:	1a8a      	subs	r2, r1, r2
 8003d54:	9205      	str	r2, [sp, #20]
 8003d56:	b303      	cbz	r3, 8003d9a <_dtoa_r+0x6c2>
 8003d58:	9a07      	ldr	r2, [sp, #28]
 8003d5a:	2a00      	cmp	r2, #0
 8003d5c:	f000 80a5 	beq.w	8003eaa <_dtoa_r+0x7d2>
 8003d60:	2c00      	cmp	r4, #0
 8003d62:	dd13      	ble.n	8003d8c <_dtoa_r+0x6b4>
 8003d64:	4639      	mov	r1, r7
 8003d66:	4622      	mov	r2, r4
 8003d68:	4630      	mov	r0, r6
 8003d6a:	930d      	str	r3, [sp, #52]	; 0x34
 8003d6c:	f000 fbf4 	bl	8004558 <__pow5mult>
 8003d70:	462a      	mov	r2, r5
 8003d72:	4601      	mov	r1, r0
 8003d74:	4607      	mov	r7, r0
 8003d76:	4630      	mov	r0, r6
 8003d78:	f000 fb44 	bl	8004404 <__multiply>
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	900a      	str	r0, [sp, #40]	; 0x28
 8003d80:	4630      	mov	r0, r6
 8003d82:	f000 fa71 	bl	8004268 <_Bfree>
 8003d86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d8a:	4615      	mov	r5, r2
 8003d8c:	1b1a      	subs	r2, r3, r4
 8003d8e:	d004      	beq.n	8003d9a <_dtoa_r+0x6c2>
 8003d90:	4629      	mov	r1, r5
 8003d92:	4630      	mov	r0, r6
 8003d94:	f000 fbe0 	bl	8004558 <__pow5mult>
 8003d98:	4605      	mov	r5, r0
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	f000 fb1b 	bl	80043d8 <__i2b>
 8003da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	4604      	mov	r4, r0
 8003da8:	f340 8081 	ble.w	8003eae <_dtoa_r+0x7d6>
 8003dac:	461a      	mov	r2, r3
 8003dae:	4601      	mov	r1, r0
 8003db0:	4630      	mov	r0, r6
 8003db2:	f000 fbd1 	bl	8004558 <__pow5mult>
 8003db6:	9b06      	ldr	r3, [sp, #24]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	4604      	mov	r4, r0
 8003dbc:	dd7a      	ble.n	8003eb4 <_dtoa_r+0x7dc>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	930a      	str	r3, [sp, #40]	; 0x28
 8003dc2:	6922      	ldr	r2, [r4, #16]
 8003dc4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003dc8:	6910      	ldr	r0, [r2, #16]
 8003dca:	f000 fab5 	bl	8004338 <__hi0bits>
 8003dce:	f1c0 0020 	rsb	r0, r0, #32
 8003dd2:	9b05      	ldr	r3, [sp, #20]
 8003dd4:	4418      	add	r0, r3
 8003dd6:	f010 001f 	ands.w	r0, r0, #31
 8003dda:	f000 808c 	beq.w	8003ef6 <_dtoa_r+0x81e>
 8003dde:	f1c0 0220 	rsb	r2, r0, #32
 8003de2:	2a04      	cmp	r2, #4
 8003de4:	f340 8085 	ble.w	8003ef2 <_dtoa_r+0x81a>
 8003de8:	f1c0 001c 	rsb	r0, r0, #28
 8003dec:	9b04      	ldr	r3, [sp, #16]
 8003dee:	4403      	add	r3, r0
 8003df0:	9304      	str	r3, [sp, #16]
 8003df2:	9b05      	ldr	r3, [sp, #20]
 8003df4:	4403      	add	r3, r0
 8003df6:	4480      	add	r8, r0
 8003df8:	9305      	str	r3, [sp, #20]
 8003dfa:	9b04      	ldr	r3, [sp, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	dd05      	ble.n	8003e0c <_dtoa_r+0x734>
 8003e00:	4629      	mov	r1, r5
 8003e02:	461a      	mov	r2, r3
 8003e04:	4630      	mov	r0, r6
 8003e06:	f000 fc01 	bl	800460c <__lshift>
 8003e0a:	4605      	mov	r5, r0
 8003e0c:	9b05      	ldr	r3, [sp, #20]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	dd05      	ble.n	8003e1e <_dtoa_r+0x746>
 8003e12:	4621      	mov	r1, r4
 8003e14:	461a      	mov	r2, r3
 8003e16:	4630      	mov	r0, r6
 8003e18:	f000 fbf8 	bl	800460c <__lshift>
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d06a      	beq.n	8003efa <_dtoa_r+0x822>
 8003e24:	4621      	mov	r1, r4
 8003e26:	4628      	mov	r0, r5
 8003e28:	f000 fc60 	bl	80046ec <__mcmp>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	da64      	bge.n	8003efa <_dtoa_r+0x822>
 8003e30:	2300      	movs	r3, #0
 8003e32:	4629      	mov	r1, r5
 8003e34:	220a      	movs	r2, #10
 8003e36:	4630      	mov	r0, r6
 8003e38:	f000 fa38 	bl	80042ac <__multadd>
 8003e3c:	9b07      	ldr	r3, [sp, #28]
 8003e3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003e42:	4605      	mov	r5, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 8191 	beq.w	800416c <_dtoa_r+0xa94>
 8003e4a:	4639      	mov	r1, r7
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	220a      	movs	r2, #10
 8003e50:	4630      	mov	r0, r6
 8003e52:	f000 fa2b 	bl	80042ac <__multadd>
 8003e56:	f1ba 0f00 	cmp.w	sl, #0
 8003e5a:	4607      	mov	r7, r0
 8003e5c:	f300 808d 	bgt.w	8003f7a <_dtoa_r+0x8a2>
 8003e60:	9b06      	ldr	r3, [sp, #24]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	dc50      	bgt.n	8003f08 <_dtoa_r+0x830>
 8003e66:	e088      	b.n	8003f7a <_dtoa_r+0x8a2>
 8003e68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e6a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003e6e:	e751      	b.n	8003d14 <_dtoa_r+0x63c>
 8003e70:	f109 34ff 	add.w	r4, r9, #4294967295
 8003e74:	42a3      	cmp	r3, r4
 8003e76:	bfbf      	itttt	lt
 8003e78:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8003e7a:	1ae3      	sublt	r3, r4, r3
 8003e7c:	18d2      	addlt	r2, r2, r3
 8003e7e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8003e80:	bfb6      	itet	lt
 8003e82:	4623      	movlt	r3, r4
 8003e84:	1b1c      	subge	r4, r3, r4
 8003e86:	2400      	movlt	r4, #0
 8003e88:	f1b9 0f00 	cmp.w	r9, #0
 8003e8c:	bfb5      	itete	lt
 8003e8e:	9a04      	ldrlt	r2, [sp, #16]
 8003e90:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8003e94:	eba2 0809 	sublt.w	r8, r2, r9
 8003e98:	464a      	movge	r2, r9
 8003e9a:	bfb8      	it	lt
 8003e9c:	2200      	movlt	r2, #0
 8003e9e:	e73c      	b.n	8003d1a <_dtoa_r+0x642>
 8003ea0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8003ea4:	9f07      	ldr	r7, [sp, #28]
 8003ea6:	461c      	mov	r4, r3
 8003ea8:	e744      	b.n	8003d34 <_dtoa_r+0x65c>
 8003eaa:	461a      	mov	r2, r3
 8003eac:	e770      	b.n	8003d90 <_dtoa_r+0x6b8>
 8003eae:	9b06      	ldr	r3, [sp, #24]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	dc18      	bgt.n	8003ee6 <_dtoa_r+0x80e>
 8003eb4:	9b02      	ldr	r3, [sp, #8]
 8003eb6:	b9b3      	cbnz	r3, 8003ee6 <_dtoa_r+0x80e>
 8003eb8:	9b03      	ldr	r3, [sp, #12]
 8003eba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8003ebe:	b9a2      	cbnz	r2, 8003eea <_dtoa_r+0x812>
 8003ec0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ec4:	0d12      	lsrs	r2, r2, #20
 8003ec6:	0512      	lsls	r2, r2, #20
 8003ec8:	b18a      	cbz	r2, 8003eee <_dtoa_r+0x816>
 8003eca:	9b04      	ldr	r3, [sp, #16]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	9304      	str	r3, [sp, #16]
 8003ed0:	9b05      	ldr	r3, [sp, #20]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	9305      	str	r3, [sp, #20]
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	930a      	str	r3, [sp, #40]	; 0x28
 8003eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f47f af70 	bne.w	8003dc2 <_dtoa_r+0x6ea>
 8003ee2:	2001      	movs	r0, #1
 8003ee4:	e775      	b.n	8003dd2 <_dtoa_r+0x6fa>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	e7f6      	b.n	8003ed8 <_dtoa_r+0x800>
 8003eea:	9b02      	ldr	r3, [sp, #8]
 8003eec:	e7f4      	b.n	8003ed8 <_dtoa_r+0x800>
 8003eee:	920a      	str	r2, [sp, #40]	; 0x28
 8003ef0:	e7f3      	b.n	8003eda <_dtoa_r+0x802>
 8003ef2:	d082      	beq.n	8003dfa <_dtoa_r+0x722>
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	301c      	adds	r0, #28
 8003ef8:	e778      	b.n	8003dec <_dtoa_r+0x714>
 8003efa:	f1b9 0f00 	cmp.w	r9, #0
 8003efe:	dc37      	bgt.n	8003f70 <_dtoa_r+0x898>
 8003f00:	9b06      	ldr	r3, [sp, #24]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	dd34      	ble.n	8003f70 <_dtoa_r+0x898>
 8003f06:	46ca      	mov	sl, r9
 8003f08:	f1ba 0f00 	cmp.w	sl, #0
 8003f0c:	d10d      	bne.n	8003f2a <_dtoa_r+0x852>
 8003f0e:	4621      	mov	r1, r4
 8003f10:	4653      	mov	r3, sl
 8003f12:	2205      	movs	r2, #5
 8003f14:	4630      	mov	r0, r6
 8003f16:	f000 f9c9 	bl	80042ac <__multadd>
 8003f1a:	4601      	mov	r1, r0
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	4628      	mov	r0, r5
 8003f20:	f000 fbe4 	bl	80046ec <__mcmp>
 8003f24:	2800      	cmp	r0, #0
 8003f26:	f73f adeb 	bgt.w	8003b00 <_dtoa_r+0x428>
 8003f2a:	9b08      	ldr	r3, [sp, #32]
 8003f2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003f30:	ea6f 0b03 	mvn.w	fp, r3
 8003f34:	f04f 0900 	mov.w	r9, #0
 8003f38:	4621      	mov	r1, r4
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	f000 f994 	bl	8004268 <_Bfree>
 8003f40:	2f00      	cmp	r7, #0
 8003f42:	f43f aea8 	beq.w	8003c96 <_dtoa_r+0x5be>
 8003f46:	f1b9 0f00 	cmp.w	r9, #0
 8003f4a:	d005      	beq.n	8003f58 <_dtoa_r+0x880>
 8003f4c:	45b9      	cmp	r9, r7
 8003f4e:	d003      	beq.n	8003f58 <_dtoa_r+0x880>
 8003f50:	4649      	mov	r1, r9
 8003f52:	4630      	mov	r0, r6
 8003f54:	f000 f988 	bl	8004268 <_Bfree>
 8003f58:	4639      	mov	r1, r7
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	f000 f984 	bl	8004268 <_Bfree>
 8003f60:	e699      	b.n	8003c96 <_dtoa_r+0x5be>
 8003f62:	2400      	movs	r4, #0
 8003f64:	4627      	mov	r7, r4
 8003f66:	e7e0      	b.n	8003f2a <_dtoa_r+0x852>
 8003f68:	46bb      	mov	fp, r7
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	4607      	mov	r7, r0
 8003f6e:	e5c7      	b.n	8003b00 <_dtoa_r+0x428>
 8003f70:	9b07      	ldr	r3, [sp, #28]
 8003f72:	46ca      	mov	sl, r9
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 8100 	beq.w	800417a <_dtoa_r+0xaa2>
 8003f7a:	f1b8 0f00 	cmp.w	r8, #0
 8003f7e:	dd05      	ble.n	8003f8c <_dtoa_r+0x8b4>
 8003f80:	4639      	mov	r1, r7
 8003f82:	4642      	mov	r2, r8
 8003f84:	4630      	mov	r0, r6
 8003f86:	f000 fb41 	bl	800460c <__lshift>
 8003f8a:	4607      	mov	r7, r0
 8003f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d05d      	beq.n	800404e <_dtoa_r+0x976>
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	4630      	mov	r0, r6
 8003f96:	f000 f927 	bl	80041e8 <_Balloc>
 8003f9a:	4680      	mov	r8, r0
 8003f9c:	b928      	cbnz	r0, 8003faa <_dtoa_r+0x8d2>
 8003f9e:	4b82      	ldr	r3, [pc, #520]	; (80041a8 <_dtoa_r+0xad0>)
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003fa6:	f7ff bbaf 	b.w	8003708 <_dtoa_r+0x30>
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	3202      	adds	r2, #2
 8003fae:	0092      	lsls	r2, r2, #2
 8003fb0:	f107 010c 	add.w	r1, r7, #12
 8003fb4:	300c      	adds	r0, #12
 8003fb6:	f000 f909 	bl	80041cc <memcpy>
 8003fba:	2201      	movs	r2, #1
 8003fbc:	4641      	mov	r1, r8
 8003fbe:	4630      	mov	r0, r6
 8003fc0:	f000 fb24 	bl	800460c <__lshift>
 8003fc4:	9b01      	ldr	r3, [sp, #4]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	9304      	str	r3, [sp, #16]
 8003fca:	9b01      	ldr	r3, [sp, #4]
 8003fcc:	4453      	add	r3, sl
 8003fce:	9308      	str	r3, [sp, #32]
 8003fd0:	9b02      	ldr	r3, [sp, #8]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	46b9      	mov	r9, r7
 8003fd8:	9307      	str	r3, [sp, #28]
 8003fda:	4607      	mov	r7, r0
 8003fdc:	9b04      	ldr	r3, [sp, #16]
 8003fde:	4621      	mov	r1, r4
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	9302      	str	r3, [sp, #8]
 8003fe6:	f7ff fae9 	bl	80035bc <quorem>
 8003fea:	4603      	mov	r3, r0
 8003fec:	3330      	adds	r3, #48	; 0x30
 8003fee:	9005      	str	r0, [sp, #20]
 8003ff0:	4649      	mov	r1, r9
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff6:	f000 fb79 	bl	80046ec <__mcmp>
 8003ffa:	463a      	mov	r2, r7
 8003ffc:	4682      	mov	sl, r0
 8003ffe:	4621      	mov	r1, r4
 8004000:	4630      	mov	r0, r6
 8004002:	f000 fb8f 	bl	8004724 <__mdiff>
 8004006:	68c2      	ldr	r2, [r0, #12]
 8004008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800400a:	4680      	mov	r8, r0
 800400c:	bb0a      	cbnz	r2, 8004052 <_dtoa_r+0x97a>
 800400e:	4601      	mov	r1, r0
 8004010:	4628      	mov	r0, r5
 8004012:	f000 fb6b 	bl	80046ec <__mcmp>
 8004016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004018:	4602      	mov	r2, r0
 800401a:	4641      	mov	r1, r8
 800401c:	4630      	mov	r0, r6
 800401e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8004022:	f000 f921 	bl	8004268 <_Bfree>
 8004026:	9b06      	ldr	r3, [sp, #24]
 8004028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800402a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800402e:	ea43 0102 	orr.w	r1, r3, r2
 8004032:	9b07      	ldr	r3, [sp, #28]
 8004034:	430b      	orrs	r3, r1
 8004036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004038:	d10d      	bne.n	8004056 <_dtoa_r+0x97e>
 800403a:	2b39      	cmp	r3, #57	; 0x39
 800403c:	d029      	beq.n	8004092 <_dtoa_r+0x9ba>
 800403e:	f1ba 0f00 	cmp.w	sl, #0
 8004042:	dd01      	ble.n	8004048 <_dtoa_r+0x970>
 8004044:	9b05      	ldr	r3, [sp, #20]
 8004046:	3331      	adds	r3, #49	; 0x31
 8004048:	9a02      	ldr	r2, [sp, #8]
 800404a:	7013      	strb	r3, [r2, #0]
 800404c:	e774      	b.n	8003f38 <_dtoa_r+0x860>
 800404e:	4638      	mov	r0, r7
 8004050:	e7b8      	b.n	8003fc4 <_dtoa_r+0x8ec>
 8004052:	2201      	movs	r2, #1
 8004054:	e7e1      	b.n	800401a <_dtoa_r+0x942>
 8004056:	f1ba 0f00 	cmp.w	sl, #0
 800405a:	db06      	blt.n	800406a <_dtoa_r+0x992>
 800405c:	9906      	ldr	r1, [sp, #24]
 800405e:	ea41 0a0a 	orr.w	sl, r1, sl
 8004062:	9907      	ldr	r1, [sp, #28]
 8004064:	ea5a 0101 	orrs.w	r1, sl, r1
 8004068:	d120      	bne.n	80040ac <_dtoa_r+0x9d4>
 800406a:	2a00      	cmp	r2, #0
 800406c:	ddec      	ble.n	8004048 <_dtoa_r+0x970>
 800406e:	4629      	mov	r1, r5
 8004070:	2201      	movs	r2, #1
 8004072:	4630      	mov	r0, r6
 8004074:	9304      	str	r3, [sp, #16]
 8004076:	f000 fac9 	bl	800460c <__lshift>
 800407a:	4621      	mov	r1, r4
 800407c:	4605      	mov	r5, r0
 800407e:	f000 fb35 	bl	80046ec <__mcmp>
 8004082:	2800      	cmp	r0, #0
 8004084:	9b04      	ldr	r3, [sp, #16]
 8004086:	dc02      	bgt.n	800408e <_dtoa_r+0x9b6>
 8004088:	d1de      	bne.n	8004048 <_dtoa_r+0x970>
 800408a:	07da      	lsls	r2, r3, #31
 800408c:	d5dc      	bpl.n	8004048 <_dtoa_r+0x970>
 800408e:	2b39      	cmp	r3, #57	; 0x39
 8004090:	d1d8      	bne.n	8004044 <_dtoa_r+0x96c>
 8004092:	9a02      	ldr	r2, [sp, #8]
 8004094:	2339      	movs	r3, #57	; 0x39
 8004096:	7013      	strb	r3, [r2, #0]
 8004098:	4643      	mov	r3, r8
 800409a:	4698      	mov	r8, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80040a2:	2a39      	cmp	r2, #57	; 0x39
 80040a4:	d051      	beq.n	800414a <_dtoa_r+0xa72>
 80040a6:	3201      	adds	r2, #1
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	e745      	b.n	8003f38 <_dtoa_r+0x860>
 80040ac:	2a00      	cmp	r2, #0
 80040ae:	dd03      	ble.n	80040b8 <_dtoa_r+0x9e0>
 80040b0:	2b39      	cmp	r3, #57	; 0x39
 80040b2:	d0ee      	beq.n	8004092 <_dtoa_r+0x9ba>
 80040b4:	3301      	adds	r3, #1
 80040b6:	e7c7      	b.n	8004048 <_dtoa_r+0x970>
 80040b8:	9a04      	ldr	r2, [sp, #16]
 80040ba:	9908      	ldr	r1, [sp, #32]
 80040bc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80040c0:	428a      	cmp	r2, r1
 80040c2:	d02b      	beq.n	800411c <_dtoa_r+0xa44>
 80040c4:	4629      	mov	r1, r5
 80040c6:	2300      	movs	r3, #0
 80040c8:	220a      	movs	r2, #10
 80040ca:	4630      	mov	r0, r6
 80040cc:	f000 f8ee 	bl	80042ac <__multadd>
 80040d0:	45b9      	cmp	r9, r7
 80040d2:	4605      	mov	r5, r0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	f04f 020a 	mov.w	r2, #10
 80040dc:	4649      	mov	r1, r9
 80040de:	4630      	mov	r0, r6
 80040e0:	d107      	bne.n	80040f2 <_dtoa_r+0xa1a>
 80040e2:	f000 f8e3 	bl	80042ac <__multadd>
 80040e6:	4681      	mov	r9, r0
 80040e8:	4607      	mov	r7, r0
 80040ea:	9b04      	ldr	r3, [sp, #16]
 80040ec:	3301      	adds	r3, #1
 80040ee:	9304      	str	r3, [sp, #16]
 80040f0:	e774      	b.n	8003fdc <_dtoa_r+0x904>
 80040f2:	f000 f8db 	bl	80042ac <__multadd>
 80040f6:	4639      	mov	r1, r7
 80040f8:	4681      	mov	r9, r0
 80040fa:	2300      	movs	r3, #0
 80040fc:	220a      	movs	r2, #10
 80040fe:	4630      	mov	r0, r6
 8004100:	f000 f8d4 	bl	80042ac <__multadd>
 8004104:	4607      	mov	r7, r0
 8004106:	e7f0      	b.n	80040ea <_dtoa_r+0xa12>
 8004108:	f1ba 0f00 	cmp.w	sl, #0
 800410c:	9a01      	ldr	r2, [sp, #4]
 800410e:	bfcc      	ite	gt
 8004110:	46d0      	movgt	r8, sl
 8004112:	f04f 0801 	movle.w	r8, #1
 8004116:	4490      	add	r8, r2
 8004118:	f04f 0900 	mov.w	r9, #0
 800411c:	4629      	mov	r1, r5
 800411e:	2201      	movs	r2, #1
 8004120:	4630      	mov	r0, r6
 8004122:	9302      	str	r3, [sp, #8]
 8004124:	f000 fa72 	bl	800460c <__lshift>
 8004128:	4621      	mov	r1, r4
 800412a:	4605      	mov	r5, r0
 800412c:	f000 fade 	bl	80046ec <__mcmp>
 8004130:	2800      	cmp	r0, #0
 8004132:	dcb1      	bgt.n	8004098 <_dtoa_r+0x9c0>
 8004134:	d102      	bne.n	800413c <_dtoa_r+0xa64>
 8004136:	9b02      	ldr	r3, [sp, #8]
 8004138:	07db      	lsls	r3, r3, #31
 800413a:	d4ad      	bmi.n	8004098 <_dtoa_r+0x9c0>
 800413c:	4643      	mov	r3, r8
 800413e:	4698      	mov	r8, r3
 8004140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004144:	2a30      	cmp	r2, #48	; 0x30
 8004146:	d0fa      	beq.n	800413e <_dtoa_r+0xa66>
 8004148:	e6f6      	b.n	8003f38 <_dtoa_r+0x860>
 800414a:	9a01      	ldr	r2, [sp, #4]
 800414c:	429a      	cmp	r2, r3
 800414e:	d1a4      	bne.n	800409a <_dtoa_r+0x9c2>
 8004150:	f10b 0b01 	add.w	fp, fp, #1
 8004154:	2331      	movs	r3, #49	; 0x31
 8004156:	e778      	b.n	800404a <_dtoa_r+0x972>
 8004158:	4b14      	ldr	r3, [pc, #80]	; (80041ac <_dtoa_r+0xad4>)
 800415a:	f7ff bb27 	b.w	80037ac <_dtoa_r+0xd4>
 800415e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004160:	2b00      	cmp	r3, #0
 8004162:	f47f ab03 	bne.w	800376c <_dtoa_r+0x94>
 8004166:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <_dtoa_r+0xad8>)
 8004168:	f7ff bb20 	b.w	80037ac <_dtoa_r+0xd4>
 800416c:	f1ba 0f00 	cmp.w	sl, #0
 8004170:	dc03      	bgt.n	800417a <_dtoa_r+0xaa2>
 8004172:	9b06      	ldr	r3, [sp, #24]
 8004174:	2b02      	cmp	r3, #2
 8004176:	f73f aec7 	bgt.w	8003f08 <_dtoa_r+0x830>
 800417a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800417e:	4621      	mov	r1, r4
 8004180:	4628      	mov	r0, r5
 8004182:	f7ff fa1b 	bl	80035bc <quorem>
 8004186:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800418a:	f808 3b01 	strb.w	r3, [r8], #1
 800418e:	9a01      	ldr	r2, [sp, #4]
 8004190:	eba8 0202 	sub.w	r2, r8, r2
 8004194:	4592      	cmp	sl, r2
 8004196:	ddb7      	ble.n	8004108 <_dtoa_r+0xa30>
 8004198:	4629      	mov	r1, r5
 800419a:	2300      	movs	r3, #0
 800419c:	220a      	movs	r2, #10
 800419e:	4630      	mov	r0, r6
 80041a0:	f000 f884 	bl	80042ac <__multadd>
 80041a4:	4605      	mov	r5, r0
 80041a6:	e7ea      	b.n	800417e <_dtoa_r+0xaa6>
 80041a8:	08005a63 	.word	0x08005a63
 80041ac:	080059c0 	.word	0x080059c0
 80041b0:	080059e4 	.word	0x080059e4

080041b4 <_localeconv_r>:
 80041b4:	4800      	ldr	r0, [pc, #0]	; (80041b8 <_localeconv_r+0x4>)
 80041b6:	4770      	bx	lr
 80041b8:	20000160 	.word	0x20000160

080041bc <malloc>:
 80041bc:	4b02      	ldr	r3, [pc, #8]	; (80041c8 <malloc+0xc>)
 80041be:	4601      	mov	r1, r0
 80041c0:	6818      	ldr	r0, [r3, #0]
 80041c2:	f000 bc17 	b.w	80049f4 <_malloc_r>
 80041c6:	bf00      	nop
 80041c8:	2000000c 	.word	0x2000000c

080041cc <memcpy>:
 80041cc:	440a      	add	r2, r1
 80041ce:	4291      	cmp	r1, r2
 80041d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80041d4:	d100      	bne.n	80041d8 <memcpy+0xc>
 80041d6:	4770      	bx	lr
 80041d8:	b510      	push	{r4, lr}
 80041da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041e2:	4291      	cmp	r1, r2
 80041e4:	d1f9      	bne.n	80041da <memcpy+0xe>
 80041e6:	bd10      	pop	{r4, pc}

080041e8 <_Balloc>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80041ec:	4604      	mov	r4, r0
 80041ee:	460d      	mov	r5, r1
 80041f0:	b976      	cbnz	r6, 8004210 <_Balloc+0x28>
 80041f2:	2010      	movs	r0, #16
 80041f4:	f7ff ffe2 	bl	80041bc <malloc>
 80041f8:	4602      	mov	r2, r0
 80041fa:	6260      	str	r0, [r4, #36]	; 0x24
 80041fc:	b920      	cbnz	r0, 8004208 <_Balloc+0x20>
 80041fe:	4b18      	ldr	r3, [pc, #96]	; (8004260 <_Balloc+0x78>)
 8004200:	4818      	ldr	r0, [pc, #96]	; (8004264 <_Balloc+0x7c>)
 8004202:	2166      	movs	r1, #102	; 0x66
 8004204:	f000 fdd6 	bl	8004db4 <__assert_func>
 8004208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800420c:	6006      	str	r6, [r0, #0]
 800420e:	60c6      	str	r6, [r0, #12]
 8004210:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004212:	68f3      	ldr	r3, [r6, #12]
 8004214:	b183      	cbz	r3, 8004238 <_Balloc+0x50>
 8004216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800421e:	b9b8      	cbnz	r0, 8004250 <_Balloc+0x68>
 8004220:	2101      	movs	r1, #1
 8004222:	fa01 f605 	lsl.w	r6, r1, r5
 8004226:	1d72      	adds	r2, r6, #5
 8004228:	0092      	lsls	r2, r2, #2
 800422a:	4620      	mov	r0, r4
 800422c:	f000 fb60 	bl	80048f0 <_calloc_r>
 8004230:	b160      	cbz	r0, 800424c <_Balloc+0x64>
 8004232:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004236:	e00e      	b.n	8004256 <_Balloc+0x6e>
 8004238:	2221      	movs	r2, #33	; 0x21
 800423a:	2104      	movs	r1, #4
 800423c:	4620      	mov	r0, r4
 800423e:	f000 fb57 	bl	80048f0 <_calloc_r>
 8004242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004244:	60f0      	str	r0, [r6, #12]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e4      	bne.n	8004216 <_Balloc+0x2e>
 800424c:	2000      	movs	r0, #0
 800424e:	bd70      	pop	{r4, r5, r6, pc}
 8004250:	6802      	ldr	r2, [r0, #0]
 8004252:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004256:	2300      	movs	r3, #0
 8004258:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800425c:	e7f7      	b.n	800424e <_Balloc+0x66>
 800425e:	bf00      	nop
 8004260:	080059f1 	.word	0x080059f1
 8004264:	08005a74 	.word	0x08005a74

08004268 <_Bfree>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800426c:	4605      	mov	r5, r0
 800426e:	460c      	mov	r4, r1
 8004270:	b976      	cbnz	r6, 8004290 <_Bfree+0x28>
 8004272:	2010      	movs	r0, #16
 8004274:	f7ff ffa2 	bl	80041bc <malloc>
 8004278:	4602      	mov	r2, r0
 800427a:	6268      	str	r0, [r5, #36]	; 0x24
 800427c:	b920      	cbnz	r0, 8004288 <_Bfree+0x20>
 800427e:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <_Bfree+0x3c>)
 8004280:	4809      	ldr	r0, [pc, #36]	; (80042a8 <_Bfree+0x40>)
 8004282:	218a      	movs	r1, #138	; 0x8a
 8004284:	f000 fd96 	bl	8004db4 <__assert_func>
 8004288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800428c:	6006      	str	r6, [r0, #0]
 800428e:	60c6      	str	r6, [r0, #12]
 8004290:	b13c      	cbz	r4, 80042a2 <_Bfree+0x3a>
 8004292:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004294:	6862      	ldr	r2, [r4, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800429c:	6021      	str	r1, [r4, #0]
 800429e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80042a2:	bd70      	pop	{r4, r5, r6, pc}
 80042a4:	080059f1 	.word	0x080059f1
 80042a8:	08005a74 	.word	0x08005a74

080042ac <__multadd>:
 80042ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042b0:	690d      	ldr	r5, [r1, #16]
 80042b2:	4607      	mov	r7, r0
 80042b4:	460c      	mov	r4, r1
 80042b6:	461e      	mov	r6, r3
 80042b8:	f101 0c14 	add.w	ip, r1, #20
 80042bc:	2000      	movs	r0, #0
 80042be:	f8dc 3000 	ldr.w	r3, [ip]
 80042c2:	b299      	uxth	r1, r3
 80042c4:	fb02 6101 	mla	r1, r2, r1, r6
 80042c8:	0c1e      	lsrs	r6, r3, #16
 80042ca:	0c0b      	lsrs	r3, r1, #16
 80042cc:	fb02 3306 	mla	r3, r2, r6, r3
 80042d0:	b289      	uxth	r1, r1
 80042d2:	3001      	adds	r0, #1
 80042d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80042d8:	4285      	cmp	r5, r0
 80042da:	f84c 1b04 	str.w	r1, [ip], #4
 80042de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80042e2:	dcec      	bgt.n	80042be <__multadd+0x12>
 80042e4:	b30e      	cbz	r6, 800432a <__multadd+0x7e>
 80042e6:	68a3      	ldr	r3, [r4, #8]
 80042e8:	42ab      	cmp	r3, r5
 80042ea:	dc19      	bgt.n	8004320 <__multadd+0x74>
 80042ec:	6861      	ldr	r1, [r4, #4]
 80042ee:	4638      	mov	r0, r7
 80042f0:	3101      	adds	r1, #1
 80042f2:	f7ff ff79 	bl	80041e8 <_Balloc>
 80042f6:	4680      	mov	r8, r0
 80042f8:	b928      	cbnz	r0, 8004306 <__multadd+0x5a>
 80042fa:	4602      	mov	r2, r0
 80042fc:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <__multadd+0x84>)
 80042fe:	480d      	ldr	r0, [pc, #52]	; (8004334 <__multadd+0x88>)
 8004300:	21b5      	movs	r1, #181	; 0xb5
 8004302:	f000 fd57 	bl	8004db4 <__assert_func>
 8004306:	6922      	ldr	r2, [r4, #16]
 8004308:	3202      	adds	r2, #2
 800430a:	f104 010c 	add.w	r1, r4, #12
 800430e:	0092      	lsls	r2, r2, #2
 8004310:	300c      	adds	r0, #12
 8004312:	f7ff ff5b 	bl	80041cc <memcpy>
 8004316:	4621      	mov	r1, r4
 8004318:	4638      	mov	r0, r7
 800431a:	f7ff ffa5 	bl	8004268 <_Bfree>
 800431e:	4644      	mov	r4, r8
 8004320:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004324:	3501      	adds	r5, #1
 8004326:	615e      	str	r6, [r3, #20]
 8004328:	6125      	str	r5, [r4, #16]
 800432a:	4620      	mov	r0, r4
 800432c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004330:	08005a63 	.word	0x08005a63
 8004334:	08005a74 	.word	0x08005a74

08004338 <__hi0bits>:
 8004338:	0c03      	lsrs	r3, r0, #16
 800433a:	041b      	lsls	r3, r3, #16
 800433c:	b9d3      	cbnz	r3, 8004374 <__hi0bits+0x3c>
 800433e:	0400      	lsls	r0, r0, #16
 8004340:	2310      	movs	r3, #16
 8004342:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004346:	bf04      	itt	eq
 8004348:	0200      	lsleq	r0, r0, #8
 800434a:	3308      	addeq	r3, #8
 800434c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004350:	bf04      	itt	eq
 8004352:	0100      	lsleq	r0, r0, #4
 8004354:	3304      	addeq	r3, #4
 8004356:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800435a:	bf04      	itt	eq
 800435c:	0080      	lsleq	r0, r0, #2
 800435e:	3302      	addeq	r3, #2
 8004360:	2800      	cmp	r0, #0
 8004362:	db05      	blt.n	8004370 <__hi0bits+0x38>
 8004364:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004368:	f103 0301 	add.w	r3, r3, #1
 800436c:	bf08      	it	eq
 800436e:	2320      	moveq	r3, #32
 8004370:	4618      	mov	r0, r3
 8004372:	4770      	bx	lr
 8004374:	2300      	movs	r3, #0
 8004376:	e7e4      	b.n	8004342 <__hi0bits+0xa>

08004378 <__lo0bits>:
 8004378:	6803      	ldr	r3, [r0, #0]
 800437a:	f013 0207 	ands.w	r2, r3, #7
 800437e:	4601      	mov	r1, r0
 8004380:	d00b      	beq.n	800439a <__lo0bits+0x22>
 8004382:	07da      	lsls	r2, r3, #31
 8004384:	d423      	bmi.n	80043ce <__lo0bits+0x56>
 8004386:	0798      	lsls	r0, r3, #30
 8004388:	bf49      	itett	mi
 800438a:	085b      	lsrmi	r3, r3, #1
 800438c:	089b      	lsrpl	r3, r3, #2
 800438e:	2001      	movmi	r0, #1
 8004390:	600b      	strmi	r3, [r1, #0]
 8004392:	bf5c      	itt	pl
 8004394:	600b      	strpl	r3, [r1, #0]
 8004396:	2002      	movpl	r0, #2
 8004398:	4770      	bx	lr
 800439a:	b298      	uxth	r0, r3
 800439c:	b9a8      	cbnz	r0, 80043ca <__lo0bits+0x52>
 800439e:	0c1b      	lsrs	r3, r3, #16
 80043a0:	2010      	movs	r0, #16
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	b90a      	cbnz	r2, 80043aa <__lo0bits+0x32>
 80043a6:	3008      	adds	r0, #8
 80043a8:	0a1b      	lsrs	r3, r3, #8
 80043aa:	071a      	lsls	r2, r3, #28
 80043ac:	bf04      	itt	eq
 80043ae:	091b      	lsreq	r3, r3, #4
 80043b0:	3004      	addeq	r0, #4
 80043b2:	079a      	lsls	r2, r3, #30
 80043b4:	bf04      	itt	eq
 80043b6:	089b      	lsreq	r3, r3, #2
 80043b8:	3002      	addeq	r0, #2
 80043ba:	07da      	lsls	r2, r3, #31
 80043bc:	d403      	bmi.n	80043c6 <__lo0bits+0x4e>
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	f100 0001 	add.w	r0, r0, #1
 80043c4:	d005      	beq.n	80043d2 <__lo0bits+0x5a>
 80043c6:	600b      	str	r3, [r1, #0]
 80043c8:	4770      	bx	lr
 80043ca:	4610      	mov	r0, r2
 80043cc:	e7e9      	b.n	80043a2 <__lo0bits+0x2a>
 80043ce:	2000      	movs	r0, #0
 80043d0:	4770      	bx	lr
 80043d2:	2020      	movs	r0, #32
 80043d4:	4770      	bx	lr
	...

080043d8 <__i2b>:
 80043d8:	b510      	push	{r4, lr}
 80043da:	460c      	mov	r4, r1
 80043dc:	2101      	movs	r1, #1
 80043de:	f7ff ff03 	bl	80041e8 <_Balloc>
 80043e2:	4602      	mov	r2, r0
 80043e4:	b928      	cbnz	r0, 80043f2 <__i2b+0x1a>
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <__i2b+0x24>)
 80043e8:	4805      	ldr	r0, [pc, #20]	; (8004400 <__i2b+0x28>)
 80043ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80043ee:	f000 fce1 	bl	8004db4 <__assert_func>
 80043f2:	2301      	movs	r3, #1
 80043f4:	6144      	str	r4, [r0, #20]
 80043f6:	6103      	str	r3, [r0, #16]
 80043f8:	bd10      	pop	{r4, pc}
 80043fa:	bf00      	nop
 80043fc:	08005a63 	.word	0x08005a63
 8004400:	08005a74 	.word	0x08005a74

08004404 <__multiply>:
 8004404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004408:	4691      	mov	r9, r2
 800440a:	690a      	ldr	r2, [r1, #16]
 800440c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004410:	429a      	cmp	r2, r3
 8004412:	bfb8      	it	lt
 8004414:	460b      	movlt	r3, r1
 8004416:	460c      	mov	r4, r1
 8004418:	bfbc      	itt	lt
 800441a:	464c      	movlt	r4, r9
 800441c:	4699      	movlt	r9, r3
 800441e:	6927      	ldr	r7, [r4, #16]
 8004420:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004424:	68a3      	ldr	r3, [r4, #8]
 8004426:	6861      	ldr	r1, [r4, #4]
 8004428:	eb07 060a 	add.w	r6, r7, sl
 800442c:	42b3      	cmp	r3, r6
 800442e:	b085      	sub	sp, #20
 8004430:	bfb8      	it	lt
 8004432:	3101      	addlt	r1, #1
 8004434:	f7ff fed8 	bl	80041e8 <_Balloc>
 8004438:	b930      	cbnz	r0, 8004448 <__multiply+0x44>
 800443a:	4602      	mov	r2, r0
 800443c:	4b44      	ldr	r3, [pc, #272]	; (8004550 <__multiply+0x14c>)
 800443e:	4845      	ldr	r0, [pc, #276]	; (8004554 <__multiply+0x150>)
 8004440:	f240 115d 	movw	r1, #349	; 0x15d
 8004444:	f000 fcb6 	bl	8004db4 <__assert_func>
 8004448:	f100 0514 	add.w	r5, r0, #20
 800444c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004450:	462b      	mov	r3, r5
 8004452:	2200      	movs	r2, #0
 8004454:	4543      	cmp	r3, r8
 8004456:	d321      	bcc.n	800449c <__multiply+0x98>
 8004458:	f104 0314 	add.w	r3, r4, #20
 800445c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004460:	f109 0314 	add.w	r3, r9, #20
 8004464:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004468:	9202      	str	r2, [sp, #8]
 800446a:	1b3a      	subs	r2, r7, r4
 800446c:	3a15      	subs	r2, #21
 800446e:	f022 0203 	bic.w	r2, r2, #3
 8004472:	3204      	adds	r2, #4
 8004474:	f104 0115 	add.w	r1, r4, #21
 8004478:	428f      	cmp	r7, r1
 800447a:	bf38      	it	cc
 800447c:	2204      	movcc	r2, #4
 800447e:	9201      	str	r2, [sp, #4]
 8004480:	9a02      	ldr	r2, [sp, #8]
 8004482:	9303      	str	r3, [sp, #12]
 8004484:	429a      	cmp	r2, r3
 8004486:	d80c      	bhi.n	80044a2 <__multiply+0x9e>
 8004488:	2e00      	cmp	r6, #0
 800448a:	dd03      	ble.n	8004494 <__multiply+0x90>
 800448c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004490:	2b00      	cmp	r3, #0
 8004492:	d05a      	beq.n	800454a <__multiply+0x146>
 8004494:	6106      	str	r6, [r0, #16]
 8004496:	b005      	add	sp, #20
 8004498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800449c:	f843 2b04 	str.w	r2, [r3], #4
 80044a0:	e7d8      	b.n	8004454 <__multiply+0x50>
 80044a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80044a6:	f1ba 0f00 	cmp.w	sl, #0
 80044aa:	d024      	beq.n	80044f6 <__multiply+0xf2>
 80044ac:	f104 0e14 	add.w	lr, r4, #20
 80044b0:	46a9      	mov	r9, r5
 80044b2:	f04f 0c00 	mov.w	ip, #0
 80044b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80044ba:	f8d9 1000 	ldr.w	r1, [r9]
 80044be:	fa1f fb82 	uxth.w	fp, r2
 80044c2:	b289      	uxth	r1, r1
 80044c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80044c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80044cc:	f8d9 2000 	ldr.w	r2, [r9]
 80044d0:	4461      	add	r1, ip
 80044d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80044d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80044da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80044de:	b289      	uxth	r1, r1
 80044e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80044e4:	4577      	cmp	r7, lr
 80044e6:	f849 1b04 	str.w	r1, [r9], #4
 80044ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80044ee:	d8e2      	bhi.n	80044b6 <__multiply+0xb2>
 80044f0:	9a01      	ldr	r2, [sp, #4]
 80044f2:	f845 c002 	str.w	ip, [r5, r2]
 80044f6:	9a03      	ldr	r2, [sp, #12]
 80044f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80044fc:	3304      	adds	r3, #4
 80044fe:	f1b9 0f00 	cmp.w	r9, #0
 8004502:	d020      	beq.n	8004546 <__multiply+0x142>
 8004504:	6829      	ldr	r1, [r5, #0]
 8004506:	f104 0c14 	add.w	ip, r4, #20
 800450a:	46ae      	mov	lr, r5
 800450c:	f04f 0a00 	mov.w	sl, #0
 8004510:	f8bc b000 	ldrh.w	fp, [ip]
 8004514:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004518:	fb09 220b 	mla	r2, r9, fp, r2
 800451c:	4492      	add	sl, r2
 800451e:	b289      	uxth	r1, r1
 8004520:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004524:	f84e 1b04 	str.w	r1, [lr], #4
 8004528:	f85c 2b04 	ldr.w	r2, [ip], #4
 800452c:	f8be 1000 	ldrh.w	r1, [lr]
 8004530:	0c12      	lsrs	r2, r2, #16
 8004532:	fb09 1102 	mla	r1, r9, r2, r1
 8004536:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800453a:	4567      	cmp	r7, ip
 800453c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004540:	d8e6      	bhi.n	8004510 <__multiply+0x10c>
 8004542:	9a01      	ldr	r2, [sp, #4]
 8004544:	50a9      	str	r1, [r5, r2]
 8004546:	3504      	adds	r5, #4
 8004548:	e79a      	b.n	8004480 <__multiply+0x7c>
 800454a:	3e01      	subs	r6, #1
 800454c:	e79c      	b.n	8004488 <__multiply+0x84>
 800454e:	bf00      	nop
 8004550:	08005a63 	.word	0x08005a63
 8004554:	08005a74 	.word	0x08005a74

08004558 <__pow5mult>:
 8004558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800455c:	4615      	mov	r5, r2
 800455e:	f012 0203 	ands.w	r2, r2, #3
 8004562:	4606      	mov	r6, r0
 8004564:	460f      	mov	r7, r1
 8004566:	d007      	beq.n	8004578 <__pow5mult+0x20>
 8004568:	4c25      	ldr	r4, [pc, #148]	; (8004600 <__pow5mult+0xa8>)
 800456a:	3a01      	subs	r2, #1
 800456c:	2300      	movs	r3, #0
 800456e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004572:	f7ff fe9b 	bl	80042ac <__multadd>
 8004576:	4607      	mov	r7, r0
 8004578:	10ad      	asrs	r5, r5, #2
 800457a:	d03d      	beq.n	80045f8 <__pow5mult+0xa0>
 800457c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800457e:	b97c      	cbnz	r4, 80045a0 <__pow5mult+0x48>
 8004580:	2010      	movs	r0, #16
 8004582:	f7ff fe1b 	bl	80041bc <malloc>
 8004586:	4602      	mov	r2, r0
 8004588:	6270      	str	r0, [r6, #36]	; 0x24
 800458a:	b928      	cbnz	r0, 8004598 <__pow5mult+0x40>
 800458c:	4b1d      	ldr	r3, [pc, #116]	; (8004604 <__pow5mult+0xac>)
 800458e:	481e      	ldr	r0, [pc, #120]	; (8004608 <__pow5mult+0xb0>)
 8004590:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004594:	f000 fc0e 	bl	8004db4 <__assert_func>
 8004598:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800459c:	6004      	str	r4, [r0, #0]
 800459e:	60c4      	str	r4, [r0, #12]
 80045a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80045a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80045a8:	b94c      	cbnz	r4, 80045be <__pow5mult+0x66>
 80045aa:	f240 2171 	movw	r1, #625	; 0x271
 80045ae:	4630      	mov	r0, r6
 80045b0:	f7ff ff12 	bl	80043d8 <__i2b>
 80045b4:	2300      	movs	r3, #0
 80045b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80045ba:	4604      	mov	r4, r0
 80045bc:	6003      	str	r3, [r0, #0]
 80045be:	f04f 0900 	mov.w	r9, #0
 80045c2:	07eb      	lsls	r3, r5, #31
 80045c4:	d50a      	bpl.n	80045dc <__pow5mult+0x84>
 80045c6:	4639      	mov	r1, r7
 80045c8:	4622      	mov	r2, r4
 80045ca:	4630      	mov	r0, r6
 80045cc:	f7ff ff1a 	bl	8004404 <__multiply>
 80045d0:	4639      	mov	r1, r7
 80045d2:	4680      	mov	r8, r0
 80045d4:	4630      	mov	r0, r6
 80045d6:	f7ff fe47 	bl	8004268 <_Bfree>
 80045da:	4647      	mov	r7, r8
 80045dc:	106d      	asrs	r5, r5, #1
 80045de:	d00b      	beq.n	80045f8 <__pow5mult+0xa0>
 80045e0:	6820      	ldr	r0, [r4, #0]
 80045e2:	b938      	cbnz	r0, 80045f4 <__pow5mult+0x9c>
 80045e4:	4622      	mov	r2, r4
 80045e6:	4621      	mov	r1, r4
 80045e8:	4630      	mov	r0, r6
 80045ea:	f7ff ff0b 	bl	8004404 <__multiply>
 80045ee:	6020      	str	r0, [r4, #0]
 80045f0:	f8c0 9000 	str.w	r9, [r0]
 80045f4:	4604      	mov	r4, r0
 80045f6:	e7e4      	b.n	80045c2 <__pow5mult+0x6a>
 80045f8:	4638      	mov	r0, r7
 80045fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045fe:	bf00      	nop
 8004600:	08005bc0 	.word	0x08005bc0
 8004604:	080059f1 	.word	0x080059f1
 8004608:	08005a74 	.word	0x08005a74

0800460c <__lshift>:
 800460c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004610:	460c      	mov	r4, r1
 8004612:	6849      	ldr	r1, [r1, #4]
 8004614:	6923      	ldr	r3, [r4, #16]
 8004616:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800461a:	68a3      	ldr	r3, [r4, #8]
 800461c:	4607      	mov	r7, r0
 800461e:	4691      	mov	r9, r2
 8004620:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004624:	f108 0601 	add.w	r6, r8, #1
 8004628:	42b3      	cmp	r3, r6
 800462a:	db0b      	blt.n	8004644 <__lshift+0x38>
 800462c:	4638      	mov	r0, r7
 800462e:	f7ff fddb 	bl	80041e8 <_Balloc>
 8004632:	4605      	mov	r5, r0
 8004634:	b948      	cbnz	r0, 800464a <__lshift+0x3e>
 8004636:	4602      	mov	r2, r0
 8004638:	4b2a      	ldr	r3, [pc, #168]	; (80046e4 <__lshift+0xd8>)
 800463a:	482b      	ldr	r0, [pc, #172]	; (80046e8 <__lshift+0xdc>)
 800463c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004640:	f000 fbb8 	bl	8004db4 <__assert_func>
 8004644:	3101      	adds	r1, #1
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	e7ee      	b.n	8004628 <__lshift+0x1c>
 800464a:	2300      	movs	r3, #0
 800464c:	f100 0114 	add.w	r1, r0, #20
 8004650:	f100 0210 	add.w	r2, r0, #16
 8004654:	4618      	mov	r0, r3
 8004656:	4553      	cmp	r3, sl
 8004658:	db37      	blt.n	80046ca <__lshift+0xbe>
 800465a:	6920      	ldr	r0, [r4, #16]
 800465c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004660:	f104 0314 	add.w	r3, r4, #20
 8004664:	f019 091f 	ands.w	r9, r9, #31
 8004668:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800466c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004670:	d02f      	beq.n	80046d2 <__lshift+0xc6>
 8004672:	f1c9 0e20 	rsb	lr, r9, #32
 8004676:	468a      	mov	sl, r1
 8004678:	f04f 0c00 	mov.w	ip, #0
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	fa02 f209 	lsl.w	r2, r2, r9
 8004682:	ea42 020c 	orr.w	r2, r2, ip
 8004686:	f84a 2b04 	str.w	r2, [sl], #4
 800468a:	f853 2b04 	ldr.w	r2, [r3], #4
 800468e:	4298      	cmp	r0, r3
 8004690:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004694:	d8f2      	bhi.n	800467c <__lshift+0x70>
 8004696:	1b03      	subs	r3, r0, r4
 8004698:	3b15      	subs	r3, #21
 800469a:	f023 0303 	bic.w	r3, r3, #3
 800469e:	3304      	adds	r3, #4
 80046a0:	f104 0215 	add.w	r2, r4, #21
 80046a4:	4290      	cmp	r0, r2
 80046a6:	bf38      	it	cc
 80046a8:	2304      	movcc	r3, #4
 80046aa:	f841 c003 	str.w	ip, [r1, r3]
 80046ae:	f1bc 0f00 	cmp.w	ip, #0
 80046b2:	d001      	beq.n	80046b8 <__lshift+0xac>
 80046b4:	f108 0602 	add.w	r6, r8, #2
 80046b8:	3e01      	subs	r6, #1
 80046ba:	4638      	mov	r0, r7
 80046bc:	612e      	str	r6, [r5, #16]
 80046be:	4621      	mov	r1, r4
 80046c0:	f7ff fdd2 	bl	8004268 <_Bfree>
 80046c4:	4628      	mov	r0, r5
 80046c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80046ce:	3301      	adds	r3, #1
 80046d0:	e7c1      	b.n	8004656 <__lshift+0x4a>
 80046d2:	3904      	subs	r1, #4
 80046d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80046d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80046dc:	4298      	cmp	r0, r3
 80046de:	d8f9      	bhi.n	80046d4 <__lshift+0xc8>
 80046e0:	e7ea      	b.n	80046b8 <__lshift+0xac>
 80046e2:	bf00      	nop
 80046e4:	08005a63 	.word	0x08005a63
 80046e8:	08005a74 	.word	0x08005a74

080046ec <__mcmp>:
 80046ec:	b530      	push	{r4, r5, lr}
 80046ee:	6902      	ldr	r2, [r0, #16]
 80046f0:	690c      	ldr	r4, [r1, #16]
 80046f2:	1b12      	subs	r2, r2, r4
 80046f4:	d10e      	bne.n	8004714 <__mcmp+0x28>
 80046f6:	f100 0314 	add.w	r3, r0, #20
 80046fa:	3114      	adds	r1, #20
 80046fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004700:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004704:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004708:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800470c:	42a5      	cmp	r5, r4
 800470e:	d003      	beq.n	8004718 <__mcmp+0x2c>
 8004710:	d305      	bcc.n	800471e <__mcmp+0x32>
 8004712:	2201      	movs	r2, #1
 8004714:	4610      	mov	r0, r2
 8004716:	bd30      	pop	{r4, r5, pc}
 8004718:	4283      	cmp	r3, r0
 800471a:	d3f3      	bcc.n	8004704 <__mcmp+0x18>
 800471c:	e7fa      	b.n	8004714 <__mcmp+0x28>
 800471e:	f04f 32ff 	mov.w	r2, #4294967295
 8004722:	e7f7      	b.n	8004714 <__mcmp+0x28>

08004724 <__mdiff>:
 8004724:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004728:	460c      	mov	r4, r1
 800472a:	4606      	mov	r6, r0
 800472c:	4611      	mov	r1, r2
 800472e:	4620      	mov	r0, r4
 8004730:	4690      	mov	r8, r2
 8004732:	f7ff ffdb 	bl	80046ec <__mcmp>
 8004736:	1e05      	subs	r5, r0, #0
 8004738:	d110      	bne.n	800475c <__mdiff+0x38>
 800473a:	4629      	mov	r1, r5
 800473c:	4630      	mov	r0, r6
 800473e:	f7ff fd53 	bl	80041e8 <_Balloc>
 8004742:	b930      	cbnz	r0, 8004752 <__mdiff+0x2e>
 8004744:	4b3a      	ldr	r3, [pc, #232]	; (8004830 <__mdiff+0x10c>)
 8004746:	4602      	mov	r2, r0
 8004748:	f240 2132 	movw	r1, #562	; 0x232
 800474c:	4839      	ldr	r0, [pc, #228]	; (8004834 <__mdiff+0x110>)
 800474e:	f000 fb31 	bl	8004db4 <__assert_func>
 8004752:	2301      	movs	r3, #1
 8004754:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004758:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800475c:	bfa4      	itt	ge
 800475e:	4643      	movge	r3, r8
 8004760:	46a0      	movge	r8, r4
 8004762:	4630      	mov	r0, r6
 8004764:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004768:	bfa6      	itte	ge
 800476a:	461c      	movge	r4, r3
 800476c:	2500      	movge	r5, #0
 800476e:	2501      	movlt	r5, #1
 8004770:	f7ff fd3a 	bl	80041e8 <_Balloc>
 8004774:	b920      	cbnz	r0, 8004780 <__mdiff+0x5c>
 8004776:	4b2e      	ldr	r3, [pc, #184]	; (8004830 <__mdiff+0x10c>)
 8004778:	4602      	mov	r2, r0
 800477a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800477e:	e7e5      	b.n	800474c <__mdiff+0x28>
 8004780:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004784:	6926      	ldr	r6, [r4, #16]
 8004786:	60c5      	str	r5, [r0, #12]
 8004788:	f104 0914 	add.w	r9, r4, #20
 800478c:	f108 0514 	add.w	r5, r8, #20
 8004790:	f100 0e14 	add.w	lr, r0, #20
 8004794:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004798:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800479c:	f108 0210 	add.w	r2, r8, #16
 80047a0:	46f2      	mov	sl, lr
 80047a2:	2100      	movs	r1, #0
 80047a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80047a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80047ac:	fa1f f883 	uxth.w	r8, r3
 80047b0:	fa11 f18b 	uxtah	r1, r1, fp
 80047b4:	0c1b      	lsrs	r3, r3, #16
 80047b6:	eba1 0808 	sub.w	r8, r1, r8
 80047ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80047be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80047c2:	fa1f f888 	uxth.w	r8, r8
 80047c6:	1419      	asrs	r1, r3, #16
 80047c8:	454e      	cmp	r6, r9
 80047ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80047ce:	f84a 3b04 	str.w	r3, [sl], #4
 80047d2:	d8e7      	bhi.n	80047a4 <__mdiff+0x80>
 80047d4:	1b33      	subs	r3, r6, r4
 80047d6:	3b15      	subs	r3, #21
 80047d8:	f023 0303 	bic.w	r3, r3, #3
 80047dc:	3304      	adds	r3, #4
 80047de:	3415      	adds	r4, #21
 80047e0:	42a6      	cmp	r6, r4
 80047e2:	bf38      	it	cc
 80047e4:	2304      	movcc	r3, #4
 80047e6:	441d      	add	r5, r3
 80047e8:	4473      	add	r3, lr
 80047ea:	469e      	mov	lr, r3
 80047ec:	462e      	mov	r6, r5
 80047ee:	4566      	cmp	r6, ip
 80047f0:	d30e      	bcc.n	8004810 <__mdiff+0xec>
 80047f2:	f10c 0203 	add.w	r2, ip, #3
 80047f6:	1b52      	subs	r2, r2, r5
 80047f8:	f022 0203 	bic.w	r2, r2, #3
 80047fc:	3d03      	subs	r5, #3
 80047fe:	45ac      	cmp	ip, r5
 8004800:	bf38      	it	cc
 8004802:	2200      	movcc	r2, #0
 8004804:	441a      	add	r2, r3
 8004806:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800480a:	b17b      	cbz	r3, 800482c <__mdiff+0x108>
 800480c:	6107      	str	r7, [r0, #16]
 800480e:	e7a3      	b.n	8004758 <__mdiff+0x34>
 8004810:	f856 8b04 	ldr.w	r8, [r6], #4
 8004814:	fa11 f288 	uxtah	r2, r1, r8
 8004818:	1414      	asrs	r4, r2, #16
 800481a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800481e:	b292      	uxth	r2, r2
 8004820:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004824:	f84e 2b04 	str.w	r2, [lr], #4
 8004828:	1421      	asrs	r1, r4, #16
 800482a:	e7e0      	b.n	80047ee <__mdiff+0xca>
 800482c:	3f01      	subs	r7, #1
 800482e:	e7ea      	b.n	8004806 <__mdiff+0xe2>
 8004830:	08005a63 	.word	0x08005a63
 8004834:	08005a74 	.word	0x08005a74

08004838 <__d2b>:
 8004838:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800483c:	4689      	mov	r9, r1
 800483e:	2101      	movs	r1, #1
 8004840:	ec57 6b10 	vmov	r6, r7, d0
 8004844:	4690      	mov	r8, r2
 8004846:	f7ff fccf 	bl	80041e8 <_Balloc>
 800484a:	4604      	mov	r4, r0
 800484c:	b930      	cbnz	r0, 800485c <__d2b+0x24>
 800484e:	4602      	mov	r2, r0
 8004850:	4b25      	ldr	r3, [pc, #148]	; (80048e8 <__d2b+0xb0>)
 8004852:	4826      	ldr	r0, [pc, #152]	; (80048ec <__d2b+0xb4>)
 8004854:	f240 310a 	movw	r1, #778	; 0x30a
 8004858:	f000 faac 	bl	8004db4 <__assert_func>
 800485c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004860:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004864:	bb35      	cbnz	r5, 80048b4 <__d2b+0x7c>
 8004866:	2e00      	cmp	r6, #0
 8004868:	9301      	str	r3, [sp, #4]
 800486a:	d028      	beq.n	80048be <__d2b+0x86>
 800486c:	4668      	mov	r0, sp
 800486e:	9600      	str	r6, [sp, #0]
 8004870:	f7ff fd82 	bl	8004378 <__lo0bits>
 8004874:	9900      	ldr	r1, [sp, #0]
 8004876:	b300      	cbz	r0, 80048ba <__d2b+0x82>
 8004878:	9a01      	ldr	r2, [sp, #4]
 800487a:	f1c0 0320 	rsb	r3, r0, #32
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	430b      	orrs	r3, r1
 8004884:	40c2      	lsrs	r2, r0
 8004886:	6163      	str	r3, [r4, #20]
 8004888:	9201      	str	r2, [sp, #4]
 800488a:	9b01      	ldr	r3, [sp, #4]
 800488c:	61a3      	str	r3, [r4, #24]
 800488e:	2b00      	cmp	r3, #0
 8004890:	bf14      	ite	ne
 8004892:	2202      	movne	r2, #2
 8004894:	2201      	moveq	r2, #1
 8004896:	6122      	str	r2, [r4, #16]
 8004898:	b1d5      	cbz	r5, 80048d0 <__d2b+0x98>
 800489a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800489e:	4405      	add	r5, r0
 80048a0:	f8c9 5000 	str.w	r5, [r9]
 80048a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80048a8:	f8c8 0000 	str.w	r0, [r8]
 80048ac:	4620      	mov	r0, r4
 80048ae:	b003      	add	sp, #12
 80048b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80048b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048b8:	e7d5      	b.n	8004866 <__d2b+0x2e>
 80048ba:	6161      	str	r1, [r4, #20]
 80048bc:	e7e5      	b.n	800488a <__d2b+0x52>
 80048be:	a801      	add	r0, sp, #4
 80048c0:	f7ff fd5a 	bl	8004378 <__lo0bits>
 80048c4:	9b01      	ldr	r3, [sp, #4]
 80048c6:	6163      	str	r3, [r4, #20]
 80048c8:	2201      	movs	r2, #1
 80048ca:	6122      	str	r2, [r4, #16]
 80048cc:	3020      	adds	r0, #32
 80048ce:	e7e3      	b.n	8004898 <__d2b+0x60>
 80048d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80048d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80048d8:	f8c9 0000 	str.w	r0, [r9]
 80048dc:	6918      	ldr	r0, [r3, #16]
 80048de:	f7ff fd2b 	bl	8004338 <__hi0bits>
 80048e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80048e6:	e7df      	b.n	80048a8 <__d2b+0x70>
 80048e8:	08005a63 	.word	0x08005a63
 80048ec:	08005a74 	.word	0x08005a74

080048f0 <_calloc_r>:
 80048f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048f2:	fba1 2402 	umull	r2, r4, r1, r2
 80048f6:	b94c      	cbnz	r4, 800490c <_calloc_r+0x1c>
 80048f8:	4611      	mov	r1, r2
 80048fa:	9201      	str	r2, [sp, #4]
 80048fc:	f000 f87a 	bl	80049f4 <_malloc_r>
 8004900:	9a01      	ldr	r2, [sp, #4]
 8004902:	4605      	mov	r5, r0
 8004904:	b930      	cbnz	r0, 8004914 <_calloc_r+0x24>
 8004906:	4628      	mov	r0, r5
 8004908:	b003      	add	sp, #12
 800490a:	bd30      	pop	{r4, r5, pc}
 800490c:	220c      	movs	r2, #12
 800490e:	6002      	str	r2, [r0, #0]
 8004910:	2500      	movs	r5, #0
 8004912:	e7f8      	b.n	8004906 <_calloc_r+0x16>
 8004914:	4621      	mov	r1, r4
 8004916:	f7fe f9e7 	bl	8002ce8 <memset>
 800491a:	e7f4      	b.n	8004906 <_calloc_r+0x16>

0800491c <_free_r>:
 800491c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800491e:	2900      	cmp	r1, #0
 8004920:	d044      	beq.n	80049ac <_free_r+0x90>
 8004922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004926:	9001      	str	r0, [sp, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	f1a1 0404 	sub.w	r4, r1, #4
 800492e:	bfb8      	it	lt
 8004930:	18e4      	addlt	r4, r4, r3
 8004932:	f000 fa9b 	bl	8004e6c <__malloc_lock>
 8004936:	4a1e      	ldr	r2, [pc, #120]	; (80049b0 <_free_r+0x94>)
 8004938:	9801      	ldr	r0, [sp, #4]
 800493a:	6813      	ldr	r3, [r2, #0]
 800493c:	b933      	cbnz	r3, 800494c <_free_r+0x30>
 800493e:	6063      	str	r3, [r4, #4]
 8004940:	6014      	str	r4, [r2, #0]
 8004942:	b003      	add	sp, #12
 8004944:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004948:	f000 ba96 	b.w	8004e78 <__malloc_unlock>
 800494c:	42a3      	cmp	r3, r4
 800494e:	d908      	bls.n	8004962 <_free_r+0x46>
 8004950:	6825      	ldr	r5, [r4, #0]
 8004952:	1961      	adds	r1, r4, r5
 8004954:	428b      	cmp	r3, r1
 8004956:	bf01      	itttt	eq
 8004958:	6819      	ldreq	r1, [r3, #0]
 800495a:	685b      	ldreq	r3, [r3, #4]
 800495c:	1949      	addeq	r1, r1, r5
 800495e:	6021      	streq	r1, [r4, #0]
 8004960:	e7ed      	b.n	800493e <_free_r+0x22>
 8004962:	461a      	mov	r2, r3
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	b10b      	cbz	r3, 800496c <_free_r+0x50>
 8004968:	42a3      	cmp	r3, r4
 800496a:	d9fa      	bls.n	8004962 <_free_r+0x46>
 800496c:	6811      	ldr	r1, [r2, #0]
 800496e:	1855      	adds	r5, r2, r1
 8004970:	42a5      	cmp	r5, r4
 8004972:	d10b      	bne.n	800498c <_free_r+0x70>
 8004974:	6824      	ldr	r4, [r4, #0]
 8004976:	4421      	add	r1, r4
 8004978:	1854      	adds	r4, r2, r1
 800497a:	42a3      	cmp	r3, r4
 800497c:	6011      	str	r1, [r2, #0]
 800497e:	d1e0      	bne.n	8004942 <_free_r+0x26>
 8004980:	681c      	ldr	r4, [r3, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	6053      	str	r3, [r2, #4]
 8004986:	4421      	add	r1, r4
 8004988:	6011      	str	r1, [r2, #0]
 800498a:	e7da      	b.n	8004942 <_free_r+0x26>
 800498c:	d902      	bls.n	8004994 <_free_r+0x78>
 800498e:	230c      	movs	r3, #12
 8004990:	6003      	str	r3, [r0, #0]
 8004992:	e7d6      	b.n	8004942 <_free_r+0x26>
 8004994:	6825      	ldr	r5, [r4, #0]
 8004996:	1961      	adds	r1, r4, r5
 8004998:	428b      	cmp	r3, r1
 800499a:	bf04      	itt	eq
 800499c:	6819      	ldreq	r1, [r3, #0]
 800499e:	685b      	ldreq	r3, [r3, #4]
 80049a0:	6063      	str	r3, [r4, #4]
 80049a2:	bf04      	itt	eq
 80049a4:	1949      	addeq	r1, r1, r5
 80049a6:	6021      	streq	r1, [r4, #0]
 80049a8:	6054      	str	r4, [r2, #4]
 80049aa:	e7ca      	b.n	8004942 <_free_r+0x26>
 80049ac:	b003      	add	sp, #12
 80049ae:	bd30      	pop	{r4, r5, pc}
 80049b0:	20000288 	.word	0x20000288

080049b4 <sbrk_aligned>:
 80049b4:	b570      	push	{r4, r5, r6, lr}
 80049b6:	4e0e      	ldr	r6, [pc, #56]	; (80049f0 <sbrk_aligned+0x3c>)
 80049b8:	460c      	mov	r4, r1
 80049ba:	6831      	ldr	r1, [r6, #0]
 80049bc:	4605      	mov	r5, r0
 80049be:	b911      	cbnz	r1, 80049c6 <sbrk_aligned+0x12>
 80049c0:	f000 f9e8 	bl	8004d94 <_sbrk_r>
 80049c4:	6030      	str	r0, [r6, #0]
 80049c6:	4621      	mov	r1, r4
 80049c8:	4628      	mov	r0, r5
 80049ca:	f000 f9e3 	bl	8004d94 <_sbrk_r>
 80049ce:	1c43      	adds	r3, r0, #1
 80049d0:	d00a      	beq.n	80049e8 <sbrk_aligned+0x34>
 80049d2:	1cc4      	adds	r4, r0, #3
 80049d4:	f024 0403 	bic.w	r4, r4, #3
 80049d8:	42a0      	cmp	r0, r4
 80049da:	d007      	beq.n	80049ec <sbrk_aligned+0x38>
 80049dc:	1a21      	subs	r1, r4, r0
 80049de:	4628      	mov	r0, r5
 80049e0:	f000 f9d8 	bl	8004d94 <_sbrk_r>
 80049e4:	3001      	adds	r0, #1
 80049e6:	d101      	bne.n	80049ec <sbrk_aligned+0x38>
 80049e8:	f04f 34ff 	mov.w	r4, #4294967295
 80049ec:	4620      	mov	r0, r4
 80049ee:	bd70      	pop	{r4, r5, r6, pc}
 80049f0:	2000028c 	.word	0x2000028c

080049f4 <_malloc_r>:
 80049f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f8:	1ccd      	adds	r5, r1, #3
 80049fa:	f025 0503 	bic.w	r5, r5, #3
 80049fe:	3508      	adds	r5, #8
 8004a00:	2d0c      	cmp	r5, #12
 8004a02:	bf38      	it	cc
 8004a04:	250c      	movcc	r5, #12
 8004a06:	2d00      	cmp	r5, #0
 8004a08:	4607      	mov	r7, r0
 8004a0a:	db01      	blt.n	8004a10 <_malloc_r+0x1c>
 8004a0c:	42a9      	cmp	r1, r5
 8004a0e:	d905      	bls.n	8004a1c <_malloc_r+0x28>
 8004a10:	230c      	movs	r3, #12
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	2600      	movs	r6, #0
 8004a16:	4630      	mov	r0, r6
 8004a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a1c:	4e2e      	ldr	r6, [pc, #184]	; (8004ad8 <_malloc_r+0xe4>)
 8004a1e:	f000 fa25 	bl	8004e6c <__malloc_lock>
 8004a22:	6833      	ldr	r3, [r6, #0]
 8004a24:	461c      	mov	r4, r3
 8004a26:	bb34      	cbnz	r4, 8004a76 <_malloc_r+0x82>
 8004a28:	4629      	mov	r1, r5
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	f7ff ffc2 	bl	80049b4 <sbrk_aligned>
 8004a30:	1c43      	adds	r3, r0, #1
 8004a32:	4604      	mov	r4, r0
 8004a34:	d14d      	bne.n	8004ad2 <_malloc_r+0xde>
 8004a36:	6834      	ldr	r4, [r6, #0]
 8004a38:	4626      	mov	r6, r4
 8004a3a:	2e00      	cmp	r6, #0
 8004a3c:	d140      	bne.n	8004ac0 <_malloc_r+0xcc>
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	4631      	mov	r1, r6
 8004a42:	4638      	mov	r0, r7
 8004a44:	eb04 0803 	add.w	r8, r4, r3
 8004a48:	f000 f9a4 	bl	8004d94 <_sbrk_r>
 8004a4c:	4580      	cmp	r8, r0
 8004a4e:	d13a      	bne.n	8004ac6 <_malloc_r+0xd2>
 8004a50:	6821      	ldr	r1, [r4, #0]
 8004a52:	3503      	adds	r5, #3
 8004a54:	1a6d      	subs	r5, r5, r1
 8004a56:	f025 0503 	bic.w	r5, r5, #3
 8004a5a:	3508      	adds	r5, #8
 8004a5c:	2d0c      	cmp	r5, #12
 8004a5e:	bf38      	it	cc
 8004a60:	250c      	movcc	r5, #12
 8004a62:	4629      	mov	r1, r5
 8004a64:	4638      	mov	r0, r7
 8004a66:	f7ff ffa5 	bl	80049b4 <sbrk_aligned>
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	d02b      	beq.n	8004ac6 <_malloc_r+0xd2>
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	442b      	add	r3, r5
 8004a72:	6023      	str	r3, [r4, #0]
 8004a74:	e00e      	b.n	8004a94 <_malloc_r+0xa0>
 8004a76:	6822      	ldr	r2, [r4, #0]
 8004a78:	1b52      	subs	r2, r2, r5
 8004a7a:	d41e      	bmi.n	8004aba <_malloc_r+0xc6>
 8004a7c:	2a0b      	cmp	r2, #11
 8004a7e:	d916      	bls.n	8004aae <_malloc_r+0xba>
 8004a80:	1961      	adds	r1, r4, r5
 8004a82:	42a3      	cmp	r3, r4
 8004a84:	6025      	str	r5, [r4, #0]
 8004a86:	bf18      	it	ne
 8004a88:	6059      	strne	r1, [r3, #4]
 8004a8a:	6863      	ldr	r3, [r4, #4]
 8004a8c:	bf08      	it	eq
 8004a8e:	6031      	streq	r1, [r6, #0]
 8004a90:	5162      	str	r2, [r4, r5]
 8004a92:	604b      	str	r3, [r1, #4]
 8004a94:	4638      	mov	r0, r7
 8004a96:	f104 060b 	add.w	r6, r4, #11
 8004a9a:	f000 f9ed 	bl	8004e78 <__malloc_unlock>
 8004a9e:	f026 0607 	bic.w	r6, r6, #7
 8004aa2:	1d23      	adds	r3, r4, #4
 8004aa4:	1af2      	subs	r2, r6, r3
 8004aa6:	d0b6      	beq.n	8004a16 <_malloc_r+0x22>
 8004aa8:	1b9b      	subs	r3, r3, r6
 8004aaa:	50a3      	str	r3, [r4, r2]
 8004aac:	e7b3      	b.n	8004a16 <_malloc_r+0x22>
 8004aae:	6862      	ldr	r2, [r4, #4]
 8004ab0:	42a3      	cmp	r3, r4
 8004ab2:	bf0c      	ite	eq
 8004ab4:	6032      	streq	r2, [r6, #0]
 8004ab6:	605a      	strne	r2, [r3, #4]
 8004ab8:	e7ec      	b.n	8004a94 <_malloc_r+0xa0>
 8004aba:	4623      	mov	r3, r4
 8004abc:	6864      	ldr	r4, [r4, #4]
 8004abe:	e7b2      	b.n	8004a26 <_malloc_r+0x32>
 8004ac0:	4634      	mov	r4, r6
 8004ac2:	6876      	ldr	r6, [r6, #4]
 8004ac4:	e7b9      	b.n	8004a3a <_malloc_r+0x46>
 8004ac6:	230c      	movs	r3, #12
 8004ac8:	603b      	str	r3, [r7, #0]
 8004aca:	4638      	mov	r0, r7
 8004acc:	f000 f9d4 	bl	8004e78 <__malloc_unlock>
 8004ad0:	e7a1      	b.n	8004a16 <_malloc_r+0x22>
 8004ad2:	6025      	str	r5, [r4, #0]
 8004ad4:	e7de      	b.n	8004a94 <_malloc_r+0xa0>
 8004ad6:	bf00      	nop
 8004ad8:	20000288 	.word	0x20000288

08004adc <__ssputs_r>:
 8004adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae0:	688e      	ldr	r6, [r1, #8]
 8004ae2:	429e      	cmp	r6, r3
 8004ae4:	4682      	mov	sl, r0
 8004ae6:	460c      	mov	r4, r1
 8004ae8:	4690      	mov	r8, r2
 8004aea:	461f      	mov	r7, r3
 8004aec:	d838      	bhi.n	8004b60 <__ssputs_r+0x84>
 8004aee:	898a      	ldrh	r2, [r1, #12]
 8004af0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004af4:	d032      	beq.n	8004b5c <__ssputs_r+0x80>
 8004af6:	6825      	ldr	r5, [r4, #0]
 8004af8:	6909      	ldr	r1, [r1, #16]
 8004afa:	eba5 0901 	sub.w	r9, r5, r1
 8004afe:	6965      	ldr	r5, [r4, #20]
 8004b00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b08:	3301      	adds	r3, #1
 8004b0a:	444b      	add	r3, r9
 8004b0c:	106d      	asrs	r5, r5, #1
 8004b0e:	429d      	cmp	r5, r3
 8004b10:	bf38      	it	cc
 8004b12:	461d      	movcc	r5, r3
 8004b14:	0553      	lsls	r3, r2, #21
 8004b16:	d531      	bpl.n	8004b7c <__ssputs_r+0xa0>
 8004b18:	4629      	mov	r1, r5
 8004b1a:	f7ff ff6b 	bl	80049f4 <_malloc_r>
 8004b1e:	4606      	mov	r6, r0
 8004b20:	b950      	cbnz	r0, 8004b38 <__ssputs_r+0x5c>
 8004b22:	230c      	movs	r3, #12
 8004b24:	f8ca 3000 	str.w	r3, [sl]
 8004b28:	89a3      	ldrh	r3, [r4, #12]
 8004b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b2e:	81a3      	strh	r3, [r4, #12]
 8004b30:	f04f 30ff 	mov.w	r0, #4294967295
 8004b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b38:	6921      	ldr	r1, [r4, #16]
 8004b3a:	464a      	mov	r2, r9
 8004b3c:	f7ff fb46 	bl	80041cc <memcpy>
 8004b40:	89a3      	ldrh	r3, [r4, #12]
 8004b42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b4a:	81a3      	strh	r3, [r4, #12]
 8004b4c:	6126      	str	r6, [r4, #16]
 8004b4e:	6165      	str	r5, [r4, #20]
 8004b50:	444e      	add	r6, r9
 8004b52:	eba5 0509 	sub.w	r5, r5, r9
 8004b56:	6026      	str	r6, [r4, #0]
 8004b58:	60a5      	str	r5, [r4, #8]
 8004b5a:	463e      	mov	r6, r7
 8004b5c:	42be      	cmp	r6, r7
 8004b5e:	d900      	bls.n	8004b62 <__ssputs_r+0x86>
 8004b60:	463e      	mov	r6, r7
 8004b62:	6820      	ldr	r0, [r4, #0]
 8004b64:	4632      	mov	r2, r6
 8004b66:	4641      	mov	r1, r8
 8004b68:	f000 f966 	bl	8004e38 <memmove>
 8004b6c:	68a3      	ldr	r3, [r4, #8]
 8004b6e:	1b9b      	subs	r3, r3, r6
 8004b70:	60a3      	str	r3, [r4, #8]
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	4433      	add	r3, r6
 8004b76:	6023      	str	r3, [r4, #0]
 8004b78:	2000      	movs	r0, #0
 8004b7a:	e7db      	b.n	8004b34 <__ssputs_r+0x58>
 8004b7c:	462a      	mov	r2, r5
 8004b7e:	f000 f981 	bl	8004e84 <_realloc_r>
 8004b82:	4606      	mov	r6, r0
 8004b84:	2800      	cmp	r0, #0
 8004b86:	d1e1      	bne.n	8004b4c <__ssputs_r+0x70>
 8004b88:	6921      	ldr	r1, [r4, #16]
 8004b8a:	4650      	mov	r0, sl
 8004b8c:	f7ff fec6 	bl	800491c <_free_r>
 8004b90:	e7c7      	b.n	8004b22 <__ssputs_r+0x46>
	...

08004b94 <_svfiprintf_r>:
 8004b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b98:	4698      	mov	r8, r3
 8004b9a:	898b      	ldrh	r3, [r1, #12]
 8004b9c:	061b      	lsls	r3, r3, #24
 8004b9e:	b09d      	sub	sp, #116	; 0x74
 8004ba0:	4607      	mov	r7, r0
 8004ba2:	460d      	mov	r5, r1
 8004ba4:	4614      	mov	r4, r2
 8004ba6:	d50e      	bpl.n	8004bc6 <_svfiprintf_r+0x32>
 8004ba8:	690b      	ldr	r3, [r1, #16]
 8004baa:	b963      	cbnz	r3, 8004bc6 <_svfiprintf_r+0x32>
 8004bac:	2140      	movs	r1, #64	; 0x40
 8004bae:	f7ff ff21 	bl	80049f4 <_malloc_r>
 8004bb2:	6028      	str	r0, [r5, #0]
 8004bb4:	6128      	str	r0, [r5, #16]
 8004bb6:	b920      	cbnz	r0, 8004bc2 <_svfiprintf_r+0x2e>
 8004bb8:	230c      	movs	r3, #12
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc0:	e0d1      	b.n	8004d66 <_svfiprintf_r+0x1d2>
 8004bc2:	2340      	movs	r3, #64	; 0x40
 8004bc4:	616b      	str	r3, [r5, #20]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8004bca:	2320      	movs	r3, #32
 8004bcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bd4:	2330      	movs	r3, #48	; 0x30
 8004bd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d80 <_svfiprintf_r+0x1ec>
 8004bda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bde:	f04f 0901 	mov.w	r9, #1
 8004be2:	4623      	mov	r3, r4
 8004be4:	469a      	mov	sl, r3
 8004be6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bea:	b10a      	cbz	r2, 8004bf0 <_svfiprintf_r+0x5c>
 8004bec:	2a25      	cmp	r2, #37	; 0x25
 8004bee:	d1f9      	bne.n	8004be4 <_svfiprintf_r+0x50>
 8004bf0:	ebba 0b04 	subs.w	fp, sl, r4
 8004bf4:	d00b      	beq.n	8004c0e <_svfiprintf_r+0x7a>
 8004bf6:	465b      	mov	r3, fp
 8004bf8:	4622      	mov	r2, r4
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	4638      	mov	r0, r7
 8004bfe:	f7ff ff6d 	bl	8004adc <__ssputs_r>
 8004c02:	3001      	adds	r0, #1
 8004c04:	f000 80aa 	beq.w	8004d5c <_svfiprintf_r+0x1c8>
 8004c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c0a:	445a      	add	r2, fp
 8004c0c:	9209      	str	r2, [sp, #36]	; 0x24
 8004c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 80a2 	beq.w	8004d5c <_svfiprintf_r+0x1c8>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c22:	f10a 0a01 	add.w	sl, sl, #1
 8004c26:	9304      	str	r3, [sp, #16]
 8004c28:	9307      	str	r3, [sp, #28]
 8004c2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c2e:	931a      	str	r3, [sp, #104]	; 0x68
 8004c30:	4654      	mov	r4, sl
 8004c32:	2205      	movs	r2, #5
 8004c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c38:	4851      	ldr	r0, [pc, #324]	; (8004d80 <_svfiprintf_r+0x1ec>)
 8004c3a:	f7fb fb09 	bl	8000250 <memchr>
 8004c3e:	9a04      	ldr	r2, [sp, #16]
 8004c40:	b9d8      	cbnz	r0, 8004c7a <_svfiprintf_r+0xe6>
 8004c42:	06d0      	lsls	r0, r2, #27
 8004c44:	bf44      	itt	mi
 8004c46:	2320      	movmi	r3, #32
 8004c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c4c:	0711      	lsls	r1, r2, #28
 8004c4e:	bf44      	itt	mi
 8004c50:	232b      	movmi	r3, #43	; 0x2b
 8004c52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c56:	f89a 3000 	ldrb.w	r3, [sl]
 8004c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c5c:	d015      	beq.n	8004c8a <_svfiprintf_r+0xf6>
 8004c5e:	9a07      	ldr	r2, [sp, #28]
 8004c60:	4654      	mov	r4, sl
 8004c62:	2000      	movs	r0, #0
 8004c64:	f04f 0c0a 	mov.w	ip, #10
 8004c68:	4621      	mov	r1, r4
 8004c6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c6e:	3b30      	subs	r3, #48	; 0x30
 8004c70:	2b09      	cmp	r3, #9
 8004c72:	d94e      	bls.n	8004d12 <_svfiprintf_r+0x17e>
 8004c74:	b1b0      	cbz	r0, 8004ca4 <_svfiprintf_r+0x110>
 8004c76:	9207      	str	r2, [sp, #28]
 8004c78:	e014      	b.n	8004ca4 <_svfiprintf_r+0x110>
 8004c7a:	eba0 0308 	sub.w	r3, r0, r8
 8004c7e:	fa09 f303 	lsl.w	r3, r9, r3
 8004c82:	4313      	orrs	r3, r2
 8004c84:	9304      	str	r3, [sp, #16]
 8004c86:	46a2      	mov	sl, r4
 8004c88:	e7d2      	b.n	8004c30 <_svfiprintf_r+0x9c>
 8004c8a:	9b03      	ldr	r3, [sp, #12]
 8004c8c:	1d19      	adds	r1, r3, #4
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	9103      	str	r1, [sp, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	bfbb      	ittet	lt
 8004c96:	425b      	neglt	r3, r3
 8004c98:	f042 0202 	orrlt.w	r2, r2, #2
 8004c9c:	9307      	strge	r3, [sp, #28]
 8004c9e:	9307      	strlt	r3, [sp, #28]
 8004ca0:	bfb8      	it	lt
 8004ca2:	9204      	strlt	r2, [sp, #16]
 8004ca4:	7823      	ldrb	r3, [r4, #0]
 8004ca6:	2b2e      	cmp	r3, #46	; 0x2e
 8004ca8:	d10c      	bne.n	8004cc4 <_svfiprintf_r+0x130>
 8004caa:	7863      	ldrb	r3, [r4, #1]
 8004cac:	2b2a      	cmp	r3, #42	; 0x2a
 8004cae:	d135      	bne.n	8004d1c <_svfiprintf_r+0x188>
 8004cb0:	9b03      	ldr	r3, [sp, #12]
 8004cb2:	1d1a      	adds	r2, r3, #4
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	9203      	str	r2, [sp, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	bfb8      	it	lt
 8004cbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004cc0:	3402      	adds	r4, #2
 8004cc2:	9305      	str	r3, [sp, #20]
 8004cc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d90 <_svfiprintf_r+0x1fc>
 8004cc8:	7821      	ldrb	r1, [r4, #0]
 8004cca:	2203      	movs	r2, #3
 8004ccc:	4650      	mov	r0, sl
 8004cce:	f7fb fabf 	bl	8000250 <memchr>
 8004cd2:	b140      	cbz	r0, 8004ce6 <_svfiprintf_r+0x152>
 8004cd4:	2340      	movs	r3, #64	; 0x40
 8004cd6:	eba0 000a 	sub.w	r0, r0, sl
 8004cda:	fa03 f000 	lsl.w	r0, r3, r0
 8004cde:	9b04      	ldr	r3, [sp, #16]
 8004ce0:	4303      	orrs	r3, r0
 8004ce2:	3401      	adds	r4, #1
 8004ce4:	9304      	str	r3, [sp, #16]
 8004ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cea:	4826      	ldr	r0, [pc, #152]	; (8004d84 <_svfiprintf_r+0x1f0>)
 8004cec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cf0:	2206      	movs	r2, #6
 8004cf2:	f7fb faad 	bl	8000250 <memchr>
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	d038      	beq.n	8004d6c <_svfiprintf_r+0x1d8>
 8004cfa:	4b23      	ldr	r3, [pc, #140]	; (8004d88 <_svfiprintf_r+0x1f4>)
 8004cfc:	bb1b      	cbnz	r3, 8004d46 <_svfiprintf_r+0x1b2>
 8004cfe:	9b03      	ldr	r3, [sp, #12]
 8004d00:	3307      	adds	r3, #7
 8004d02:	f023 0307 	bic.w	r3, r3, #7
 8004d06:	3308      	adds	r3, #8
 8004d08:	9303      	str	r3, [sp, #12]
 8004d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d0c:	4433      	add	r3, r6
 8004d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d10:	e767      	b.n	8004be2 <_svfiprintf_r+0x4e>
 8004d12:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d16:	460c      	mov	r4, r1
 8004d18:	2001      	movs	r0, #1
 8004d1a:	e7a5      	b.n	8004c68 <_svfiprintf_r+0xd4>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	3401      	adds	r4, #1
 8004d20:	9305      	str	r3, [sp, #20]
 8004d22:	4619      	mov	r1, r3
 8004d24:	f04f 0c0a 	mov.w	ip, #10
 8004d28:	4620      	mov	r0, r4
 8004d2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d2e:	3a30      	subs	r2, #48	; 0x30
 8004d30:	2a09      	cmp	r2, #9
 8004d32:	d903      	bls.n	8004d3c <_svfiprintf_r+0x1a8>
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0c5      	beq.n	8004cc4 <_svfiprintf_r+0x130>
 8004d38:	9105      	str	r1, [sp, #20]
 8004d3a:	e7c3      	b.n	8004cc4 <_svfiprintf_r+0x130>
 8004d3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d40:	4604      	mov	r4, r0
 8004d42:	2301      	movs	r3, #1
 8004d44:	e7f0      	b.n	8004d28 <_svfiprintf_r+0x194>
 8004d46:	ab03      	add	r3, sp, #12
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	462a      	mov	r2, r5
 8004d4c:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <_svfiprintf_r+0x1f8>)
 8004d4e:	a904      	add	r1, sp, #16
 8004d50:	4638      	mov	r0, r7
 8004d52:	f7fe f861 	bl	8002e18 <_printf_float>
 8004d56:	1c42      	adds	r2, r0, #1
 8004d58:	4606      	mov	r6, r0
 8004d5a:	d1d6      	bne.n	8004d0a <_svfiprintf_r+0x176>
 8004d5c:	89ab      	ldrh	r3, [r5, #12]
 8004d5e:	065b      	lsls	r3, r3, #25
 8004d60:	f53f af2c 	bmi.w	8004bbc <_svfiprintf_r+0x28>
 8004d64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d66:	b01d      	add	sp, #116	; 0x74
 8004d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d6c:	ab03      	add	r3, sp, #12
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	462a      	mov	r2, r5
 8004d72:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <_svfiprintf_r+0x1f8>)
 8004d74:	a904      	add	r1, sp, #16
 8004d76:	4638      	mov	r0, r7
 8004d78:	f7fe fada 	bl	8003330 <_printf_i>
 8004d7c:	e7eb      	b.n	8004d56 <_svfiprintf_r+0x1c2>
 8004d7e:	bf00      	nop
 8004d80:	08005bcc 	.word	0x08005bcc
 8004d84:	08005bd6 	.word	0x08005bd6
 8004d88:	08002e19 	.word	0x08002e19
 8004d8c:	08004add 	.word	0x08004add
 8004d90:	08005bd2 	.word	0x08005bd2

08004d94 <_sbrk_r>:
 8004d94:	b538      	push	{r3, r4, r5, lr}
 8004d96:	4d06      	ldr	r5, [pc, #24]	; (8004db0 <_sbrk_r+0x1c>)
 8004d98:	2300      	movs	r3, #0
 8004d9a:	4604      	mov	r4, r0
 8004d9c:	4608      	mov	r0, r1
 8004d9e:	602b      	str	r3, [r5, #0]
 8004da0:	f7fb fe4c 	bl	8000a3c <_sbrk>
 8004da4:	1c43      	adds	r3, r0, #1
 8004da6:	d102      	bne.n	8004dae <_sbrk_r+0x1a>
 8004da8:	682b      	ldr	r3, [r5, #0]
 8004daa:	b103      	cbz	r3, 8004dae <_sbrk_r+0x1a>
 8004dac:	6023      	str	r3, [r4, #0]
 8004dae:	bd38      	pop	{r3, r4, r5, pc}
 8004db0:	20000290 	.word	0x20000290

08004db4 <__assert_func>:
 8004db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004db6:	4614      	mov	r4, r2
 8004db8:	461a      	mov	r2, r3
 8004dba:	4b09      	ldr	r3, [pc, #36]	; (8004de0 <__assert_func+0x2c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4605      	mov	r5, r0
 8004dc0:	68d8      	ldr	r0, [r3, #12]
 8004dc2:	b14c      	cbz	r4, 8004dd8 <__assert_func+0x24>
 8004dc4:	4b07      	ldr	r3, [pc, #28]	; (8004de4 <__assert_func+0x30>)
 8004dc6:	9100      	str	r1, [sp, #0]
 8004dc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004dcc:	4906      	ldr	r1, [pc, #24]	; (8004de8 <__assert_func+0x34>)
 8004dce:	462b      	mov	r3, r5
 8004dd0:	f000 f80e 	bl	8004df0 <fiprintf>
 8004dd4:	f000 faac 	bl	8005330 <abort>
 8004dd8:	4b04      	ldr	r3, [pc, #16]	; (8004dec <__assert_func+0x38>)
 8004dda:	461c      	mov	r4, r3
 8004ddc:	e7f3      	b.n	8004dc6 <__assert_func+0x12>
 8004dde:	bf00      	nop
 8004de0:	2000000c 	.word	0x2000000c
 8004de4:	08005bdd 	.word	0x08005bdd
 8004de8:	08005bea 	.word	0x08005bea
 8004dec:	08005c18 	.word	0x08005c18

08004df0 <fiprintf>:
 8004df0:	b40e      	push	{r1, r2, r3}
 8004df2:	b503      	push	{r0, r1, lr}
 8004df4:	4601      	mov	r1, r0
 8004df6:	ab03      	add	r3, sp, #12
 8004df8:	4805      	ldr	r0, [pc, #20]	; (8004e10 <fiprintf+0x20>)
 8004dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dfe:	6800      	ldr	r0, [r0, #0]
 8004e00:	9301      	str	r3, [sp, #4]
 8004e02:	f000 f897 	bl	8004f34 <_vfiprintf_r>
 8004e06:	b002      	add	sp, #8
 8004e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e0c:	b003      	add	sp, #12
 8004e0e:	4770      	bx	lr
 8004e10:	2000000c 	.word	0x2000000c

08004e14 <__ascii_mbtowc>:
 8004e14:	b082      	sub	sp, #8
 8004e16:	b901      	cbnz	r1, 8004e1a <__ascii_mbtowc+0x6>
 8004e18:	a901      	add	r1, sp, #4
 8004e1a:	b142      	cbz	r2, 8004e2e <__ascii_mbtowc+0x1a>
 8004e1c:	b14b      	cbz	r3, 8004e32 <__ascii_mbtowc+0x1e>
 8004e1e:	7813      	ldrb	r3, [r2, #0]
 8004e20:	600b      	str	r3, [r1, #0]
 8004e22:	7812      	ldrb	r2, [r2, #0]
 8004e24:	1e10      	subs	r0, r2, #0
 8004e26:	bf18      	it	ne
 8004e28:	2001      	movne	r0, #1
 8004e2a:	b002      	add	sp, #8
 8004e2c:	4770      	bx	lr
 8004e2e:	4610      	mov	r0, r2
 8004e30:	e7fb      	b.n	8004e2a <__ascii_mbtowc+0x16>
 8004e32:	f06f 0001 	mvn.w	r0, #1
 8004e36:	e7f8      	b.n	8004e2a <__ascii_mbtowc+0x16>

08004e38 <memmove>:
 8004e38:	4288      	cmp	r0, r1
 8004e3a:	b510      	push	{r4, lr}
 8004e3c:	eb01 0402 	add.w	r4, r1, r2
 8004e40:	d902      	bls.n	8004e48 <memmove+0x10>
 8004e42:	4284      	cmp	r4, r0
 8004e44:	4623      	mov	r3, r4
 8004e46:	d807      	bhi.n	8004e58 <memmove+0x20>
 8004e48:	1e43      	subs	r3, r0, #1
 8004e4a:	42a1      	cmp	r1, r4
 8004e4c:	d008      	beq.n	8004e60 <memmove+0x28>
 8004e4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e56:	e7f8      	b.n	8004e4a <memmove+0x12>
 8004e58:	4402      	add	r2, r0
 8004e5a:	4601      	mov	r1, r0
 8004e5c:	428a      	cmp	r2, r1
 8004e5e:	d100      	bne.n	8004e62 <memmove+0x2a>
 8004e60:	bd10      	pop	{r4, pc}
 8004e62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e6a:	e7f7      	b.n	8004e5c <memmove+0x24>

08004e6c <__malloc_lock>:
 8004e6c:	4801      	ldr	r0, [pc, #4]	; (8004e74 <__malloc_lock+0x8>)
 8004e6e:	f000 bc1f 	b.w	80056b0 <__retarget_lock_acquire_recursive>
 8004e72:	bf00      	nop
 8004e74:	20000294 	.word	0x20000294

08004e78 <__malloc_unlock>:
 8004e78:	4801      	ldr	r0, [pc, #4]	; (8004e80 <__malloc_unlock+0x8>)
 8004e7a:	f000 bc1a 	b.w	80056b2 <__retarget_lock_release_recursive>
 8004e7e:	bf00      	nop
 8004e80:	20000294 	.word	0x20000294

08004e84 <_realloc_r>:
 8004e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e88:	4680      	mov	r8, r0
 8004e8a:	4614      	mov	r4, r2
 8004e8c:	460e      	mov	r6, r1
 8004e8e:	b921      	cbnz	r1, 8004e9a <_realloc_r+0x16>
 8004e90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e94:	4611      	mov	r1, r2
 8004e96:	f7ff bdad 	b.w	80049f4 <_malloc_r>
 8004e9a:	b92a      	cbnz	r2, 8004ea8 <_realloc_r+0x24>
 8004e9c:	f7ff fd3e 	bl	800491c <_free_r>
 8004ea0:	4625      	mov	r5, r4
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea8:	f000 fc6a 	bl	8005780 <_malloc_usable_size_r>
 8004eac:	4284      	cmp	r4, r0
 8004eae:	4607      	mov	r7, r0
 8004eb0:	d802      	bhi.n	8004eb8 <_realloc_r+0x34>
 8004eb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004eb6:	d812      	bhi.n	8004ede <_realloc_r+0x5a>
 8004eb8:	4621      	mov	r1, r4
 8004eba:	4640      	mov	r0, r8
 8004ebc:	f7ff fd9a 	bl	80049f4 <_malloc_r>
 8004ec0:	4605      	mov	r5, r0
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	d0ed      	beq.n	8004ea2 <_realloc_r+0x1e>
 8004ec6:	42bc      	cmp	r4, r7
 8004ec8:	4622      	mov	r2, r4
 8004eca:	4631      	mov	r1, r6
 8004ecc:	bf28      	it	cs
 8004ece:	463a      	movcs	r2, r7
 8004ed0:	f7ff f97c 	bl	80041cc <memcpy>
 8004ed4:	4631      	mov	r1, r6
 8004ed6:	4640      	mov	r0, r8
 8004ed8:	f7ff fd20 	bl	800491c <_free_r>
 8004edc:	e7e1      	b.n	8004ea2 <_realloc_r+0x1e>
 8004ede:	4635      	mov	r5, r6
 8004ee0:	e7df      	b.n	8004ea2 <_realloc_r+0x1e>

08004ee2 <__sfputc_r>:
 8004ee2:	6893      	ldr	r3, [r2, #8]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	b410      	push	{r4}
 8004eea:	6093      	str	r3, [r2, #8]
 8004eec:	da08      	bge.n	8004f00 <__sfputc_r+0x1e>
 8004eee:	6994      	ldr	r4, [r2, #24]
 8004ef0:	42a3      	cmp	r3, r4
 8004ef2:	db01      	blt.n	8004ef8 <__sfputc_r+0x16>
 8004ef4:	290a      	cmp	r1, #10
 8004ef6:	d103      	bne.n	8004f00 <__sfputc_r+0x1e>
 8004ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004efc:	f000 b94a 	b.w	8005194 <__swbuf_r>
 8004f00:	6813      	ldr	r3, [r2, #0]
 8004f02:	1c58      	adds	r0, r3, #1
 8004f04:	6010      	str	r0, [r2, #0]
 8004f06:	7019      	strb	r1, [r3, #0]
 8004f08:	4608      	mov	r0, r1
 8004f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <__sfputs_r>:
 8004f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f12:	4606      	mov	r6, r0
 8004f14:	460f      	mov	r7, r1
 8004f16:	4614      	mov	r4, r2
 8004f18:	18d5      	adds	r5, r2, r3
 8004f1a:	42ac      	cmp	r4, r5
 8004f1c:	d101      	bne.n	8004f22 <__sfputs_r+0x12>
 8004f1e:	2000      	movs	r0, #0
 8004f20:	e007      	b.n	8004f32 <__sfputs_r+0x22>
 8004f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f26:	463a      	mov	r2, r7
 8004f28:	4630      	mov	r0, r6
 8004f2a:	f7ff ffda 	bl	8004ee2 <__sfputc_r>
 8004f2e:	1c43      	adds	r3, r0, #1
 8004f30:	d1f3      	bne.n	8004f1a <__sfputs_r+0xa>
 8004f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004f34 <_vfiprintf_r>:
 8004f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f38:	460d      	mov	r5, r1
 8004f3a:	b09d      	sub	sp, #116	; 0x74
 8004f3c:	4614      	mov	r4, r2
 8004f3e:	4698      	mov	r8, r3
 8004f40:	4606      	mov	r6, r0
 8004f42:	b118      	cbz	r0, 8004f4c <_vfiprintf_r+0x18>
 8004f44:	6983      	ldr	r3, [r0, #24]
 8004f46:	b90b      	cbnz	r3, 8004f4c <_vfiprintf_r+0x18>
 8004f48:	f000 fb14 	bl	8005574 <__sinit>
 8004f4c:	4b89      	ldr	r3, [pc, #548]	; (8005174 <_vfiprintf_r+0x240>)
 8004f4e:	429d      	cmp	r5, r3
 8004f50:	d11b      	bne.n	8004f8a <_vfiprintf_r+0x56>
 8004f52:	6875      	ldr	r5, [r6, #4]
 8004f54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f56:	07d9      	lsls	r1, r3, #31
 8004f58:	d405      	bmi.n	8004f66 <_vfiprintf_r+0x32>
 8004f5a:	89ab      	ldrh	r3, [r5, #12]
 8004f5c:	059a      	lsls	r2, r3, #22
 8004f5e:	d402      	bmi.n	8004f66 <_vfiprintf_r+0x32>
 8004f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f62:	f000 fba5 	bl	80056b0 <__retarget_lock_acquire_recursive>
 8004f66:	89ab      	ldrh	r3, [r5, #12]
 8004f68:	071b      	lsls	r3, r3, #28
 8004f6a:	d501      	bpl.n	8004f70 <_vfiprintf_r+0x3c>
 8004f6c:	692b      	ldr	r3, [r5, #16]
 8004f6e:	b9eb      	cbnz	r3, 8004fac <_vfiprintf_r+0x78>
 8004f70:	4629      	mov	r1, r5
 8004f72:	4630      	mov	r0, r6
 8004f74:	f000 f96e 	bl	8005254 <__swsetup_r>
 8004f78:	b1c0      	cbz	r0, 8004fac <_vfiprintf_r+0x78>
 8004f7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f7c:	07dc      	lsls	r4, r3, #31
 8004f7e:	d50e      	bpl.n	8004f9e <_vfiprintf_r+0x6a>
 8004f80:	f04f 30ff 	mov.w	r0, #4294967295
 8004f84:	b01d      	add	sp, #116	; 0x74
 8004f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f8a:	4b7b      	ldr	r3, [pc, #492]	; (8005178 <_vfiprintf_r+0x244>)
 8004f8c:	429d      	cmp	r5, r3
 8004f8e:	d101      	bne.n	8004f94 <_vfiprintf_r+0x60>
 8004f90:	68b5      	ldr	r5, [r6, #8]
 8004f92:	e7df      	b.n	8004f54 <_vfiprintf_r+0x20>
 8004f94:	4b79      	ldr	r3, [pc, #484]	; (800517c <_vfiprintf_r+0x248>)
 8004f96:	429d      	cmp	r5, r3
 8004f98:	bf08      	it	eq
 8004f9a:	68f5      	ldreq	r5, [r6, #12]
 8004f9c:	e7da      	b.n	8004f54 <_vfiprintf_r+0x20>
 8004f9e:	89ab      	ldrh	r3, [r5, #12]
 8004fa0:	0598      	lsls	r0, r3, #22
 8004fa2:	d4ed      	bmi.n	8004f80 <_vfiprintf_r+0x4c>
 8004fa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fa6:	f000 fb84 	bl	80056b2 <__retarget_lock_release_recursive>
 8004faa:	e7e9      	b.n	8004f80 <_vfiprintf_r+0x4c>
 8004fac:	2300      	movs	r3, #0
 8004fae:	9309      	str	r3, [sp, #36]	; 0x24
 8004fb0:	2320      	movs	r3, #32
 8004fb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fba:	2330      	movs	r3, #48	; 0x30
 8004fbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005180 <_vfiprintf_r+0x24c>
 8004fc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fc4:	f04f 0901 	mov.w	r9, #1
 8004fc8:	4623      	mov	r3, r4
 8004fca:	469a      	mov	sl, r3
 8004fcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fd0:	b10a      	cbz	r2, 8004fd6 <_vfiprintf_r+0xa2>
 8004fd2:	2a25      	cmp	r2, #37	; 0x25
 8004fd4:	d1f9      	bne.n	8004fca <_vfiprintf_r+0x96>
 8004fd6:	ebba 0b04 	subs.w	fp, sl, r4
 8004fda:	d00b      	beq.n	8004ff4 <_vfiprintf_r+0xc0>
 8004fdc:	465b      	mov	r3, fp
 8004fde:	4622      	mov	r2, r4
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	4630      	mov	r0, r6
 8004fe4:	f7ff ff94 	bl	8004f10 <__sfputs_r>
 8004fe8:	3001      	adds	r0, #1
 8004fea:	f000 80aa 	beq.w	8005142 <_vfiprintf_r+0x20e>
 8004fee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ff0:	445a      	add	r2, fp
 8004ff2:	9209      	str	r2, [sp, #36]	; 0x24
 8004ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 80a2 	beq.w	8005142 <_vfiprintf_r+0x20e>
 8004ffe:	2300      	movs	r3, #0
 8005000:	f04f 32ff 	mov.w	r2, #4294967295
 8005004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005008:	f10a 0a01 	add.w	sl, sl, #1
 800500c:	9304      	str	r3, [sp, #16]
 800500e:	9307      	str	r3, [sp, #28]
 8005010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005014:	931a      	str	r3, [sp, #104]	; 0x68
 8005016:	4654      	mov	r4, sl
 8005018:	2205      	movs	r2, #5
 800501a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800501e:	4858      	ldr	r0, [pc, #352]	; (8005180 <_vfiprintf_r+0x24c>)
 8005020:	f7fb f916 	bl	8000250 <memchr>
 8005024:	9a04      	ldr	r2, [sp, #16]
 8005026:	b9d8      	cbnz	r0, 8005060 <_vfiprintf_r+0x12c>
 8005028:	06d1      	lsls	r1, r2, #27
 800502a:	bf44      	itt	mi
 800502c:	2320      	movmi	r3, #32
 800502e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005032:	0713      	lsls	r3, r2, #28
 8005034:	bf44      	itt	mi
 8005036:	232b      	movmi	r3, #43	; 0x2b
 8005038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800503c:	f89a 3000 	ldrb.w	r3, [sl]
 8005040:	2b2a      	cmp	r3, #42	; 0x2a
 8005042:	d015      	beq.n	8005070 <_vfiprintf_r+0x13c>
 8005044:	9a07      	ldr	r2, [sp, #28]
 8005046:	4654      	mov	r4, sl
 8005048:	2000      	movs	r0, #0
 800504a:	f04f 0c0a 	mov.w	ip, #10
 800504e:	4621      	mov	r1, r4
 8005050:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005054:	3b30      	subs	r3, #48	; 0x30
 8005056:	2b09      	cmp	r3, #9
 8005058:	d94e      	bls.n	80050f8 <_vfiprintf_r+0x1c4>
 800505a:	b1b0      	cbz	r0, 800508a <_vfiprintf_r+0x156>
 800505c:	9207      	str	r2, [sp, #28]
 800505e:	e014      	b.n	800508a <_vfiprintf_r+0x156>
 8005060:	eba0 0308 	sub.w	r3, r0, r8
 8005064:	fa09 f303 	lsl.w	r3, r9, r3
 8005068:	4313      	orrs	r3, r2
 800506a:	9304      	str	r3, [sp, #16]
 800506c:	46a2      	mov	sl, r4
 800506e:	e7d2      	b.n	8005016 <_vfiprintf_r+0xe2>
 8005070:	9b03      	ldr	r3, [sp, #12]
 8005072:	1d19      	adds	r1, r3, #4
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	9103      	str	r1, [sp, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	bfbb      	ittet	lt
 800507c:	425b      	neglt	r3, r3
 800507e:	f042 0202 	orrlt.w	r2, r2, #2
 8005082:	9307      	strge	r3, [sp, #28]
 8005084:	9307      	strlt	r3, [sp, #28]
 8005086:	bfb8      	it	lt
 8005088:	9204      	strlt	r2, [sp, #16]
 800508a:	7823      	ldrb	r3, [r4, #0]
 800508c:	2b2e      	cmp	r3, #46	; 0x2e
 800508e:	d10c      	bne.n	80050aa <_vfiprintf_r+0x176>
 8005090:	7863      	ldrb	r3, [r4, #1]
 8005092:	2b2a      	cmp	r3, #42	; 0x2a
 8005094:	d135      	bne.n	8005102 <_vfiprintf_r+0x1ce>
 8005096:	9b03      	ldr	r3, [sp, #12]
 8005098:	1d1a      	adds	r2, r3, #4
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	9203      	str	r2, [sp, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	bfb8      	it	lt
 80050a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80050a6:	3402      	adds	r4, #2
 80050a8:	9305      	str	r3, [sp, #20]
 80050aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005190 <_vfiprintf_r+0x25c>
 80050ae:	7821      	ldrb	r1, [r4, #0]
 80050b0:	2203      	movs	r2, #3
 80050b2:	4650      	mov	r0, sl
 80050b4:	f7fb f8cc 	bl	8000250 <memchr>
 80050b8:	b140      	cbz	r0, 80050cc <_vfiprintf_r+0x198>
 80050ba:	2340      	movs	r3, #64	; 0x40
 80050bc:	eba0 000a 	sub.w	r0, r0, sl
 80050c0:	fa03 f000 	lsl.w	r0, r3, r0
 80050c4:	9b04      	ldr	r3, [sp, #16]
 80050c6:	4303      	orrs	r3, r0
 80050c8:	3401      	adds	r4, #1
 80050ca:	9304      	str	r3, [sp, #16]
 80050cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050d0:	482c      	ldr	r0, [pc, #176]	; (8005184 <_vfiprintf_r+0x250>)
 80050d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050d6:	2206      	movs	r2, #6
 80050d8:	f7fb f8ba 	bl	8000250 <memchr>
 80050dc:	2800      	cmp	r0, #0
 80050de:	d03f      	beq.n	8005160 <_vfiprintf_r+0x22c>
 80050e0:	4b29      	ldr	r3, [pc, #164]	; (8005188 <_vfiprintf_r+0x254>)
 80050e2:	bb1b      	cbnz	r3, 800512c <_vfiprintf_r+0x1f8>
 80050e4:	9b03      	ldr	r3, [sp, #12]
 80050e6:	3307      	adds	r3, #7
 80050e8:	f023 0307 	bic.w	r3, r3, #7
 80050ec:	3308      	adds	r3, #8
 80050ee:	9303      	str	r3, [sp, #12]
 80050f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050f2:	443b      	add	r3, r7
 80050f4:	9309      	str	r3, [sp, #36]	; 0x24
 80050f6:	e767      	b.n	8004fc8 <_vfiprintf_r+0x94>
 80050f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80050fc:	460c      	mov	r4, r1
 80050fe:	2001      	movs	r0, #1
 8005100:	e7a5      	b.n	800504e <_vfiprintf_r+0x11a>
 8005102:	2300      	movs	r3, #0
 8005104:	3401      	adds	r4, #1
 8005106:	9305      	str	r3, [sp, #20]
 8005108:	4619      	mov	r1, r3
 800510a:	f04f 0c0a 	mov.w	ip, #10
 800510e:	4620      	mov	r0, r4
 8005110:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005114:	3a30      	subs	r2, #48	; 0x30
 8005116:	2a09      	cmp	r2, #9
 8005118:	d903      	bls.n	8005122 <_vfiprintf_r+0x1ee>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0c5      	beq.n	80050aa <_vfiprintf_r+0x176>
 800511e:	9105      	str	r1, [sp, #20]
 8005120:	e7c3      	b.n	80050aa <_vfiprintf_r+0x176>
 8005122:	fb0c 2101 	mla	r1, ip, r1, r2
 8005126:	4604      	mov	r4, r0
 8005128:	2301      	movs	r3, #1
 800512a:	e7f0      	b.n	800510e <_vfiprintf_r+0x1da>
 800512c:	ab03      	add	r3, sp, #12
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	462a      	mov	r2, r5
 8005132:	4b16      	ldr	r3, [pc, #88]	; (800518c <_vfiprintf_r+0x258>)
 8005134:	a904      	add	r1, sp, #16
 8005136:	4630      	mov	r0, r6
 8005138:	f7fd fe6e 	bl	8002e18 <_printf_float>
 800513c:	4607      	mov	r7, r0
 800513e:	1c78      	adds	r0, r7, #1
 8005140:	d1d6      	bne.n	80050f0 <_vfiprintf_r+0x1bc>
 8005142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005144:	07d9      	lsls	r1, r3, #31
 8005146:	d405      	bmi.n	8005154 <_vfiprintf_r+0x220>
 8005148:	89ab      	ldrh	r3, [r5, #12]
 800514a:	059a      	lsls	r2, r3, #22
 800514c:	d402      	bmi.n	8005154 <_vfiprintf_r+0x220>
 800514e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005150:	f000 faaf 	bl	80056b2 <__retarget_lock_release_recursive>
 8005154:	89ab      	ldrh	r3, [r5, #12]
 8005156:	065b      	lsls	r3, r3, #25
 8005158:	f53f af12 	bmi.w	8004f80 <_vfiprintf_r+0x4c>
 800515c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800515e:	e711      	b.n	8004f84 <_vfiprintf_r+0x50>
 8005160:	ab03      	add	r3, sp, #12
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	462a      	mov	r2, r5
 8005166:	4b09      	ldr	r3, [pc, #36]	; (800518c <_vfiprintf_r+0x258>)
 8005168:	a904      	add	r1, sp, #16
 800516a:	4630      	mov	r0, r6
 800516c:	f7fe f8e0 	bl	8003330 <_printf_i>
 8005170:	e7e4      	b.n	800513c <_vfiprintf_r+0x208>
 8005172:	bf00      	nop
 8005174:	08005d44 	.word	0x08005d44
 8005178:	08005d64 	.word	0x08005d64
 800517c:	08005d24 	.word	0x08005d24
 8005180:	08005bcc 	.word	0x08005bcc
 8005184:	08005bd6 	.word	0x08005bd6
 8005188:	08002e19 	.word	0x08002e19
 800518c:	08004f11 	.word	0x08004f11
 8005190:	08005bd2 	.word	0x08005bd2

08005194 <__swbuf_r>:
 8005194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005196:	460e      	mov	r6, r1
 8005198:	4614      	mov	r4, r2
 800519a:	4605      	mov	r5, r0
 800519c:	b118      	cbz	r0, 80051a6 <__swbuf_r+0x12>
 800519e:	6983      	ldr	r3, [r0, #24]
 80051a0:	b90b      	cbnz	r3, 80051a6 <__swbuf_r+0x12>
 80051a2:	f000 f9e7 	bl	8005574 <__sinit>
 80051a6:	4b21      	ldr	r3, [pc, #132]	; (800522c <__swbuf_r+0x98>)
 80051a8:	429c      	cmp	r4, r3
 80051aa:	d12b      	bne.n	8005204 <__swbuf_r+0x70>
 80051ac:	686c      	ldr	r4, [r5, #4]
 80051ae:	69a3      	ldr	r3, [r4, #24]
 80051b0:	60a3      	str	r3, [r4, #8]
 80051b2:	89a3      	ldrh	r3, [r4, #12]
 80051b4:	071a      	lsls	r2, r3, #28
 80051b6:	d52f      	bpl.n	8005218 <__swbuf_r+0x84>
 80051b8:	6923      	ldr	r3, [r4, #16]
 80051ba:	b36b      	cbz	r3, 8005218 <__swbuf_r+0x84>
 80051bc:	6923      	ldr	r3, [r4, #16]
 80051be:	6820      	ldr	r0, [r4, #0]
 80051c0:	1ac0      	subs	r0, r0, r3
 80051c2:	6963      	ldr	r3, [r4, #20]
 80051c4:	b2f6      	uxtb	r6, r6
 80051c6:	4283      	cmp	r3, r0
 80051c8:	4637      	mov	r7, r6
 80051ca:	dc04      	bgt.n	80051d6 <__swbuf_r+0x42>
 80051cc:	4621      	mov	r1, r4
 80051ce:	4628      	mov	r0, r5
 80051d0:	f000 f93c 	bl	800544c <_fflush_r>
 80051d4:	bb30      	cbnz	r0, 8005224 <__swbuf_r+0x90>
 80051d6:	68a3      	ldr	r3, [r4, #8]
 80051d8:	3b01      	subs	r3, #1
 80051da:	60a3      	str	r3, [r4, #8]
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	6022      	str	r2, [r4, #0]
 80051e2:	701e      	strb	r6, [r3, #0]
 80051e4:	6963      	ldr	r3, [r4, #20]
 80051e6:	3001      	adds	r0, #1
 80051e8:	4283      	cmp	r3, r0
 80051ea:	d004      	beq.n	80051f6 <__swbuf_r+0x62>
 80051ec:	89a3      	ldrh	r3, [r4, #12]
 80051ee:	07db      	lsls	r3, r3, #31
 80051f0:	d506      	bpl.n	8005200 <__swbuf_r+0x6c>
 80051f2:	2e0a      	cmp	r6, #10
 80051f4:	d104      	bne.n	8005200 <__swbuf_r+0x6c>
 80051f6:	4621      	mov	r1, r4
 80051f8:	4628      	mov	r0, r5
 80051fa:	f000 f927 	bl	800544c <_fflush_r>
 80051fe:	b988      	cbnz	r0, 8005224 <__swbuf_r+0x90>
 8005200:	4638      	mov	r0, r7
 8005202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005204:	4b0a      	ldr	r3, [pc, #40]	; (8005230 <__swbuf_r+0x9c>)
 8005206:	429c      	cmp	r4, r3
 8005208:	d101      	bne.n	800520e <__swbuf_r+0x7a>
 800520a:	68ac      	ldr	r4, [r5, #8]
 800520c:	e7cf      	b.n	80051ae <__swbuf_r+0x1a>
 800520e:	4b09      	ldr	r3, [pc, #36]	; (8005234 <__swbuf_r+0xa0>)
 8005210:	429c      	cmp	r4, r3
 8005212:	bf08      	it	eq
 8005214:	68ec      	ldreq	r4, [r5, #12]
 8005216:	e7ca      	b.n	80051ae <__swbuf_r+0x1a>
 8005218:	4621      	mov	r1, r4
 800521a:	4628      	mov	r0, r5
 800521c:	f000 f81a 	bl	8005254 <__swsetup_r>
 8005220:	2800      	cmp	r0, #0
 8005222:	d0cb      	beq.n	80051bc <__swbuf_r+0x28>
 8005224:	f04f 37ff 	mov.w	r7, #4294967295
 8005228:	e7ea      	b.n	8005200 <__swbuf_r+0x6c>
 800522a:	bf00      	nop
 800522c:	08005d44 	.word	0x08005d44
 8005230:	08005d64 	.word	0x08005d64
 8005234:	08005d24 	.word	0x08005d24

08005238 <__ascii_wctomb>:
 8005238:	b149      	cbz	r1, 800524e <__ascii_wctomb+0x16>
 800523a:	2aff      	cmp	r2, #255	; 0xff
 800523c:	bf85      	ittet	hi
 800523e:	238a      	movhi	r3, #138	; 0x8a
 8005240:	6003      	strhi	r3, [r0, #0]
 8005242:	700a      	strbls	r2, [r1, #0]
 8005244:	f04f 30ff 	movhi.w	r0, #4294967295
 8005248:	bf98      	it	ls
 800524a:	2001      	movls	r0, #1
 800524c:	4770      	bx	lr
 800524e:	4608      	mov	r0, r1
 8005250:	4770      	bx	lr
	...

08005254 <__swsetup_r>:
 8005254:	4b32      	ldr	r3, [pc, #200]	; (8005320 <__swsetup_r+0xcc>)
 8005256:	b570      	push	{r4, r5, r6, lr}
 8005258:	681d      	ldr	r5, [r3, #0]
 800525a:	4606      	mov	r6, r0
 800525c:	460c      	mov	r4, r1
 800525e:	b125      	cbz	r5, 800526a <__swsetup_r+0x16>
 8005260:	69ab      	ldr	r3, [r5, #24]
 8005262:	b913      	cbnz	r3, 800526a <__swsetup_r+0x16>
 8005264:	4628      	mov	r0, r5
 8005266:	f000 f985 	bl	8005574 <__sinit>
 800526a:	4b2e      	ldr	r3, [pc, #184]	; (8005324 <__swsetup_r+0xd0>)
 800526c:	429c      	cmp	r4, r3
 800526e:	d10f      	bne.n	8005290 <__swsetup_r+0x3c>
 8005270:	686c      	ldr	r4, [r5, #4]
 8005272:	89a3      	ldrh	r3, [r4, #12]
 8005274:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005278:	0719      	lsls	r1, r3, #28
 800527a:	d42c      	bmi.n	80052d6 <__swsetup_r+0x82>
 800527c:	06dd      	lsls	r5, r3, #27
 800527e:	d411      	bmi.n	80052a4 <__swsetup_r+0x50>
 8005280:	2309      	movs	r3, #9
 8005282:	6033      	str	r3, [r6, #0]
 8005284:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005288:	81a3      	strh	r3, [r4, #12]
 800528a:	f04f 30ff 	mov.w	r0, #4294967295
 800528e:	e03e      	b.n	800530e <__swsetup_r+0xba>
 8005290:	4b25      	ldr	r3, [pc, #148]	; (8005328 <__swsetup_r+0xd4>)
 8005292:	429c      	cmp	r4, r3
 8005294:	d101      	bne.n	800529a <__swsetup_r+0x46>
 8005296:	68ac      	ldr	r4, [r5, #8]
 8005298:	e7eb      	b.n	8005272 <__swsetup_r+0x1e>
 800529a:	4b24      	ldr	r3, [pc, #144]	; (800532c <__swsetup_r+0xd8>)
 800529c:	429c      	cmp	r4, r3
 800529e:	bf08      	it	eq
 80052a0:	68ec      	ldreq	r4, [r5, #12]
 80052a2:	e7e6      	b.n	8005272 <__swsetup_r+0x1e>
 80052a4:	0758      	lsls	r0, r3, #29
 80052a6:	d512      	bpl.n	80052ce <__swsetup_r+0x7a>
 80052a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052aa:	b141      	cbz	r1, 80052be <__swsetup_r+0x6a>
 80052ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052b0:	4299      	cmp	r1, r3
 80052b2:	d002      	beq.n	80052ba <__swsetup_r+0x66>
 80052b4:	4630      	mov	r0, r6
 80052b6:	f7ff fb31 	bl	800491c <_free_r>
 80052ba:	2300      	movs	r3, #0
 80052bc:	6363      	str	r3, [r4, #52]	; 0x34
 80052be:	89a3      	ldrh	r3, [r4, #12]
 80052c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052c4:	81a3      	strh	r3, [r4, #12]
 80052c6:	2300      	movs	r3, #0
 80052c8:	6063      	str	r3, [r4, #4]
 80052ca:	6923      	ldr	r3, [r4, #16]
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	89a3      	ldrh	r3, [r4, #12]
 80052d0:	f043 0308 	orr.w	r3, r3, #8
 80052d4:	81a3      	strh	r3, [r4, #12]
 80052d6:	6923      	ldr	r3, [r4, #16]
 80052d8:	b94b      	cbnz	r3, 80052ee <__swsetup_r+0x9a>
 80052da:	89a3      	ldrh	r3, [r4, #12]
 80052dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052e4:	d003      	beq.n	80052ee <__swsetup_r+0x9a>
 80052e6:	4621      	mov	r1, r4
 80052e8:	4630      	mov	r0, r6
 80052ea:	f000 fa09 	bl	8005700 <__smakebuf_r>
 80052ee:	89a0      	ldrh	r0, [r4, #12]
 80052f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052f4:	f010 0301 	ands.w	r3, r0, #1
 80052f8:	d00a      	beq.n	8005310 <__swsetup_r+0xbc>
 80052fa:	2300      	movs	r3, #0
 80052fc:	60a3      	str	r3, [r4, #8]
 80052fe:	6963      	ldr	r3, [r4, #20]
 8005300:	425b      	negs	r3, r3
 8005302:	61a3      	str	r3, [r4, #24]
 8005304:	6923      	ldr	r3, [r4, #16]
 8005306:	b943      	cbnz	r3, 800531a <__swsetup_r+0xc6>
 8005308:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800530c:	d1ba      	bne.n	8005284 <__swsetup_r+0x30>
 800530e:	bd70      	pop	{r4, r5, r6, pc}
 8005310:	0781      	lsls	r1, r0, #30
 8005312:	bf58      	it	pl
 8005314:	6963      	ldrpl	r3, [r4, #20]
 8005316:	60a3      	str	r3, [r4, #8]
 8005318:	e7f4      	b.n	8005304 <__swsetup_r+0xb0>
 800531a:	2000      	movs	r0, #0
 800531c:	e7f7      	b.n	800530e <__swsetup_r+0xba>
 800531e:	bf00      	nop
 8005320:	2000000c 	.word	0x2000000c
 8005324:	08005d44 	.word	0x08005d44
 8005328:	08005d64 	.word	0x08005d64
 800532c:	08005d24 	.word	0x08005d24

08005330 <abort>:
 8005330:	b508      	push	{r3, lr}
 8005332:	2006      	movs	r0, #6
 8005334:	f000 fa54 	bl	80057e0 <raise>
 8005338:	2001      	movs	r0, #1
 800533a:	f7fb fb07 	bl	800094c <_exit>
	...

08005340 <__sflush_r>:
 8005340:	898a      	ldrh	r2, [r1, #12]
 8005342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005346:	4605      	mov	r5, r0
 8005348:	0710      	lsls	r0, r2, #28
 800534a:	460c      	mov	r4, r1
 800534c:	d458      	bmi.n	8005400 <__sflush_r+0xc0>
 800534e:	684b      	ldr	r3, [r1, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	dc05      	bgt.n	8005360 <__sflush_r+0x20>
 8005354:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	dc02      	bgt.n	8005360 <__sflush_r+0x20>
 800535a:	2000      	movs	r0, #0
 800535c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005360:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005362:	2e00      	cmp	r6, #0
 8005364:	d0f9      	beq.n	800535a <__sflush_r+0x1a>
 8005366:	2300      	movs	r3, #0
 8005368:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800536c:	682f      	ldr	r7, [r5, #0]
 800536e:	602b      	str	r3, [r5, #0]
 8005370:	d032      	beq.n	80053d8 <__sflush_r+0x98>
 8005372:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005374:	89a3      	ldrh	r3, [r4, #12]
 8005376:	075a      	lsls	r2, r3, #29
 8005378:	d505      	bpl.n	8005386 <__sflush_r+0x46>
 800537a:	6863      	ldr	r3, [r4, #4]
 800537c:	1ac0      	subs	r0, r0, r3
 800537e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005380:	b10b      	cbz	r3, 8005386 <__sflush_r+0x46>
 8005382:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005384:	1ac0      	subs	r0, r0, r3
 8005386:	2300      	movs	r3, #0
 8005388:	4602      	mov	r2, r0
 800538a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800538c:	6a21      	ldr	r1, [r4, #32]
 800538e:	4628      	mov	r0, r5
 8005390:	47b0      	blx	r6
 8005392:	1c43      	adds	r3, r0, #1
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	d106      	bne.n	80053a6 <__sflush_r+0x66>
 8005398:	6829      	ldr	r1, [r5, #0]
 800539a:	291d      	cmp	r1, #29
 800539c:	d82c      	bhi.n	80053f8 <__sflush_r+0xb8>
 800539e:	4a2a      	ldr	r2, [pc, #168]	; (8005448 <__sflush_r+0x108>)
 80053a0:	40ca      	lsrs	r2, r1
 80053a2:	07d6      	lsls	r6, r2, #31
 80053a4:	d528      	bpl.n	80053f8 <__sflush_r+0xb8>
 80053a6:	2200      	movs	r2, #0
 80053a8:	6062      	str	r2, [r4, #4]
 80053aa:	04d9      	lsls	r1, r3, #19
 80053ac:	6922      	ldr	r2, [r4, #16]
 80053ae:	6022      	str	r2, [r4, #0]
 80053b0:	d504      	bpl.n	80053bc <__sflush_r+0x7c>
 80053b2:	1c42      	adds	r2, r0, #1
 80053b4:	d101      	bne.n	80053ba <__sflush_r+0x7a>
 80053b6:	682b      	ldr	r3, [r5, #0]
 80053b8:	b903      	cbnz	r3, 80053bc <__sflush_r+0x7c>
 80053ba:	6560      	str	r0, [r4, #84]	; 0x54
 80053bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053be:	602f      	str	r7, [r5, #0]
 80053c0:	2900      	cmp	r1, #0
 80053c2:	d0ca      	beq.n	800535a <__sflush_r+0x1a>
 80053c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053c8:	4299      	cmp	r1, r3
 80053ca:	d002      	beq.n	80053d2 <__sflush_r+0x92>
 80053cc:	4628      	mov	r0, r5
 80053ce:	f7ff faa5 	bl	800491c <_free_r>
 80053d2:	2000      	movs	r0, #0
 80053d4:	6360      	str	r0, [r4, #52]	; 0x34
 80053d6:	e7c1      	b.n	800535c <__sflush_r+0x1c>
 80053d8:	6a21      	ldr	r1, [r4, #32]
 80053da:	2301      	movs	r3, #1
 80053dc:	4628      	mov	r0, r5
 80053de:	47b0      	blx	r6
 80053e0:	1c41      	adds	r1, r0, #1
 80053e2:	d1c7      	bne.n	8005374 <__sflush_r+0x34>
 80053e4:	682b      	ldr	r3, [r5, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0c4      	beq.n	8005374 <__sflush_r+0x34>
 80053ea:	2b1d      	cmp	r3, #29
 80053ec:	d001      	beq.n	80053f2 <__sflush_r+0xb2>
 80053ee:	2b16      	cmp	r3, #22
 80053f0:	d101      	bne.n	80053f6 <__sflush_r+0xb6>
 80053f2:	602f      	str	r7, [r5, #0]
 80053f4:	e7b1      	b.n	800535a <__sflush_r+0x1a>
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053fc:	81a3      	strh	r3, [r4, #12]
 80053fe:	e7ad      	b.n	800535c <__sflush_r+0x1c>
 8005400:	690f      	ldr	r7, [r1, #16]
 8005402:	2f00      	cmp	r7, #0
 8005404:	d0a9      	beq.n	800535a <__sflush_r+0x1a>
 8005406:	0793      	lsls	r3, r2, #30
 8005408:	680e      	ldr	r6, [r1, #0]
 800540a:	bf08      	it	eq
 800540c:	694b      	ldreq	r3, [r1, #20]
 800540e:	600f      	str	r7, [r1, #0]
 8005410:	bf18      	it	ne
 8005412:	2300      	movne	r3, #0
 8005414:	eba6 0807 	sub.w	r8, r6, r7
 8005418:	608b      	str	r3, [r1, #8]
 800541a:	f1b8 0f00 	cmp.w	r8, #0
 800541e:	dd9c      	ble.n	800535a <__sflush_r+0x1a>
 8005420:	6a21      	ldr	r1, [r4, #32]
 8005422:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005424:	4643      	mov	r3, r8
 8005426:	463a      	mov	r2, r7
 8005428:	4628      	mov	r0, r5
 800542a:	47b0      	blx	r6
 800542c:	2800      	cmp	r0, #0
 800542e:	dc06      	bgt.n	800543e <__sflush_r+0xfe>
 8005430:	89a3      	ldrh	r3, [r4, #12]
 8005432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005436:	81a3      	strh	r3, [r4, #12]
 8005438:	f04f 30ff 	mov.w	r0, #4294967295
 800543c:	e78e      	b.n	800535c <__sflush_r+0x1c>
 800543e:	4407      	add	r7, r0
 8005440:	eba8 0800 	sub.w	r8, r8, r0
 8005444:	e7e9      	b.n	800541a <__sflush_r+0xda>
 8005446:	bf00      	nop
 8005448:	20400001 	.word	0x20400001

0800544c <_fflush_r>:
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	690b      	ldr	r3, [r1, #16]
 8005450:	4605      	mov	r5, r0
 8005452:	460c      	mov	r4, r1
 8005454:	b913      	cbnz	r3, 800545c <_fflush_r+0x10>
 8005456:	2500      	movs	r5, #0
 8005458:	4628      	mov	r0, r5
 800545a:	bd38      	pop	{r3, r4, r5, pc}
 800545c:	b118      	cbz	r0, 8005466 <_fflush_r+0x1a>
 800545e:	6983      	ldr	r3, [r0, #24]
 8005460:	b90b      	cbnz	r3, 8005466 <_fflush_r+0x1a>
 8005462:	f000 f887 	bl	8005574 <__sinit>
 8005466:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <_fflush_r+0x6c>)
 8005468:	429c      	cmp	r4, r3
 800546a:	d11b      	bne.n	80054a4 <_fflush_r+0x58>
 800546c:	686c      	ldr	r4, [r5, #4]
 800546e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0ef      	beq.n	8005456 <_fflush_r+0xa>
 8005476:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005478:	07d0      	lsls	r0, r2, #31
 800547a:	d404      	bmi.n	8005486 <_fflush_r+0x3a>
 800547c:	0599      	lsls	r1, r3, #22
 800547e:	d402      	bmi.n	8005486 <_fflush_r+0x3a>
 8005480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005482:	f000 f915 	bl	80056b0 <__retarget_lock_acquire_recursive>
 8005486:	4628      	mov	r0, r5
 8005488:	4621      	mov	r1, r4
 800548a:	f7ff ff59 	bl	8005340 <__sflush_r>
 800548e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005490:	07da      	lsls	r2, r3, #31
 8005492:	4605      	mov	r5, r0
 8005494:	d4e0      	bmi.n	8005458 <_fflush_r+0xc>
 8005496:	89a3      	ldrh	r3, [r4, #12]
 8005498:	059b      	lsls	r3, r3, #22
 800549a:	d4dd      	bmi.n	8005458 <_fflush_r+0xc>
 800549c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800549e:	f000 f908 	bl	80056b2 <__retarget_lock_release_recursive>
 80054a2:	e7d9      	b.n	8005458 <_fflush_r+0xc>
 80054a4:	4b05      	ldr	r3, [pc, #20]	; (80054bc <_fflush_r+0x70>)
 80054a6:	429c      	cmp	r4, r3
 80054a8:	d101      	bne.n	80054ae <_fflush_r+0x62>
 80054aa:	68ac      	ldr	r4, [r5, #8]
 80054ac:	e7df      	b.n	800546e <_fflush_r+0x22>
 80054ae:	4b04      	ldr	r3, [pc, #16]	; (80054c0 <_fflush_r+0x74>)
 80054b0:	429c      	cmp	r4, r3
 80054b2:	bf08      	it	eq
 80054b4:	68ec      	ldreq	r4, [r5, #12]
 80054b6:	e7da      	b.n	800546e <_fflush_r+0x22>
 80054b8:	08005d44 	.word	0x08005d44
 80054bc:	08005d64 	.word	0x08005d64
 80054c0:	08005d24 	.word	0x08005d24

080054c4 <std>:
 80054c4:	2300      	movs	r3, #0
 80054c6:	b510      	push	{r4, lr}
 80054c8:	4604      	mov	r4, r0
 80054ca:	e9c0 3300 	strd	r3, r3, [r0]
 80054ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054d2:	6083      	str	r3, [r0, #8]
 80054d4:	8181      	strh	r1, [r0, #12]
 80054d6:	6643      	str	r3, [r0, #100]	; 0x64
 80054d8:	81c2      	strh	r2, [r0, #14]
 80054da:	6183      	str	r3, [r0, #24]
 80054dc:	4619      	mov	r1, r3
 80054de:	2208      	movs	r2, #8
 80054e0:	305c      	adds	r0, #92	; 0x5c
 80054e2:	f7fd fc01 	bl	8002ce8 <memset>
 80054e6:	4b05      	ldr	r3, [pc, #20]	; (80054fc <std+0x38>)
 80054e8:	6263      	str	r3, [r4, #36]	; 0x24
 80054ea:	4b05      	ldr	r3, [pc, #20]	; (8005500 <std+0x3c>)
 80054ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80054ee:	4b05      	ldr	r3, [pc, #20]	; (8005504 <std+0x40>)
 80054f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054f2:	4b05      	ldr	r3, [pc, #20]	; (8005508 <std+0x44>)
 80054f4:	6224      	str	r4, [r4, #32]
 80054f6:	6323      	str	r3, [r4, #48]	; 0x30
 80054f8:	bd10      	pop	{r4, pc}
 80054fa:	bf00      	nop
 80054fc:	08005819 	.word	0x08005819
 8005500:	0800583b 	.word	0x0800583b
 8005504:	08005873 	.word	0x08005873
 8005508:	08005897 	.word	0x08005897

0800550c <_cleanup_r>:
 800550c:	4901      	ldr	r1, [pc, #4]	; (8005514 <_cleanup_r+0x8>)
 800550e:	f000 b8af 	b.w	8005670 <_fwalk_reent>
 8005512:	bf00      	nop
 8005514:	0800544d 	.word	0x0800544d

08005518 <__sfmoreglue>:
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	2268      	movs	r2, #104	; 0x68
 800551c:	1e4d      	subs	r5, r1, #1
 800551e:	4355      	muls	r5, r2
 8005520:	460e      	mov	r6, r1
 8005522:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005526:	f7ff fa65 	bl	80049f4 <_malloc_r>
 800552a:	4604      	mov	r4, r0
 800552c:	b140      	cbz	r0, 8005540 <__sfmoreglue+0x28>
 800552e:	2100      	movs	r1, #0
 8005530:	e9c0 1600 	strd	r1, r6, [r0]
 8005534:	300c      	adds	r0, #12
 8005536:	60a0      	str	r0, [r4, #8]
 8005538:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800553c:	f7fd fbd4 	bl	8002ce8 <memset>
 8005540:	4620      	mov	r0, r4
 8005542:	bd70      	pop	{r4, r5, r6, pc}

08005544 <__sfp_lock_acquire>:
 8005544:	4801      	ldr	r0, [pc, #4]	; (800554c <__sfp_lock_acquire+0x8>)
 8005546:	f000 b8b3 	b.w	80056b0 <__retarget_lock_acquire_recursive>
 800554a:	bf00      	nop
 800554c:	20000295 	.word	0x20000295

08005550 <__sfp_lock_release>:
 8005550:	4801      	ldr	r0, [pc, #4]	; (8005558 <__sfp_lock_release+0x8>)
 8005552:	f000 b8ae 	b.w	80056b2 <__retarget_lock_release_recursive>
 8005556:	bf00      	nop
 8005558:	20000295 	.word	0x20000295

0800555c <__sinit_lock_acquire>:
 800555c:	4801      	ldr	r0, [pc, #4]	; (8005564 <__sinit_lock_acquire+0x8>)
 800555e:	f000 b8a7 	b.w	80056b0 <__retarget_lock_acquire_recursive>
 8005562:	bf00      	nop
 8005564:	20000296 	.word	0x20000296

08005568 <__sinit_lock_release>:
 8005568:	4801      	ldr	r0, [pc, #4]	; (8005570 <__sinit_lock_release+0x8>)
 800556a:	f000 b8a2 	b.w	80056b2 <__retarget_lock_release_recursive>
 800556e:	bf00      	nop
 8005570:	20000296 	.word	0x20000296

08005574 <__sinit>:
 8005574:	b510      	push	{r4, lr}
 8005576:	4604      	mov	r4, r0
 8005578:	f7ff fff0 	bl	800555c <__sinit_lock_acquire>
 800557c:	69a3      	ldr	r3, [r4, #24]
 800557e:	b11b      	cbz	r3, 8005588 <__sinit+0x14>
 8005580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005584:	f7ff bff0 	b.w	8005568 <__sinit_lock_release>
 8005588:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800558c:	6523      	str	r3, [r4, #80]	; 0x50
 800558e:	4b13      	ldr	r3, [pc, #76]	; (80055dc <__sinit+0x68>)
 8005590:	4a13      	ldr	r2, [pc, #76]	; (80055e0 <__sinit+0x6c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	62a2      	str	r2, [r4, #40]	; 0x28
 8005596:	42a3      	cmp	r3, r4
 8005598:	bf04      	itt	eq
 800559a:	2301      	moveq	r3, #1
 800559c:	61a3      	streq	r3, [r4, #24]
 800559e:	4620      	mov	r0, r4
 80055a0:	f000 f820 	bl	80055e4 <__sfp>
 80055a4:	6060      	str	r0, [r4, #4]
 80055a6:	4620      	mov	r0, r4
 80055a8:	f000 f81c 	bl	80055e4 <__sfp>
 80055ac:	60a0      	str	r0, [r4, #8]
 80055ae:	4620      	mov	r0, r4
 80055b0:	f000 f818 	bl	80055e4 <__sfp>
 80055b4:	2200      	movs	r2, #0
 80055b6:	60e0      	str	r0, [r4, #12]
 80055b8:	2104      	movs	r1, #4
 80055ba:	6860      	ldr	r0, [r4, #4]
 80055bc:	f7ff ff82 	bl	80054c4 <std>
 80055c0:	68a0      	ldr	r0, [r4, #8]
 80055c2:	2201      	movs	r2, #1
 80055c4:	2109      	movs	r1, #9
 80055c6:	f7ff ff7d 	bl	80054c4 <std>
 80055ca:	68e0      	ldr	r0, [r4, #12]
 80055cc:	2202      	movs	r2, #2
 80055ce:	2112      	movs	r1, #18
 80055d0:	f7ff ff78 	bl	80054c4 <std>
 80055d4:	2301      	movs	r3, #1
 80055d6:	61a3      	str	r3, [r4, #24]
 80055d8:	e7d2      	b.n	8005580 <__sinit+0xc>
 80055da:	bf00      	nop
 80055dc:	080059ac 	.word	0x080059ac
 80055e0:	0800550d 	.word	0x0800550d

080055e4 <__sfp>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	4607      	mov	r7, r0
 80055e8:	f7ff ffac 	bl	8005544 <__sfp_lock_acquire>
 80055ec:	4b1e      	ldr	r3, [pc, #120]	; (8005668 <__sfp+0x84>)
 80055ee:	681e      	ldr	r6, [r3, #0]
 80055f0:	69b3      	ldr	r3, [r6, #24]
 80055f2:	b913      	cbnz	r3, 80055fa <__sfp+0x16>
 80055f4:	4630      	mov	r0, r6
 80055f6:	f7ff ffbd 	bl	8005574 <__sinit>
 80055fa:	3648      	adds	r6, #72	; 0x48
 80055fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005600:	3b01      	subs	r3, #1
 8005602:	d503      	bpl.n	800560c <__sfp+0x28>
 8005604:	6833      	ldr	r3, [r6, #0]
 8005606:	b30b      	cbz	r3, 800564c <__sfp+0x68>
 8005608:	6836      	ldr	r6, [r6, #0]
 800560a:	e7f7      	b.n	80055fc <__sfp+0x18>
 800560c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005610:	b9d5      	cbnz	r5, 8005648 <__sfp+0x64>
 8005612:	4b16      	ldr	r3, [pc, #88]	; (800566c <__sfp+0x88>)
 8005614:	60e3      	str	r3, [r4, #12]
 8005616:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800561a:	6665      	str	r5, [r4, #100]	; 0x64
 800561c:	f000 f847 	bl	80056ae <__retarget_lock_init_recursive>
 8005620:	f7ff ff96 	bl	8005550 <__sfp_lock_release>
 8005624:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005628:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800562c:	6025      	str	r5, [r4, #0]
 800562e:	61a5      	str	r5, [r4, #24]
 8005630:	2208      	movs	r2, #8
 8005632:	4629      	mov	r1, r5
 8005634:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005638:	f7fd fb56 	bl	8002ce8 <memset>
 800563c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005640:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005644:	4620      	mov	r0, r4
 8005646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005648:	3468      	adds	r4, #104	; 0x68
 800564a:	e7d9      	b.n	8005600 <__sfp+0x1c>
 800564c:	2104      	movs	r1, #4
 800564e:	4638      	mov	r0, r7
 8005650:	f7ff ff62 	bl	8005518 <__sfmoreglue>
 8005654:	4604      	mov	r4, r0
 8005656:	6030      	str	r0, [r6, #0]
 8005658:	2800      	cmp	r0, #0
 800565a:	d1d5      	bne.n	8005608 <__sfp+0x24>
 800565c:	f7ff ff78 	bl	8005550 <__sfp_lock_release>
 8005660:	230c      	movs	r3, #12
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	e7ee      	b.n	8005644 <__sfp+0x60>
 8005666:	bf00      	nop
 8005668:	080059ac 	.word	0x080059ac
 800566c:	ffff0001 	.word	0xffff0001

08005670 <_fwalk_reent>:
 8005670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005674:	4606      	mov	r6, r0
 8005676:	4688      	mov	r8, r1
 8005678:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800567c:	2700      	movs	r7, #0
 800567e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005682:	f1b9 0901 	subs.w	r9, r9, #1
 8005686:	d505      	bpl.n	8005694 <_fwalk_reent+0x24>
 8005688:	6824      	ldr	r4, [r4, #0]
 800568a:	2c00      	cmp	r4, #0
 800568c:	d1f7      	bne.n	800567e <_fwalk_reent+0xe>
 800568e:	4638      	mov	r0, r7
 8005690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005694:	89ab      	ldrh	r3, [r5, #12]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d907      	bls.n	80056aa <_fwalk_reent+0x3a>
 800569a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800569e:	3301      	adds	r3, #1
 80056a0:	d003      	beq.n	80056aa <_fwalk_reent+0x3a>
 80056a2:	4629      	mov	r1, r5
 80056a4:	4630      	mov	r0, r6
 80056a6:	47c0      	blx	r8
 80056a8:	4307      	orrs	r7, r0
 80056aa:	3568      	adds	r5, #104	; 0x68
 80056ac:	e7e9      	b.n	8005682 <_fwalk_reent+0x12>

080056ae <__retarget_lock_init_recursive>:
 80056ae:	4770      	bx	lr

080056b0 <__retarget_lock_acquire_recursive>:
 80056b0:	4770      	bx	lr

080056b2 <__retarget_lock_release_recursive>:
 80056b2:	4770      	bx	lr

080056b4 <__swhatbuf_r>:
 80056b4:	b570      	push	{r4, r5, r6, lr}
 80056b6:	460e      	mov	r6, r1
 80056b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056bc:	2900      	cmp	r1, #0
 80056be:	b096      	sub	sp, #88	; 0x58
 80056c0:	4614      	mov	r4, r2
 80056c2:	461d      	mov	r5, r3
 80056c4:	da08      	bge.n	80056d8 <__swhatbuf_r+0x24>
 80056c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	602a      	str	r2, [r5, #0]
 80056ce:	061a      	lsls	r2, r3, #24
 80056d0:	d410      	bmi.n	80056f4 <__swhatbuf_r+0x40>
 80056d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056d6:	e00e      	b.n	80056f6 <__swhatbuf_r+0x42>
 80056d8:	466a      	mov	r2, sp
 80056da:	f000 f903 	bl	80058e4 <_fstat_r>
 80056de:	2800      	cmp	r0, #0
 80056e0:	dbf1      	blt.n	80056c6 <__swhatbuf_r+0x12>
 80056e2:	9a01      	ldr	r2, [sp, #4]
 80056e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80056e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80056ec:	425a      	negs	r2, r3
 80056ee:	415a      	adcs	r2, r3
 80056f0:	602a      	str	r2, [r5, #0]
 80056f2:	e7ee      	b.n	80056d2 <__swhatbuf_r+0x1e>
 80056f4:	2340      	movs	r3, #64	; 0x40
 80056f6:	2000      	movs	r0, #0
 80056f8:	6023      	str	r3, [r4, #0]
 80056fa:	b016      	add	sp, #88	; 0x58
 80056fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08005700 <__smakebuf_r>:
 8005700:	898b      	ldrh	r3, [r1, #12]
 8005702:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005704:	079d      	lsls	r5, r3, #30
 8005706:	4606      	mov	r6, r0
 8005708:	460c      	mov	r4, r1
 800570a:	d507      	bpl.n	800571c <__smakebuf_r+0x1c>
 800570c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005710:	6023      	str	r3, [r4, #0]
 8005712:	6123      	str	r3, [r4, #16]
 8005714:	2301      	movs	r3, #1
 8005716:	6163      	str	r3, [r4, #20]
 8005718:	b002      	add	sp, #8
 800571a:	bd70      	pop	{r4, r5, r6, pc}
 800571c:	ab01      	add	r3, sp, #4
 800571e:	466a      	mov	r2, sp
 8005720:	f7ff ffc8 	bl	80056b4 <__swhatbuf_r>
 8005724:	9900      	ldr	r1, [sp, #0]
 8005726:	4605      	mov	r5, r0
 8005728:	4630      	mov	r0, r6
 800572a:	f7ff f963 	bl	80049f4 <_malloc_r>
 800572e:	b948      	cbnz	r0, 8005744 <__smakebuf_r+0x44>
 8005730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005734:	059a      	lsls	r2, r3, #22
 8005736:	d4ef      	bmi.n	8005718 <__smakebuf_r+0x18>
 8005738:	f023 0303 	bic.w	r3, r3, #3
 800573c:	f043 0302 	orr.w	r3, r3, #2
 8005740:	81a3      	strh	r3, [r4, #12]
 8005742:	e7e3      	b.n	800570c <__smakebuf_r+0xc>
 8005744:	4b0d      	ldr	r3, [pc, #52]	; (800577c <__smakebuf_r+0x7c>)
 8005746:	62b3      	str	r3, [r6, #40]	; 0x28
 8005748:	89a3      	ldrh	r3, [r4, #12]
 800574a:	6020      	str	r0, [r4, #0]
 800574c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005750:	81a3      	strh	r3, [r4, #12]
 8005752:	9b00      	ldr	r3, [sp, #0]
 8005754:	6163      	str	r3, [r4, #20]
 8005756:	9b01      	ldr	r3, [sp, #4]
 8005758:	6120      	str	r0, [r4, #16]
 800575a:	b15b      	cbz	r3, 8005774 <__smakebuf_r+0x74>
 800575c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005760:	4630      	mov	r0, r6
 8005762:	f000 f8d1 	bl	8005908 <_isatty_r>
 8005766:	b128      	cbz	r0, 8005774 <__smakebuf_r+0x74>
 8005768:	89a3      	ldrh	r3, [r4, #12]
 800576a:	f023 0303 	bic.w	r3, r3, #3
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	81a3      	strh	r3, [r4, #12]
 8005774:	89a0      	ldrh	r0, [r4, #12]
 8005776:	4305      	orrs	r5, r0
 8005778:	81a5      	strh	r5, [r4, #12]
 800577a:	e7cd      	b.n	8005718 <__smakebuf_r+0x18>
 800577c:	0800550d 	.word	0x0800550d

08005780 <_malloc_usable_size_r>:
 8005780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005784:	1f18      	subs	r0, r3, #4
 8005786:	2b00      	cmp	r3, #0
 8005788:	bfbc      	itt	lt
 800578a:	580b      	ldrlt	r3, [r1, r0]
 800578c:	18c0      	addlt	r0, r0, r3
 800578e:	4770      	bx	lr

08005790 <_raise_r>:
 8005790:	291f      	cmp	r1, #31
 8005792:	b538      	push	{r3, r4, r5, lr}
 8005794:	4604      	mov	r4, r0
 8005796:	460d      	mov	r5, r1
 8005798:	d904      	bls.n	80057a4 <_raise_r+0x14>
 800579a:	2316      	movs	r3, #22
 800579c:	6003      	str	r3, [r0, #0]
 800579e:	f04f 30ff 	mov.w	r0, #4294967295
 80057a2:	bd38      	pop	{r3, r4, r5, pc}
 80057a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80057a6:	b112      	cbz	r2, 80057ae <_raise_r+0x1e>
 80057a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80057ac:	b94b      	cbnz	r3, 80057c2 <_raise_r+0x32>
 80057ae:	4620      	mov	r0, r4
 80057b0:	f000 f830 	bl	8005814 <_getpid_r>
 80057b4:	462a      	mov	r2, r5
 80057b6:	4601      	mov	r1, r0
 80057b8:	4620      	mov	r0, r4
 80057ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057be:	f000 b817 	b.w	80057f0 <_kill_r>
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d00a      	beq.n	80057dc <_raise_r+0x4c>
 80057c6:	1c59      	adds	r1, r3, #1
 80057c8:	d103      	bne.n	80057d2 <_raise_r+0x42>
 80057ca:	2316      	movs	r3, #22
 80057cc:	6003      	str	r3, [r0, #0]
 80057ce:	2001      	movs	r0, #1
 80057d0:	e7e7      	b.n	80057a2 <_raise_r+0x12>
 80057d2:	2400      	movs	r4, #0
 80057d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80057d8:	4628      	mov	r0, r5
 80057da:	4798      	blx	r3
 80057dc:	2000      	movs	r0, #0
 80057de:	e7e0      	b.n	80057a2 <_raise_r+0x12>

080057e0 <raise>:
 80057e0:	4b02      	ldr	r3, [pc, #8]	; (80057ec <raise+0xc>)
 80057e2:	4601      	mov	r1, r0
 80057e4:	6818      	ldr	r0, [r3, #0]
 80057e6:	f7ff bfd3 	b.w	8005790 <_raise_r>
 80057ea:	bf00      	nop
 80057ec:	2000000c 	.word	0x2000000c

080057f0 <_kill_r>:
 80057f0:	b538      	push	{r3, r4, r5, lr}
 80057f2:	4d07      	ldr	r5, [pc, #28]	; (8005810 <_kill_r+0x20>)
 80057f4:	2300      	movs	r3, #0
 80057f6:	4604      	mov	r4, r0
 80057f8:	4608      	mov	r0, r1
 80057fa:	4611      	mov	r1, r2
 80057fc:	602b      	str	r3, [r5, #0]
 80057fe:	f7fb f895 	bl	800092c <_kill>
 8005802:	1c43      	adds	r3, r0, #1
 8005804:	d102      	bne.n	800580c <_kill_r+0x1c>
 8005806:	682b      	ldr	r3, [r5, #0]
 8005808:	b103      	cbz	r3, 800580c <_kill_r+0x1c>
 800580a:	6023      	str	r3, [r4, #0]
 800580c:	bd38      	pop	{r3, r4, r5, pc}
 800580e:	bf00      	nop
 8005810:	20000290 	.word	0x20000290

08005814 <_getpid_r>:
 8005814:	f7fb b882 	b.w	800091c <_getpid>

08005818 <__sread>:
 8005818:	b510      	push	{r4, lr}
 800581a:	460c      	mov	r4, r1
 800581c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005820:	f000 f894 	bl	800594c <_read_r>
 8005824:	2800      	cmp	r0, #0
 8005826:	bfab      	itete	ge
 8005828:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800582a:	89a3      	ldrhlt	r3, [r4, #12]
 800582c:	181b      	addge	r3, r3, r0
 800582e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005832:	bfac      	ite	ge
 8005834:	6563      	strge	r3, [r4, #84]	; 0x54
 8005836:	81a3      	strhlt	r3, [r4, #12]
 8005838:	bd10      	pop	{r4, pc}

0800583a <__swrite>:
 800583a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800583e:	461f      	mov	r7, r3
 8005840:	898b      	ldrh	r3, [r1, #12]
 8005842:	05db      	lsls	r3, r3, #23
 8005844:	4605      	mov	r5, r0
 8005846:	460c      	mov	r4, r1
 8005848:	4616      	mov	r6, r2
 800584a:	d505      	bpl.n	8005858 <__swrite+0x1e>
 800584c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005850:	2302      	movs	r3, #2
 8005852:	2200      	movs	r2, #0
 8005854:	f000 f868 	bl	8005928 <_lseek_r>
 8005858:	89a3      	ldrh	r3, [r4, #12]
 800585a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800585e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005862:	81a3      	strh	r3, [r4, #12]
 8005864:	4632      	mov	r2, r6
 8005866:	463b      	mov	r3, r7
 8005868:	4628      	mov	r0, r5
 800586a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800586e:	f000 b817 	b.w	80058a0 <_write_r>

08005872 <__sseek>:
 8005872:	b510      	push	{r4, lr}
 8005874:	460c      	mov	r4, r1
 8005876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800587a:	f000 f855 	bl	8005928 <_lseek_r>
 800587e:	1c43      	adds	r3, r0, #1
 8005880:	89a3      	ldrh	r3, [r4, #12]
 8005882:	bf15      	itete	ne
 8005884:	6560      	strne	r0, [r4, #84]	; 0x54
 8005886:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800588a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800588e:	81a3      	strheq	r3, [r4, #12]
 8005890:	bf18      	it	ne
 8005892:	81a3      	strhne	r3, [r4, #12]
 8005894:	bd10      	pop	{r4, pc}

08005896 <__sclose>:
 8005896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800589a:	f000 b813 	b.w	80058c4 <_close_r>
	...

080058a0 <_write_r>:
 80058a0:	b538      	push	{r3, r4, r5, lr}
 80058a2:	4d07      	ldr	r5, [pc, #28]	; (80058c0 <_write_r+0x20>)
 80058a4:	4604      	mov	r4, r0
 80058a6:	4608      	mov	r0, r1
 80058a8:	4611      	mov	r1, r2
 80058aa:	2200      	movs	r2, #0
 80058ac:	602a      	str	r2, [r5, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	f7fb f873 	bl	800099a <_write>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	d102      	bne.n	80058be <_write_r+0x1e>
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	b103      	cbz	r3, 80058be <_write_r+0x1e>
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	bd38      	pop	{r3, r4, r5, pc}
 80058c0:	20000290 	.word	0x20000290

080058c4 <_close_r>:
 80058c4:	b538      	push	{r3, r4, r5, lr}
 80058c6:	4d06      	ldr	r5, [pc, #24]	; (80058e0 <_close_r+0x1c>)
 80058c8:	2300      	movs	r3, #0
 80058ca:	4604      	mov	r4, r0
 80058cc:	4608      	mov	r0, r1
 80058ce:	602b      	str	r3, [r5, #0]
 80058d0:	f7fb f87f 	bl	80009d2 <_close>
 80058d4:	1c43      	adds	r3, r0, #1
 80058d6:	d102      	bne.n	80058de <_close_r+0x1a>
 80058d8:	682b      	ldr	r3, [r5, #0]
 80058da:	b103      	cbz	r3, 80058de <_close_r+0x1a>
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	bd38      	pop	{r3, r4, r5, pc}
 80058e0:	20000290 	.word	0x20000290

080058e4 <_fstat_r>:
 80058e4:	b538      	push	{r3, r4, r5, lr}
 80058e6:	4d07      	ldr	r5, [pc, #28]	; (8005904 <_fstat_r+0x20>)
 80058e8:	2300      	movs	r3, #0
 80058ea:	4604      	mov	r4, r0
 80058ec:	4608      	mov	r0, r1
 80058ee:	4611      	mov	r1, r2
 80058f0:	602b      	str	r3, [r5, #0]
 80058f2:	f7fb f87a 	bl	80009ea <_fstat>
 80058f6:	1c43      	adds	r3, r0, #1
 80058f8:	d102      	bne.n	8005900 <_fstat_r+0x1c>
 80058fa:	682b      	ldr	r3, [r5, #0]
 80058fc:	b103      	cbz	r3, 8005900 <_fstat_r+0x1c>
 80058fe:	6023      	str	r3, [r4, #0]
 8005900:	bd38      	pop	{r3, r4, r5, pc}
 8005902:	bf00      	nop
 8005904:	20000290 	.word	0x20000290

08005908 <_isatty_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	4d06      	ldr	r5, [pc, #24]	; (8005924 <_isatty_r+0x1c>)
 800590c:	2300      	movs	r3, #0
 800590e:	4604      	mov	r4, r0
 8005910:	4608      	mov	r0, r1
 8005912:	602b      	str	r3, [r5, #0]
 8005914:	f7fb f879 	bl	8000a0a <_isatty>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	d102      	bne.n	8005922 <_isatty_r+0x1a>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	b103      	cbz	r3, 8005922 <_isatty_r+0x1a>
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	20000290 	.word	0x20000290

08005928 <_lseek_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4d07      	ldr	r5, [pc, #28]	; (8005948 <_lseek_r+0x20>)
 800592c:	4604      	mov	r4, r0
 800592e:	4608      	mov	r0, r1
 8005930:	4611      	mov	r1, r2
 8005932:	2200      	movs	r2, #0
 8005934:	602a      	str	r2, [r5, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	f7fb f872 	bl	8000a20 <_lseek>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_lseek_r+0x1e>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_lseek_r+0x1e>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	20000290 	.word	0x20000290

0800594c <_read_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4d07      	ldr	r5, [pc, #28]	; (800596c <_read_r+0x20>)
 8005950:	4604      	mov	r4, r0
 8005952:	4608      	mov	r0, r1
 8005954:	4611      	mov	r1, r2
 8005956:	2200      	movs	r2, #0
 8005958:	602a      	str	r2, [r5, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	f7fb f800 	bl	8000960 <_read>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d102      	bne.n	800596a <_read_r+0x1e>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	b103      	cbz	r3, 800596a <_read_r+0x1e>
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	20000290 	.word	0x20000290

08005970 <_init>:
 8005970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005972:	bf00      	nop
 8005974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005976:	bc08      	pop	{r3}
 8005978:	469e      	mov	lr, r3
 800597a:	4770      	bx	lr

0800597c <_fini>:
 800597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597e:	bf00      	nop
 8005980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005982:	bc08      	pop	{r3}
 8005984:	469e      	mov	lr, r3
 8005986:	4770      	bx	lr
